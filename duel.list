------- FILE duel-main.asm LEVEL 1 PASS 2
      1  cfff ????						; duel-main.asm
      2  cfff ????
      3  cfff ????						; Artillery Duel - Network game for the Commodore 64!
      4  cfff ????						;
      5  cfff ????						; Leif Bloomquist   (Game code)    leif@schemafactor.com
      6  cfff ????						; Oliver VieBrooks  (Network code)
      7  cfff ????						; Chris Boudreau    (Testing)
      8  cfff ????						; Thurstan Johnston (Testing)
      9  cfff ????						; Raymond LeJuez    (Explosions)
     10  cfff ????						; Robin Harbron     (Fixed point math and hardware loan)
     11  cfff ????
     12  cfff ????				      processor	6502
     13  0801					      org	$0801
     14  0801
     15  0801							;zeropage addresses and equates
------- FILE equates.asm LEVEL 2 PASS 2
      0  0801					      include	"equates.asm"
      1  0801							;kernal routines
      2  0801		       ff a5	   ACPTR      =	$ffa5
      3  0801		       ff c6	   CHKIN      =	$ffc6
      4  0801		       ff c9	   CHKOUT     =	$ffc9
      5  0801		       ff cf	   CHRIN      =	$ffcf
      6  0801		       ff d2	   CHROUT     =	$ffd2
      7  0801		       ff a8	   CIOUT      =	$ffa8
      8  0801		       ff c3	   CLOSE      =	$ffc3
      9  0801		       ff e4	   GETIN      =	$ffe4
     10  0801		       ff e7	   CLALL      =	$ffe7
     11  0801		       ff cc	   CLRCHN     =	$ffcc
     12  0801		       ff b1	   LISTEN     =	$ffb1
     13  0801		       ff c0	   OPEN       =	$ffc0
     14  0801		       ff 93	   SECOND     =	$ff93
     15  0801		       ff ba	   SETLFS     =	$ffba
     16  0801		       ff bd	   SETNAM     =	$ffbd
     17  0801		       ff b4	   TALK       =	$ffb4
     18  0801		       ff 96	   TKSA       =	$ff96
     19  0801		       ff ae	   UNLSN      =	$ffae
     20  0801		       ff ab	   UNTLK      =	$ffab
     21  0801		       ff e1	   STOP       =	$ffe1
     22  0801		       ff b7	   READST     =	$ffb7
     23  0801		       ff d5	   LOAD       =	$ffd5
     24  0801		       ff d8	   SAVE       =	$ffd8
     25  0801
     26  0801							;zeropage addresses
     27  0801		       00 55	   DHCP_PTR   =	$55	;(2)
     28  0801		       00 57	   RECV_PTR   =	$57	;(2)
     29  0801		       00 59	   XMIT_PTR   =	$59	;(2)
     30  0801		       00 5b	   RECV_LEN   =	$5b	;(2)
     31  0801		       00 5d	   XMIT_LEN   =	$5d	;(2)
     32  0801		       00 5f	   DNS_TMP    =	$5f	;(2)
     33  0801		       00 61	   IPM_TMP    =	$61	;(2)
     34  0801		       00 63	   CPY_SRC    =	$63	;(2)
     35  0801		       00 65	   CPY_DST    =	$65	;(2)
     36  0801		       00 67	   SAV_PTR    =	$67	;(2)
     37  0801
     38  0801							;utils zeropage
     39  0801		       00 67	   INPUT_PTR  =	$67	;(2)
     40  0801		       00 69	   INPUT_Y    =	$69	;(1)
     41  0801
     42  0801							;checksum zeropage
     43  0801		       00 6a	   MakeChecksumZp_Ptr =	$6a	;(2)
     44  0801
     45  0801							;c64 c/g
     46  0801		       00 90	   CG_BLK     =	144
     47  0801		       00 05	   CG_WHT     =	5
     48  0801		       00 1c	   CG_RED     =	28
     49  0801		       00 9f	   CG_CYN     =	159
     50  0801		       00 9c	   CG_PUR     =	156
     51  0801		       00 1e	   CG_GRN     =	30
     52  0801		       00 1f	   CG_BLU     =	31
     53  0801		       00 9e	   CG_YEL     =	158
     54  0801		       00 95	   CG_BRN     =	149
     55  0801		       00 81	   CG_ORG     =	129
     56  0801		       00 96	   CG_PNK     =	150
     57  0801		       00 97	   CG_GR1     =	151
     58  0801		       00 98	   CG_GR2     =	152
     59  0801		       00 99	   CG_LGN     =	153
     60  0801		       00 9a	   CG_LBL     =	154
     61  0801		       00 9b	   CG_GR3     =	155
     62  0801		       00 12	   CG_RVS     =	18	;revs-on
     63  0801		       00 92	   CG_NRM     =	146	;revs-off
     64  0801
     65  0801		       00 08	   CG_DCS     =	8	;disable shift+C=
     66  0801		       00 09	   CG_ECS     =	9	;enable shift+C=
     67  0801
     68  0801		       00 0e	   CG_LCS     =	14	;switch to lowercase
     69  0801		       00 8e	   CG_UCS     =	142	;switch to uppercase
     70  0801
     71  0801		       00 93	   CG_CLR     =	147	;clear screen
     72  0801
     73  0801							;cursor movement
     74  0801		       00 13	   CS_HOM     =	19
     75  0801		       00 91	   CS_U       =	145
     76  0801		       00 11	   CS_D       =	17
     77  0801		       00 9d	   CS_L       =	157
     78  0801		       00 1d	   CS_R       =	29
     79  0801
     80  0801		       00 0d	   CRLF       =	13
     81  0801
     82  0801		       00 00	   YN_NO      =	0
     83  0801		       00 01	   YN_YES     =	1
     84  0801		       00 02	   YN_CANCEL  =	2
------- FILE duel-main.asm
     17  0801
     18  0801							;macros
------- FILE macros.asm LEVEL 2 PASS 2
      0  0801					      include	"macros.asm"
      1  0801					      MAC	print
      2  0801					      jsr	prns
      3  0801					      dc.b	{0},0
      4  0801					      ENDM
      5  0801
      6  0801					      MAC	iprint
      7  0801					      jsr	iprns
      8  0801					      dc.b	{0},0
      9  0801					      ENDM
     10  0801
     11  0801					      MAC	error
     12  0801					      jsr	prns
     13  0801					      dc.b	13,CG_RED,CG_RVS,{0},CG_NRM,CG_WHT,13,0
     14  0801					      ENDM
     15  0801
     16  0801					      MAC	input
     17  0801					      ldx	#>{0}
     18  0801					      lda	#<{0}
     19  0801					      ldy	{2}
     20  0801					      jsr	INPUT
     21  0801					      ENDM
     22  0801
     23  0801					      MAC	ldxa
     24  0801					      ldx	{0}+1
     25  0801					      lda	{0}
     26  0801					      ENDM
     27  0801
     28  0801					      MAC	ldax
     29  0801					      ldx	#>{0}
     30  0801					      lda	#<{0}
     31  0801					      ENDM
     32  0801
     33  0801					      MAC	stax
     34  0801					      stx	{0}+1
     35  0801					      sta	{0}
     36  0801					      ENDM
     37  0801
     38  0801					      MAC	staa
     39  0801					      sta	{1}
     40  0801					      sta	{1}+1
     41  0801					      ENDM
     42  0801
     43  0801					      MAC	movax
     44  0801					      ldax	{1}
     45  0801					      stax	{2}
     46  0801					      ENDM
     47  0801
     48  0801					      MAC	pushax
     49  0801					      pha
     50  0801					      txa
     51  0801					      pha
     52  0801					      ENDM
     53  0801
     54  0801					      MAC	popax
     55  0801					      pla
     56  0801					      tax
     57  0801					      pla
     58  0801					      ENDM
     59  0801
     60  0801					      MAC	blt
     61  0801					      bcc	{1}
     62  0801					      ENDM
     63  0801
     64  0801					      MAC	bge
     65  0801					      bcs	{1}
     66  0801					      ENDM
     67  0801
------- FILE duel-main.asm
------- FILE duel-macros.asm LEVEL 2 PASS 2
      0  0801					      include	"duel-macros.asm"
      1  0801
      2  0801							; ==============================================================
      3  0801							; Additional macros by LB
      4  0801							; ==============================================================
      5  0801
      6  0801
      7  0801							; ==============================================================
      8  0801							; Macro to position the cursor
      9  0801							; ==============================================================
     10  0801
     11  0801					      MAC	plot
     12  0801					      ldy	#{1}
     13  0801					      ldx	#{2}
     14  0801					      clc
     15  0801					      jsr	$E50A	; PLOT
     16  0801					      ENDM
     17  0801
     18  0801							; ==============================================================
     19  0801							; Macro to print a string
     20  0801							; ==============================================================
     21  0801
     22  0801					      MAC	printstring
     23  0801					      ldy	#>{0}
     24  0801					      lda	#<{0}
     25  0801					      jsr	$ab1e	; STROUT
     26  0801					      ENDM
     27  0801
     28  0801							; ==============================================================
     29  0801							; Macro to print a byte
     30  0801							; ==============================================================
     31  0801
     32  0801					      MAC	printbyte
     33  0801					      ldx	#$00
     34  0801					      ldy	#$0a
     35  0801					      lda	{0}
     36  0801					      jsr	printnum
     37  0801					      ENDM
     38  0801
     39  0801							; ==============================================================
     40  0801							; Macro to print a word
     41  0801							; ==============================================================
     42  0801
     43  0801					      MAC	printword
     44  0801					      lda	#<{0}
     45  0801					      ldx	#>{0}
     46  0801					      ldy	#$0a
     47  0801					      jsr	printnum
     48  0801					      ENDM
     49  0801
     50  0801							; ==============================================================
     51  0801							; Macro to print an IP address
     52  0801							; ==============================================================
     53  0801					      MAC	print_ip
     54  0801					      ldx	#>({0})
     55  0801					      lda	#<({0})
     56  0801					      jsr	printip
     57  0801					      PRINT	CRLF
     58  0801					      ENDM
------- FILE duel-main.asm
     21  0801
     22  0801				   BASIC		;6 sys 2064
     23  0801		       0c 08 06 00*	      dc.b	$0c,$08,$06,$00,$9e,$20,$32,$30
     24  0809		       36 34 00 00*	      dc.b	$36,$34,$00,$00,$00,$00,$00
     25  0810
     26  0810				   START
     27  0810		       20 fa 46 	      jsr	initTOD
     28  0813		       20 5b 2a 	      jsr	STARTUPSCREEN
     29  0816
     30  0816							; Determine order - in future, random
      0  0816					      PRINT	CRLF, CG_GR3
      1  0816		       20 f8 47 	      jsr	prns
      2  0819		       0d 9b 00 	      dc.b	CRLF, CG_GR3,0
      0  081c					      PRINT	"PRESS ",CG_WHT,"1",CG_GR3," TO CONNECT TO A SERVER", CRLF
      1  081c		       20 f8 47 	      jsr	prns
      2  081f		       50 52 45 53*	      dc.b	"PRESS ",CG_WHT,"1",CG_GR3," TO CONNECT TO A SERVER", CRLF,0
      0  0841					      PRINT	"PRESS ",CG_WHT,"2",CG_GR3," TO SET UP A SERVER", CRLF,CRLF
      1  0841		       20 f8 47 	      jsr	prns
      2  0844		       50 52 45 53*	      dc.b	"PRESS ",CG_WHT,"2",CG_GR3," TO SET UP A SERVER", CRLF,CRLF,0
     34  0863
     35  0863		       a9 00		      lda	#$00
     36  0865		       8d 16 32 	      sta	ANNOUNCE_RECEIVED
     37  0868
     38  0868				   GETPLAYERNUM
     39  0868		       20 e4 ff 	      jsr	$FFE4	;GETIN - key in A
     40  086b		       c9 00		      cmp	#$00
     41  086d		       f0 f9		      beq	GETPLAYERNUM
     42  086f
     43  086f							; Check for 1 or 2 and set my turn
     44  086f		       c9 31		      cmp	#$31	;1
     45  0871		       d0 12		      bne	P2
     46  0873
     47  0873							; Set up Player 1 -------------------------
     48  0873		       a2 01		      ldx	#$01
     49  0875		       8e 8a 2e 	      stx	MYTURN
     50  0878
     51  0878		       a2 01		      ldx	#$01
     52  087a		       8e 5a 2a 	      stx	MYPLAYERNUM
     53  087d
     54  087d		       a2 02		      ldx	#$02
     55  087f		       8e 59 2a 	      stx	OPP_PLAYERNUM
     56  0882
     57  0882		       4c 9b 08 	      jmp	GETOPPONENTIP
     58  0885
     59  0885				   P2
     60  0885		       c9 32		      cmp	#$32
     61  0887		       d0 df		      bne	GETPLAYERNUM
     62  0889
     63  0889							; Set up Player 2 -------------------------
     64  0889		       a2 00		      ldx	#$00
     65  088b		       8e 8a 2e 	      stx	MYTURN
     66  088e
     67  088e		       a2 02		      ldx	#$02
     68  0890		       8e 5a 2a 	      stx	MYPLAYERNUM
     69  0893
     70  0893		       a2 01		      ldx	#$01
     71  0895		       8e 59 2a 	      stx	OPP_PLAYERNUM
     72  0898		       4c c4 08 	      jmp	NETSETUP	; Don't prompt for opponent address
     73  089b
     74  089b				   GETOPPONENTIP
     75  089b							; Ask for opponent's IP address.
      0  089b					      PRINT	CG_BLU,"OPPONENT IP ADDRESS? ",CG_YEL
      1  089b		       20 f8 47 	      jsr	prns
      2  089e		       1f 4f 50 50*	      dc.b	CG_BLU,"OPPONENT IP ADDRESS? ",CG_YEL,0
     77  08b6		       20 5b 34 	      jsr	getip
     78  08b9		       ad 74 34 	      lda	IP_OK
     79  08bc		       f0 dd		      beq	GETOPPONENTIP	;Zero if IP was invalid
      0  08be					      PRINT	CRLF,CRLF
      1  08be		       20 f8 47 	      jsr	prns
      2  08c1		       0d 0d 00 	      dc.b	CRLF,CRLF,0
     81  08c4
     82  08c4				   NETSETUP
     83  08c4		       a9 70		      lda	#<gotip
     84  08c6		       a2 34		      ldx	#>gotip
     85  08c8		       20 00 69 	      jsr	UDP_SET_DEST_IP
     86  08cb
     87  08cb		       20 ec 44 	      jsr	SOUND_SETUP
     88  08ce
     89  08ce							; Network Setup
     90  08ce		       20 35 46 	      jsr	net_init
     91  08d1		       90 18		      bcc	CARD_OK
      0  08d3					      PRINT	CRLF,CG_WHT,"NO CARD FOUND!",CRLF
      1  08d3		       20 f8 47 	      jsr	prns
      2  08d6		       0d 05 4e 4f*	      dc.b	CRLF,CG_WHT,"NO CARD FOUND!",CRLF,0
     93  08e8		       4c 8c 0a 	      jmp	nomac
     94  08eb
     95  08eb				   CARD_OK
     96  08eb		       20 08 47 	      jsr	irq_init
     97  08ee
     98  08ee							; Ports are hardcoded
     99  08ee							; Source Port
    100  08ee		       a9 b9		      lda	#<3001
    101  08f0		       a2 0b		      ldx	#>3001
    102  08f2		       20 f2 68 	      jsr	UDP_SET_SRC_PORT
    103  08f5
    104  08f5							; Destination Port - same as the one we listen on
    105  08f5		       a9 b8		      lda	#<USER_DEST_PORT
    106  08f7		       a2 0b		      ldx	#>USER_DEST_PORT
    107  08f9		       20 f9 68 	      jsr	UDP_SET_DEST_PORT
    108  08fc
    109  08fc							;Figure out order
    110  08fc		       ad 5a 2a 	      lda	MYPLAYERNUM
    111  08ff		       c9 01		      cmp	#$01
    112  0901		       d0 03		      bne	PLAYER2SEND
    113  0903		       4c 90 09 	      jmp	PLAYER1SEND
    114  0906
    115  0906							; ---------------------------------------------------------------
    116  0906							; Player 2 must first "listen" for Player 1
    117  0906				   PLAYER2SEND
      0  0906					      PRINT	CRLF,CG_LBL,"LISTENING FOR ANNOUNCE PACKETS ON       UDP PORT "
      1  0906		       20 f8 47 	      jsr	prns
      2  0909		       0d 9a 4c 49*	      dc.b	CRLF,CG_LBL,"LISTENING FOR ANNOUNCE PACKETS ON       UDP PORT ",0
      0  093d					      PRINTWORD	USER_DEST_PORT
      1  093d		       a9 b8		      lda	#<USER_DEST_PORT
      2  093f		       a2 0b		      ldx	#>USER_DEST_PORT
      3  0941		       a0 0a		      ldy	#$0a
      4  0943		       20 ff 49 	      jsr	printnum
      0  0946					      PRINT	CRLF
      1  0946		       20 f8 47 	      jsr	prns
      2  0949		       0d 00		      dc.b	CRLF,0
    121  094b		       20 0a 0a 	      jsr	WAITFORANNOUNCE
    122  094e
    123  094e							;Copy IP address from the incoming packet
      0  094e					      PRINT	CG_WHT,"OPPONENT IP:", CG_YEL
      1  094e		       20 f8 47 	      jsr	prns
      2  0951		       05 4f 50 50*	      dc.b	CG_WHT,"OPPONENT IP:", CG_YEL,0
      0  0960					      PRINT_IP	INPACKET+$1A
      1  0960		       a2 74		      ldx	#>(INPACKET+$1A)
      2  0962		       a9 50		      lda	#<(INPACKET+$1A)
      3  0964		       20 d1 49 	      jsr	printip
      0  0967					      PRINT	CRLF
      1  0967		       20 f8 47 	      jsr	prns
      2  096a		       0d 00		      dc.b	CRLF,0
    126  096c		       a9 50		      lda	#<(INPACKET+$1A)
    127  096e		       a2 74		      ldx	#>(INPACKET+$1A)
    128  0970		       20 00 69 	      jsr	UDP_SET_DEST_IP
    129  0973
    130  0973		       20 3e 0a 	      jsr	GATEWAYMAC	; Get gateway MAC once we know opponent's IP, if needed
    131  0976
    132  0976							;Now send our info, after a 1-second delay
      0  0976					      PRINT	CG_LBL,"REPLYING...",CRLF
      1  0976		       20 f8 47 	      jsr	prns
      2  0979		       9a 52 45 50*	      dc.b	CG_LBL,"REPLYING...",CRLF,0
    134  0987		       20 19 33 	      jsr	ONESECOND
    135  098a		       20 fe 2f 	      jsr	SENDANNOUNCE	; Blocks until ACK received
    136  098d
    137  098d		       4c 06 2c 	      jmp	MAINLOOP	; And on to the main game!
    138  0990
    139  0990							; ---------------------------------------------------------------
    140  0990							; Player 1 sends to Player 2 first
    141  0990				   PLAYER1SEND
    142  0990		       20 3e 0a 	      jsr	GATEWAYMAC	; Get gateway MAC first, if needed
    143  0993
    144  0993							; Send the announce packet(s) to opponent, and wait for response.
      0  0993					      PRINT	CRLF,CG_LBL,"SENDING ANNOUNCE PACKETS TO	      UDP PORT "
      1  0993		       20 f8 47 	      jsr	prns
      2  0996		       0d 9a 53 45*	      dc.b	CRLF,CG_LBL,"SENDING ANNOUNCE PACKETS TO	      UDP PORT ",0
      0  09ca					      PRINTWORD	USER_DEST_PORT
      1  09ca		       a9 b8		      lda	#<USER_DEST_PORT
      2  09cc		       a2 0b		      ldx	#>USER_DEST_PORT
      3  09ce		       a0 0a		      ldy	#$0a
      4  09d0		       20 ff 49 	      jsr	printnum
      0  09d3					      PRINT	" ON "
      1  09d3		       20 f8 47 	      jsr	prns
      2  09d6		       20 4f 4e 20*	      dc.b	" ON ",0
      0  09db					      PRINT_IP	UDP_DEST_IP
      1  09db		       a2 68		      ldx	#>(UDP_DEST_IP)
      2  09dd		       a9 66		      lda	#<(UDP_DEST_IP)
      3  09df		       20 d1 49 	      jsr	printip
      0  09e2					      PRINT	CRLF
      1  09e2		       20 f8 47 	      jsr	prns
      2  09e5		       0d 00		      dc.b	CRLF,0
    149  09e7		       20 fe 2f 	      jsr	SENDANNOUNCE	; Blocks until ACK received
    150  09ea
      0  09ea					      PRINT	CG_LBL,"WAITING FOR REPLY",CRLF
      1  09ea		       20 f8 47 	      jsr	prns
      2  09ed		       9a 57 41 49*	      dc.b	CG_LBL,"WAITING FOR REPLY",CRLF,0
    152  0a01		       20 19 33 	      jsr	ONESECOND
    153  0a04		       20 0a 0a 	      jsr	WAITFORANNOUNCE
    154  0a07
    155  0a07		       4c 06 2c 	      jmp	MAINLOOP	; And on to the main game!
    156  0a0a
    157  0a0a							; --------------------------------------------------------------
    158  0a0a				   WAITFORANNOUNCE		; Always clear and wait
    159  0a0a		       a9 00		      lda	#$00
    160  0a0c		       8d 14 32 	      sta	PACKET_RECEIVED
    161  0a0f
    162  0a0f				   WAITFORANNOUNCE1
    163  0a0f		       ad 16 32 	      lda	ANNOUNCE_RECEIVED	; Set by irq
    164  0a12		       f0 fb		      beq	WAITFORANNOUNCE1
    165  0a14
    166  0a14							;Clear flags
    167  0a14		       a9 00		      lda	#$00
    168  0a16		       8d 16 32 	      sta	ANNOUNCE_RECEIVED
    169  0a19		       8d 14 32 	      sta	PACKET_RECEIVED
    170  0a1c
    171  0a1c							;Opponent name was already copied in the IRQ
      0  0a1c					      PRINT	CRLF,CG_WHT,"OPPONENT NAME:",CG_YEL
      1  0a1c		       20 f8 47 	      jsr	prns
      2  0a1f		       0d 05 4f 50*	      dc.b	CRLF,CG_WHT,"OPPONENT NAME:",CG_YEL,0
      0  0a31					      PRINTSTRING	OPP_NAME
      1  0a31		       a0 2a		      ldy	#>OPP_NAME
      2  0a33		       a9 40		      lda	#<OPP_NAME
      3  0a35		       20 1e ab 	      jsr	$ab1e
      0  0a38					      PRINT	CRLF
      1  0a38		       20 f8 47 	      jsr	prns
      2  0a3b		       0d 00		      dc.b	CRLF,0
    175  0a3d
    176  0a3d							; Grab their player#
    177  0a3d							;lda INPACKET+$2C
    178  0a3d							;sta OPP_PLAYERNUM
    179  0a3d		       60		      rts
    180  0a3e
    181  0a3e							; =======================================
    182  0a3e							; Get Gateway MAC address
    183  0a3e							; =======================================
    184  0a3e
    185  0a3e							;Only get gateway MAC if the opponent's not on the local subnet
    186  0a3e				   GATEWAYMAC
    187  0a3e		       a9 66		      lda	#<UDP_DEST_IP
    188  0a40		       a2 68		      ldx	#>UDP_DEST_IP
    189  0a42		       20 95 4b 	      jsr	IPMASK
    190  0a45		       90 50		      bcc	MAC_SKIP
    191  0a47
      0  0a47					      PRINT	CG_LBL,CRLF,"RESOLVING GATEWAY MAC..."
      1  0a47		       20 f8 47 	      jsr	prns
      2  0a4a		       9a 0d 52 45*	      dc.b	CG_LBL,CRLF,"RESOLVING GATEWAY MAC...",0
    193  0a65		       20 e0 46 	      jsr	get_macs
    194  0a68		       90 25		      bcc	MAC_OK
    195  0a6a
    196  0a6a							;Flag errors
      0  0a6a					      PRINT	CRLF,CG_WHT,"ERROR RESOLVING THE GW MAC!",CRLF
      1  0a6a		       20 f8 47 	      jsr	prns
      2  0a6d		       0d 05 45 52*	      dc.b	CRLF,CG_WHT,"ERROR RESOLVING THE GW MAC!",CRLF,0
    198  0a8c
    199  0a8c		       4c 8c 0a    nomac      jmp	nomac
    200  0a8f
    201  0a8f				   MAC_OK
      0  0a8f					      PRINT	CG_LBL, "OK",CRLF
      1  0a8f		       20 f8 47 	      jsr	prns
      2  0a92		       9a 4f 4b 0d*	      dc.b	CG_LBL, "OK",CRLF,0
    203  0a97				   MAC_SKIP
    204  0a97		       60		      rts
    205  0a98
    206  0a98							; This part ends around $0a45 - so there are a few hundred wasted bytes here.
    207  0a98
    208  0a98							; =================================================================
    209  0a98							; Binary Includes
    210  0a98							; =================================================================
    211  0a98							;Include music here
    212  0ffe					      org	$0ffe	; $1000-2, because of the load address
    213  0ffe					      incbin	"eve_of_war.dat"
    214  1fd1
    215  1fd1							;Include charset here
    216  1ffe					      org	$1ffe	; $2000-2, because of the load address
    217  1ffe					      incbin	"duel2.font"
    218  2800
    219  2800							;Include the explosion sprites here - these are from WizardNJ!  No load address
    220  2800					      org	$2800	; Sprite block 160 or $A0
    221  2800					      incbin	"duel-explosions.spr"
    222  2a40
    223  2a40							; =================================================================
    224  2a40							; Game Info
    225  2a40							; =================================================================
    226  2a40
    227  2a40				   OPP_NAME
    228  2a40		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; 8 chars max
    229  2a48		       00		      dc.b	$00	; Guarantee name is zero-terminated
    230  2a49
    231  2a49		       00 00 00 00*	      ds.b	$10	; Big buffer on player name !!!!  Get rid of this later
    232  2a59
    233  2a59				   OPP_PLAYERNUM
    234  2a59		       ff		      dc.b	$FF	; Overwritten
    235  2a5a
    236  2a5a				   MYPLAYERNUM
    237  2a5a		       ff		      dc.b	$FF	; Overwritten
    238  2a5b
    239  2a5b							; ----------------------------------------------------------------
    240  2a5b							; Startup Screen
    241  2a5b							; ----------------------------------------------------------------
    242  2a5b				   STARTUPSCREEN
    243  2a5b
    244  2a5b							; Black scary screen with red border
    245  2a5b		       a9 00		      lda	#$00
    246  2a5d		       8d 21 d0 	      sta	$d021
    247  2a60		       a9 02		      lda	#$02
    248  2a62		       8d 20 d0 	      sta	$d020
    249  2a65
    250  2a65							;Set up the font
    251  2a65		       a9 19		      lda	#$19
    252  2a67		       8d 18 d0 	      sta	$d018
      0  2a6a					      PRINT	CG_DCS	;Inhibit Shift/C=
      1  2a6a		       20 f8 47 	      jsr	prns
      2  2a6d		       08 00		      dc.b	CG_DCS,0
    254  2a6f
    255  2a6f							; Title
      0  2a6f					      PRINT	CG_CLR,CG_LBL,"ARTILLERY DUEL ", CG_RED, "NETWORK ", CG_LBL, "1.0",CRLF,CRLF
      1  2a6f		       20 f8 47 	      jsr	prns
      2  2a72		       93 9a 41 52*	      dc.b	CG_CLR,CG_LBL,"ARTILLERY DUEL ", CG_RED, "NETWORK ", CG_LBL, "1.0",CRLF,CRLF,0
    257  2a93
    258  2a93							; PAL/NTSC
    259  2a93		       20 7f 33 	      jsr	SETUP_PAL
    260  2a96
      0  2a96					      PLOT	0,1
      1  2a96		       a0 00		      ldy	#0
      2  2a98		       a2 01		      ldx	#1
      3  2a9a		       18		      clc
      4  2a9b		       20 0a e5 	      jsr	$E50A
    262  2a9e
    263  2a9e							;Load and display config
    264  2a9e		       20 62 2b 	      jsr	LOADCONFIG
    265  2aa1
      0  2aa1					      PRINT	CRLF,CG_BLU, "WELCOME ", CG_YEL
      1  2aa1		       20 f8 47 	      jsr	prns
      2  2aa4		       0d 1f 57 45*	      dc.b	CRLF,CG_BLU, "WELCOME ", CG_YEL,0
      0  2ab0					      PRINTSTRING	MY_NAME
      1  2ab0		       a0 2f		      ldy	#>MY_NAME
      2  2ab2		       a9 f4		      lda	#<MY_NAME
      3  2ab4		       20 1e ab 	      jsr	$ab1e
    268  2ab7
      0  2ab7					      PRINT	CG_BLU, "!", CRLF,CRLF,"MY ADDRESS IS ", CG_YEL
      1  2ab7		       20 f8 47 	      jsr	prns
      2  2aba		       1f 21 0d 0d*	      dc.b	CG_BLU, "!", CRLF,CRLF,"MY ADDRESS IS ", CG_YEL,0
      0  2ace					      PRINT_IP	CARD_IP
      1  2ace		       a2 4f		      ldx	#>(CARD_IP)
      2  2ad0		       a9 2b		      lda	#<(CARD_IP)
      3  2ad2		       20 d1 49 	      jsr	printip
      0  2ad5					      PRINT	CRLF
      1  2ad5		       20 f8 47 	      jsr	prns
      2  2ad8		       0d 00		      dc.b	CRLF,0
    271  2ada
      0  2ada					      PRINT	CG_BLU, "MY NETMASK IS ", CG_YEL
      1  2ada		       20 f8 47 	      jsr	prns
      2  2add		       1f 4d 59 20*	      dc.b	CG_BLU, "MY NETMASK IS ", CG_YEL,0
      0  2aee					      PRINT_IP	CARD_MASK
      1  2aee		       a2 4f		      ldx	#>(CARD_MASK)
      2  2af0		       a9 2f		      lda	#<(CARD_MASK)
      3  2af2		       20 d1 49 	      jsr	printip
      0  2af5					      PRINT	CRLF
      1  2af5		       20 f8 47 	      jsr	prns
      2  2af8		       0d 00		      dc.b	CRLF,0
    274  2afa
      0  2afa					      PRINT	CG_BLU, "MY GATEWAY IS ", CG_YEL
      1  2afa		       20 f8 47 	      jsr	prns
      2  2afd		       1f 4d 59 20*	      dc.b	CG_BLU, "MY GATEWAY IS ", CG_YEL,0
      0  2b0e					      PRINT_IP	CARD_GATE
      1  2b0e		       a2 4f		      ldx	#>(CARD_GATE)
      2  2b10		       a9 33		      lda	#<(CARD_GATE)
      3  2b12		       20 d1 49 	      jsr	printip
      0  2b15					      PRINT	CRLF
      1  2b15		       20 f8 47 	      jsr	prns
      2  2b18		       0d 00		      dc.b	CRLF,0
    277  2b1a
    278  2b1a							;Cue Music
    279  2b1a		       20 00 10 	      jsr	$1000
    280  2b1d
    281  2b1d		       78		      sei
    282  2b1e		       a9 01		      lda	#$01
    283  2b20		       8d 19 d0 	      sta	$d019
    284  2b23		       8d 1a d0 	      sta	$d01a
    285  2b26		       a9 1b		      lda	#$1b
    286  2b28		       8d 11 d0 	      sta	$d011
    287  2b2b		       a9 7f		      lda	#$7f
    288  2b2d		       8d 0d dc 	      sta	$dc0d
    289  2b30		       a9 31		      lda	#$31
    290  2b32		       8d 12 d0 	      sta	$d012
    291  2b35		       a9 42		      lda	#<MUSIC
    292  2b37		       8d 14 03 	      sta	$0314
    293  2b3a		       a9 2b		      lda	#>MUSIC
    294  2b3c		       8d 15 03 	      sta	$0315
    295  2b3f		       58		      cli
    296  2b40		       60		      rts
    297  2b41
    298  2b41							;---------------------------------------------------------------
    299  2b41
    300  2b41				   NTSCCOUNT
    301  2b41		       07		      .byte.b	$07
    302  2b42
    303  2b42				   MUSIC
    304  2b42		       ee 19 d0 	      inc	$d019
    305  2b45		       a9 31		      lda	#$31
    306  2b47		       8d 12 d0 	      sta	$d012
    307  2b4a
    308  2b4a							;Using a PAL tune.  Skip every 6th frame if NTSC
    309  2b4a		       ad a6 02 	      lda	$2A6
    310  2b4d		       d0 0d		      bne	MUSICPLAY
    311  2b4f
    312  2b4f		       ce 41 2b 	      dec	NTSCCOUNT
    313  2b52		       d0 08		      bne	MUSICPLAY
    314  2b54		       a9 07		      lda	#$07
    315  2b56		       8d 41 2b 	      sta	NTSCCOUNT
    316  2b59		       4c 5f 2b 	      jmp	MUSIC_x
    317  2b5c				   MUSICPLAY
    318  2b5c		       20 03 10 	      jsr	$1003
    319  2b5f				   MUSIC_x
    320  2b5f		       4c 31 ea 	      jmp	$ea31
    321  2b62
    322  2b62
    323  2b62							; ----------------------------------------------------------------
    324  2b62				   LOADCONFIG
    325  2b62
    326  2b62							; Todo, set up default, so if file isn't read we can still use default
    327  2b62
      0  2b62					      PRINT	CRLF,CG_BLU,"LOADING CONFIGURATION...",CRLF
      1  2b62		       20 f8 47 	      jsr	prns
      2  2b65		       0d 1f 4c 4f*	      dc.b	CRLF,CG_BLU,"LOADING CONFIGURATION...",CRLF,0
    329  2b81
    330  2b81							;Check that device# isn't 0  (This is seen with Final Replay)
    331  2b81		       a5 ba		      lda	$BA
    332  2b83		       d0 04		      bne	LOADOK
    333  2b85
    334  2b85							;Since it was, set it to 8
    335  2b85		       a9 08		      lda	#$08
    336  2b87		       85 ba		      sta	$BA
    337  2b89
    338  2b89				   LOADOK
    339  2b89		       20 04 2f 	      jsr	LOADFILE
    340  2b8c
    341  2b8c							;MAC Address
    342  2b8c		       ad 08 c0 	      lda	$c008+0
    343  2b8f		       8d 25 4f 	      sta	CARD_MAC+0
    344  2b92		       ad 09 c0 	      lda	$c008+1
    345  2b95		       8d 26 4f 	      sta	CARD_MAC+1
    346  2b98		       ad 0a c0 	      lda	$c008+2
    347  2b9b		       8d 27 4f 	      sta	CARD_MAC+2
    348  2b9e		       ad 0b c0 	      lda	$c008+3
    349  2ba1		       8d 28 4f 	      sta	CARD_MAC+3
    350  2ba4		       ad 0c c0 	      lda	$c008+4
    351  2ba7		       8d 29 4f 	      sta	CARD_MAC+4
    352  2baa		       ad 0d c0 	      lda	$c008+5
    353  2bad		       8d 2a 4f 	      sta	CARD_MAC+5
    354  2bb0
    355  2bb0							; IP Address
    356  2bb0		       ad 10 c0 	      lda	$c010+0
    357  2bb3		       8d 2b 4f 	      sta	CARD_IP+0
    358  2bb6		       ad 11 c0 	      lda	$c010+1
    359  2bb9		       8d 2c 4f 	      sta	CARD_IP+1
    360  2bbc		       ad 12 c0 	      lda	$c010+2
    361  2bbf		       8d 2d 4f 	      sta	CARD_IP+2
    362  2bc2		       ad 13 c0 	      lda	$c010+3
    363  2bc5		       8d 2e 4f 	      sta	CARD_IP+3
    364  2bc8
    365  2bc8							;Netmask
    366  2bc8		       ad 16 c0 	      lda	$c016+0
    367  2bcb		       8d 2f 4f 	      sta	CARD_MASK+0
    368  2bce		       ad 17 c0 	      lda	$c016+1
    369  2bd1		       8d 30 4f 	      sta	CARD_MASK+1
    370  2bd4		       ad 18 c0 	      lda	$c016+2
    371  2bd7		       8d 31 4f 	      sta	CARD_MASK+2
    372  2bda		       ad 19 c0 	      lda	$c016+3
    373  2bdd		       8d 32 4f 	      sta	CARD_MASK+3
    374  2be0
    375  2be0							;Gateway
    376  2be0		       ad 1c c0 	      lda	$c01c+0
    377  2be3		       8d 33 4f 	      sta	CARD_GATE+0
    378  2be6		       ad 1d c0 	      lda	$c01c+1
    379  2be9		       8d 34 4f 	      sta	CARD_GATE+1
    380  2bec		       ad 1e c0 	      lda	$c01c+2
    381  2bef		       8d 35 4f 	      sta	CARD_GATE+2
    382  2bf2		       ad 1f c0 	      lda	$c01c+3
    383  2bf5		       8d 36 4f 	      sta	CARD_GATE+3
    384  2bf8
    385  2bf8							;Player Name
    386  2bf8		       a2 07		      ldx	#$07
    387  2bfa				   nameloop
    388  2bfa		       bd 28 c0 	      lda	$c028,x
    389  2bfd		       9d f4 2f 	      sta	MY_NAME,x
    390  2c00		       ca		      dex
    391  2c01		       e0 ff		      cpx	#$ff	; So the zeroth byte gets copied
    392  2c03		       d0 f5		      bne	nameloop
    393  2c05
    394  2c05		       60		      rts
    395  2c06
    396  2c06							; ----------------------------------------------------------------
    397  2c06							; Includes
    398  2c06							; ----------------------------------------------------------------
    399  2c06
------- FILE duel-game.asm LEVEL 2 PASS 2
      0  2c06					      include	"duel-game.asm"
      1  2c06							; duel-game.asm
      2  2c06							; Main Game!
      3  2c06
      4  2c06							; ==============================================================
      5  2c06							; Main Game Loop - broken into subroutines
      6  2c06							; ==============================================================
      7  2c06
      8  2c06							;------------------------------------------------------------------------------
      9  2c06				   MAINLOOP
     10  2c06							; Draw the game screen
      0  2c06					      PRINT	CG_UCS	; Switch back to upper/graphics
      1  2c06		       20 f8 47 	      jsr	prns
      2  2c09		       8e 00		      dc.b	CG_UCS,0
     12  2c0b		       20 2c 3a 	      jsr	DRAWORIGSCREEN
     13  2c0e		       20 6b 3a 	      jsr	SETUPSPRITES
     14  2c11		       20 ec 44 	      jsr	SOUND_SETUP
     15  2c14
     16  2c14		       a9 00		      lda	#$00
     17  2c16		       8d 20 d0 	      sta	$d020
     18  2c19
     19  2c19		       ae 5a 2a 	      ldx	MYPLAYERNUM
     20  2c1c		       bd 01 40 	      lda	PLAYERCOLORS,x
     21  2c1f		       8d 86 02 	      sta	$0286
      0  2c22					      PLOT	37,4
      1  2c22		       a0 25		      ldy	#37
      2  2c24		       a2 04		      ldx	#4
      3  2c26		       18		      clc
      4  2c27		       20 0a e5 	      jsr	$E50A
      0  2c2a					      PRINTBYTE	MYPLAYERNUM
      1  2c2a		       a2 00		      ldx	#$00
      2  2c2c		       a0 0a		      ldy	#$0a
      3  2c2e		       ad 5a 2a 	      lda	MYPLAYERNUM
      4  2c31		       20 ff 49 	      jsr	printnum
     24  2c34
     25  2c34							;Init game - set my health to 100 and show
     26  2c34		       a9 64		      lda	#100
     27  2c36		       8d 8d 2e 	      sta	MYHEALTH
      0  2c39					      PLOT	31,13
      1  2c39		       a0 1f		      ldy	#31
      2  2c3b		       a2 0d		      ldx	#13
      3  2c3d		       18		      clc
      4  2c3e		       20 0a e5 	      jsr	$E50A
      0  2c41					      PRINT	CG_WHT
      1  2c41		       20 f8 47 	      jsr	prns
      2  2c44		       05 00		      dc.b	CG_WHT,0
      0  2c46					      PRINTBYTE	MYHEALTH
      1  2c46		       a2 00		      ldx	#$00
      2  2c48		       a0 0a		      ldy	#$0a
      3  2c4a		       ad 8d 2e 	      lda	MYHEALTH
      4  2c4d		       20 ff 49 	      jsr	printnum
      0  2c50					      PRINT	"% "
      1  2c50		       20 f8 47 	      jsr	prns
      2  2c53		       25 20 00 	      dc.b	"% ",0
     32  2c56
     33  2c56							;Start of game loop
     34  2c56				   MAINLOOP1
     35  2c56
     36  2c56							;Reset health received flag here.  Avoids race condition later on.
     37  2c56		       a9 00		      lda	#$00
     38  2c58		       8d 17 32 	      sta	HEALTH_RECEIVED
     39  2c5b
     40  2c5b		       ad 8a 2e 	      lda	MYTURN
     41  2c5e
     42  2c5e							; Not my turn.
     43  2c5e		       f0 06		      beq	goTARGET
     44  2c60
     45  2c60							; My turn.
     46  2c60		       20 c8 2c 	      jsr	ATTACKER
     47  2c63		       4c 6c 2c 	      jmp	ENDOFTURN
     48  2c66
     49  2c66				   goTARGET		; In case the attacker code grows >255 byes, can't branch
     50  2c66		       20 57 2d 	      jsr	TARGET
     51  2c69		       4c 6c 2c 	      jmp	ENDOFTURN
     52  2c6c
     53  2c6c							; ==============================================================
     54  2c6c							; End of turn
     55  2c6c							; ==============================================================
     56  2c6c
     57  2c6c				   ENDOFTURN
     58  2c6c							; Exchange health packets - attacker goes first
     59  2c6c		       ad 8a 2e 	      lda	MYTURN
     60  2c6f		       f0 09		      beq	WAITHEALTH2	; Not my turn.
     61  2c71
     62  2c71							; My turn, Send first ----------------------------------------
     63  2c71				   SENDFIRST
     64  2c71		       20 6e 30 	      jsr	SENDHEALTH
     65  2c74
     66  2c74							; Wait for packet second.
     67  2c74		       20 78 2e 	      jsr	WAITHEALTH
     68  2c77
     69  2c77							; Done.
     70  2c77		       4c 83 2c 	      jmp	SHOWHEALTH
     71  2c7a
     72  2c7a							; Not my turn.  Wait first. ---------------------------------
     73  2c7a				   WAITHEALTH2
     74  2c7a		       20 78 2e 	      jsr	WAITHEALTH
     75  2c7d
     76  2c7d							;Send second.
     77  2c7d		       20 6e 30 	      jsr	SENDHEALTH
     78  2c80
     79  2c80							;Done.
     80  2c80		       4c 83 2c 	      jmp	SHOWHEALTH
     81  2c83
     82  2c83							; Display my health ---------------------------
     83  2c83				   SHOWHEALTH
      0  2c83					      PLOT	31,13
      1  2c83		       a0 1f		      ldy	#31
      2  2c85		       a2 0d		      ldx	#13
      3  2c87		       18		      clc
      4  2c88		       20 0a e5 	      jsr	$E50A
      0  2c8b					      PRINT	CG_WHT
      1  2c8b		       20 f8 47 	      jsr	prns
      2  2c8e		       05 00		      dc.b	CG_WHT,0
      0  2c90					      PRINTBYTE	MYHEALTH
      1  2c90		       a2 00		      ldx	#$00
      2  2c92		       a0 0a		      ldy	#$0a
      3  2c94		       ad 8d 2e 	      lda	MYHEALTH
      4  2c97		       20 ff 49 	      jsr	printnum
      0  2c9a					      PRINT	"%  "
      1  2c9a		       20 f8 47 	      jsr	prns
      2  2c9d		       25 20 20 00	      dc.b	"%  ",0
     88  2ca1
     89  2ca1				   CHECKME
     90  2ca1							;Check end of game for me
     91  2ca1		       ae 8d 2e 	      ldx	MYHEALTH
     92  2ca4		       ca		      dex		; So that health=0 means game over
     93  2ca5		       10 08		      bpl	CHECKOPP	; Result still positive, I'm OK
     94  2ca7
     95  2ca7							;Negative result - I'm dead!
     96  2ca7		       a9 00		      lda	#$00
     97  2ca9		       8d 1b 2e 	      sta	YOUWIN
     98  2cac		       4c 1c 2e 	      jmp	ENDOFGAME
     99  2caf
    100  2caf				   CHECKOPP
    101  2caf							;Check end of game for opponent
    102  2caf		       ae 8e 2e 	      ldx	OPPHEALTH
    103  2cb2		       ca		      dex		; So that health=0 means game over
    104  2cb3		       10 08		      bpl	TOGGLE	; Result still positive, Opponent is OK
    105  2cb5
    106  2cb5							;Negative result - Opponent is dead!
    107  2cb5		       a9 01		      lda	#$01
    108  2cb7		       8d 1b 2e 	      sta	YOUWIN
    109  2cba		       4c 1c 2e 	      jmp	ENDOFGAME
    110  2cbd
    111  2cbd				   TOGGLE
    112  2cbd							; Toggle whose turn it is and go back to start
    113  2cbd		       a9 01		      lda	#$01
    114  2cbf		       4d 8a 2e 	      eor	MYTURN
    115  2cc2		       8d 8a 2e 	      sta	MYTURN
    116  2cc5		       4c 56 2c 	      jmp	MAINLOOP1
    117  2cc8
    118  2cc8							; ==============================================================
    119  2cc8							; My turn
    120  2cc8							; ==============================================================
    121  2cc8
    122  2cc8				   ATTACKER
    123  2cc8		       20 aa 30 	      jsr	SENDWEATHER	; Calcs and sends cloud location+windspeed
    124  2ccb		       20 04 40 	      jsr	SHOWWEATHER	; Shows what was just sent
    125  2cce		       20 da 2d 	      jsr	SHOWSETTINGS	; Show my initial angle+power
    126  2cd1
    127  2cd1				   PROMPT
    128  2cd1		       ae 5a 2a 	      ldx	MYPLAYERNUM
    129  2cd4		       bd 01 40 	      lda	PLAYERCOLORS,x
    130  2cd7		       8d 86 02 	      sta	$0286
      0  2cda					      PLOT	31,16
      1  2cda		       a0 1f		      ldy	#31
      2  2cdc		       a2 10		      ldx	#16
      3  2cde		       18		      clc
      4  2cdf		       20 0a e5 	      jsr	$E50A
      0  2ce2					      PRINT	"YOUR	  "
      1  2ce2		       20 f8 47 	      jsr	prns
      2  2ce5		       59 4f 55 52*	      dc.b	"YOUR	  ",0
      0  2cee					      PLOT	31,17
      1  2cee		       a0 1f		      ldy	#31
      2  2cf0		       a2 11		      ldx	#17
      3  2cf2		       18		      clc
      4  2cf3		       20 0a e5 	      jsr	$E50A
      0  2cf6					      PRINT	"TURN	  "
      1  2cf6		       20 f8 47 	      jsr	prns
      2  2cf9		       54 55 52 4e*	      dc.b	"TURN	  ",0
      0  2d02					      PLOT	31,18
      1  2d02		       a0 1f		      ldy	#31
      2  2d04		       a2 12		      ldx	#18
      3  2d06		       18		      clc
      4  2d07		       20 0a e5 	      jsr	$E50A
      0  2d0a					      PRINT	"	  "
      1  2d0a		       20 f8 47 	      jsr	prns
      2  2d0d		       20 20 20 20*	      dc.b	"	  ",0
    137  2d16
    138  2d16				   PLAYERINPUT		;----------------------------
    139  2d16		       a9 01		      lda	#$01
    140  2d18		       8d cc 45 	      sta	JOYOK	; Allow joystick input
    141  2d1b
    142  2d1b							; Check keys
    143  2d1b		       20 e4 ff 	      jsr	$ffe4
    144  2d1e		       c9 00		      cmp	#$00
    145  2d20		       f0 0a		      beq	CHECKJOY
    146  2d22
    147  2d22				   KEYS
    148  2d22		       c9 88		      cmp	#$88	;F7, chat
    149  2d24		       d0 06		      bne	CHECKJOY
    150  2d26		       20 ac 35 	      jsr	CHATINPUT
    151  2d29		       4c 16 2d 	      jmp	PLAYERINPUT
    152  2d2c
    153  2d2c							; Joystick is read and processed by the interrupt.
    154  2d2c				   CHECKJOY
    155  2d2c		       ad ce 45 	      lda	JOYBUTTON
    156  2d2f		       d0 05		      bne	DOFIRE
    157  2d31		       20 da 2d 	      jsr	SHOWSETTINGS
    158  2d34		       f0 e0		      beq	PLAYERINPUT	; zero means no fire, keep looking for input
    159  2d36
    160  2d36				   DOFIRE
    161  2d36		       a9 00		      lda	#$00
    162  2d38		       8d cc 45 	      sta	JOYOK	; Turn off joystick input
    163  2d3b		       8d ce 45 	      sta	JOYBUTTON	; Clear the flag that joystick button has been pressed
    164  2d3e
    165  2d3e							;Preserve angle
    166  2d3e		       ad 8b 2e 	      lda	MYANGLE
    167  2d41		       8d b0 40 	      sta	WEAPONANGLE
    168  2d44		       8d 36 30 	      sta	WEAPONPACKET+2
    169  2d47
    170  2d47							; Preserve Power
    171  2d47		       ad 8c 2e 	      lda	MYPOWER
    172  2d4a		       8d b1 40 	      sta	WEAPONPOWER
    173  2d4d		       8d 37 30 	      sta	WEAPONPACKET+3
    174  2d50
    175  2d50							; Ready to fire!  Send the packet.  Blocks until ACK received.
    176  2d50		       20 39 30 	      jsr	SENDWEAPON
    177  2d53
    178  2d53							; And animate the weapon in sync (more or less) with the opponent.
    179  2d53		       20 51 40 	      jsr	SHOWBULLET
    180  2d56		       60		      rts
    181  2d57
    182  2d57							; ========================================================================
    183  2d57							; Not my turn.  Wait for opponent to send us a packet.
    184  2d57							; ========================================================================
    185  2d57
    186  2d57				   TARGET
    187  2d57							; Update screen
    188  2d57		       20 da 2d 	      jsr	SHOWSETTINGS
    189  2d5a
    190  2d5a		       ae 59 2a 	      ldx	OPP_PLAYERNUM
    191  2d5d		       bd 01 40 	      lda	PLAYERCOLORS,x
    192  2d60		       8d 86 02 	      sta	$0286
      0  2d63					      PLOT	31,16
      1  2d63		       a0 1f		      ldy	#31
      2  2d65		       a2 10		      ldx	#16
      3  2d67		       18		      clc
      4  2d68		       20 0a e5 	      jsr	$E50A
      0  2d6b					      PRINT	"WAITING "
      1  2d6b		       20 f8 47 	      jsr	prns
      2  2d6e		       57 41 49 54*	      dc.b	"WAITING ",0
      0  2d77					      PLOT	31,17
      1  2d77		       a0 1f		      ldy	#31
      2  2d79		       a2 11		      ldx	#17
      3  2d7b		       18		      clc
      4  2d7c		       20 0a e5 	      jsr	$E50A
      0  2d7f					      PRINT	"FOR	  "
      1  2d7f		       20 f8 47 	      jsr	prns
      2  2d82		       46 4f 52 20*	      dc.b	"FOR	  ",0
      0  2d8b					      PLOT	31,18
      1  2d8b		       a0 1f		      ldy	#31
      2  2d8d		       a2 12		      ldx	#18
      3  2d8f		       18		      clc
      4  2d90		       20 0a e5 	      jsr	$E50A
      0  2d93					      PRINTSTRING	OPP_NAME
      1  2d93		       a0 2a		      ldy	#>OPP_NAME
      2  2d95		       a9 40		      lda	#<OPP_NAME
      3  2d97		       20 1e ab 	      jsr	$ab1e
    199  2d9a
    200  2d9a				   WAITFORPACKET		; Always clear and wait
    201  2d9a		       a9 00		      lda	#$00
    202  2d9c		       8d 14 32 	      sta	PACKET_RECEIVED
    203  2d9f
    204  2d9f				   WAITFORPACKET1
    205  2d9f		       ad 14 32 	      lda	PACKET_RECEIVED	; Set by irq
    206  2da2		       d0 11		      bne	GOTPACKET	; not zero, so got packet
    207  2da4
    208  2da4							; Check keys
    209  2da4		       20 e4 ff 	      jsr	$ffe4
    210  2da7		       c9 00		      cmp	#$00
    211  2da9		       f0 f4		      beq	WAITFORPACKET1
    212  2dab
    213  2dab				   KEYS1
    214  2dab		       c9 88		      cmp	#$88	;F7, chat
    215  2dad		       d0 f0		      bne	WAITFORPACKET1
    216  2daf		       20 ac 35 	      jsr	CHATINPUT
    217  2db2		       4c 9a 2d 	      jmp	WAITFORPACKET
    218  2db5
    219  2db5							; Packet received!
    220  2db5							; Was already ACKed by the receive routine in the interrupt.
    221  2db5							; Assume packet# was checked too.
    222  2db5				   GOTPACKET
    223  2db5		       ad 13 32 	      lda	LAST_PACKET_TYPE
    224  2db8
    225  2db8				   CHECKFORWEAPON		; This ends the turn
    226  2db8		       c9 02		      cmp	#$02	;weapon
    227  2dba		       d0 10		      bne	CHECKFORCHAT
    228  2dbc		       ad 62 74 	      lda	INPACKET+$2C
    229  2dbf		       8d b0 40 	      sta	WEAPONANGLE
    230  2dc2		       ad 63 74 	      lda	INPACKET+$2D
    231  2dc5		       8d b1 40 	      sta	WEAPONPOWER
    232  2dc8		       20 51 40 	      jsr	SHOWBULLET
    233  2dcb		       60		      rts
    234  2dcc
    235  2dcc				   CHECKFORCHAT
    236  2dcc		       ad 15 32 	      lda	CHAT_RECEIVED
    237  2dcf		       f0 03		      beq	CHECK_x
    238  2dd1		       20 4c 35 	      jsr	SHOWCHATMSG
    239  2dd4
    240  2dd4							; All other packet types are ignored
    241  2dd4				   CHECK_x
    242  2dd4		       4c 9a 2d 	      jmp	WAITFORPACKET
    243  2dd7
    244  2dd7							; ==============================================================
    245  2dd7							; Weather animation - used by both sides - Fuzz's code here
    246  2dd7							; ==============================================================
    247  2dd7
    248  2dd7				   CLOUDLOC
    249  2dd7		       00		      dc.b	$00
    250  2dd8
    251  2dd8				   WINDSPEED
    252  2dd8		       00		      dc.b	$00
    253  2dd9
    254  2dd9				   WEATHERANIM
    255  2dd9		       60		      rts
    256  2dda
    257  2dda							; ==============================================================
    258  2dda							; Update Screen for Angle/Power
    259  2dda							; ==============================================================
    260  2dda
    261  2dda				   SHOWSETTINGS
      0  2dda					      PRINT	CG_WHT
      1  2dda		       20 f8 47 	      jsr	prns
      2  2ddd		       05 00		      dc.b	CG_WHT,0
    263  2ddf
      0  2ddf					      PLOT	31,7
      1  2ddf		       a0 1f		      ldy	#31
      2  2de1		       a2 07		      ldx	#7
      3  2de3		       18		      clc
      4  2de4		       20 0a e5 	      jsr	$E50A
      0  2de7					      PRINTBYTE	MYANGLE
      1  2de7		       a2 00		      ldx	#$00
      2  2de9		       a0 0a		      ldy	#$0a
      3  2deb		       ad 8b 2e 	      lda	MYANGLE
      4  2dee		       20 ff 49 	      jsr	printnum
      0  2df1					      PRINT	"'  "
      1  2df1		       20 f8 47 	      jsr	prns
      2  2df4		       27 20 20 00	      dc.b	"'  ",0
    267  2df8
      0  2df8					      PLOT	31,10
      1  2df8		       a0 1f		      ldy	#31
      2  2dfa		       a2 0a		      ldx	#10
      3  2dfc		       18		      clc
      4  2dfd		       20 0a e5 	      jsr	$E50A
      0  2e00					      PRINTBYTE	MYPOWER
      1  2e00		       a2 00		      ldx	#$00
      2  2e02		       a0 0a		      ldy	#$0a
      3  2e04		       ad 8c 2e 	      lda	MYPOWER
      4  2e07		       20 ff 49 	      jsr	printnum
      0  2e0a					      PRINT	"%  "
      1  2e0a		       20 f8 47 	      jsr	prns
      2  2e0d		       25 20 20 00	      dc.b	"%  ",0
    271  2e11
    272  2e11							;Check for incoming chat
    273  2e11		       ad 15 32 	      lda	CHAT_RECEIVED
    274  2e14		       f0 03		      beq	SHOWSETTINGS_x
    275  2e16		       20 4c 35 	      jsr	SHOWCHATMSG
    276  2e19
    277  2e19				   SHOWSETTINGS_x
    278  2e19		       60		      rts
    279  2e1a
    280  2e1a
    281  2e1a							; ==============================================================
    282  2e1a							; Game over!
    283  2e1a							; ==============================================================
    284  2e1a				   WINNER
    285  2e1a		       00		      .byte.b	#$00
    286  2e1b
    287  2e1b				   YOUWIN
    288  2e1b		       ff		      .byte.b	$FF
    289  2e1c
    290  2e1c				   ENDOFGAME
      0  2e1c					      PRINT	19, 5, "GAME OVER!",13
      1  2e1c		       20 f8 47 	      jsr	prns
      2  2e1f		       13 05 47 41*	      dc.b	19, 5, "GAME OVER!",13,0
    292  2e2d
    293  2e2d		       ad 1b 2e 	      lda	YOUWIN
    294  2e30		       f0 11		      beq	YOULOST
    295  2e32
      0  2e32					      PRINT	CG_GRN,"YOU WON!",13
      1  2e32		       20 f8 47 	      jsr	prns
      2  2e35		       1e 59 4f 55*	      dc.b	CG_GRN,"YOU WON!",13,0
    297  2e40		       4c 56 2e 	      jmp	PLAYAGAIN
    298  2e43
    299  2e43				   YOULOST
      0  2e43					      PRINT	CG_RED,"YOU LOST!!",13
      1  2e43		       20 f8 47 	      jsr	prns
      2  2e46		       1c 59 4f 55*	      dc.b	CG_RED,"YOU LOST!!",13,0
    301  2e53		       4c 56 2e 	      jmp	PLAYAGAIN
    302  2e56
    303  2e56				   PLAYAGAIN
      0  2e56					      PRINT	CG_YEL, "PLAY AGAIN (Y/N)"
      1  2e56		       20 f8 47 	      jsr	prns
      2  2e59		       9e 50 4c 41*	      dc.b	CG_YEL, "PLAY AGAIN (Y/N)",0
    305  2e6b		       20 38 4a 	      jsr	yn1
    306  2e6e
    307  2e6e		       c9 01		      cmp	#$01	; Y
    308  2e70		       f0 03		      beq	RESTART
    309  2e72
    310  2e72		       4c e2 fc 	      jmp	64738	; reboot!
    311  2e75
    312  2e75				   RESTART
    313  2e75		       4c 06 2c 	      jmp	MAINLOOP
    314  2e78
    315  2e78							;-------------------------------------------------------------------------
    316  2e78							;Wait for a health packet
    317  2e78
    318  2e78				   WAITHEALTH
    319  2e78		       a9 07		      lda	#$07	;Yellow.  LED is reset by receive routine in thread
    320  2e7a		       8d 95 db 	      sta	COMMSLED
    321  2e7d
    322  2e7d		       ad 17 32 	      lda	HEALTH_RECEIVED	; Set by irq
    323  2e80		       d0 07		      bne	WAITDONE
    324  2e82
    325  2e82		       ad 8d 02 	      lda	$028d
    326  2e85		       c9 04		      cmp	#$04	; CTRL Key
    327  2e87		       d0 ef		      bne	WAITHEALTH	; So LED stays yellow
    328  2e89
    329  2e89							;Done.
    330  2e89				   WAITDONE
    331  2e89		       60		      rts
    332  2e8a
    333  2e8a
    334  2e8a
    335  2e8a							; ==============================================================
    336  2e8a
    337  2e8a				   MYTURN
    338  2e8a		       ff		      dc.b	$FF	; Overwritten
    339  2e8b
    340  2e8b				   MYANGLE
    341  2e8b		       2d		      dc.b	45	; Default - decimal
    342  2e8c
    343  2e8c				   MYPOWER
    344  2e8c		       32		      dc.b	50	; Default - decimal
    345  2e8d
    346  2e8d				   MYHEALTH
    347  2e8d		       64		      dc.b	$64	; Default, 100
    348  2e8e
    349  2e8e				   OPPHEALTH
    350  2e8e		       ff		      dc.b	$FF	; Read from packet and overwritten here
------- FILE duel-main.asm
------- FILE leif-diskroutines.asm LEVEL 2 PASS 2
      0  2e8f					      include	"leif-diskroutines.asm"
      1  2e8f							;*
      2  2e8f							;* Disk routines.
      3  2e8f
      4  2e8f		       ff b7	   READST     EQU	$FFB7
      5  2e8f		       ff ba	   SETLFS     EQU	$FFBA
      6  2e8f		       ff bd	   SETNAM     EQU	$FFBD
      7  2e8f		       ff c0	   OPEN       EQU	$FFC0
      8  2e8f		       ff c3	   CLOSE      EQU	$FFC3
      9  2e8f		       ff c6	   CHKIN      EQU	$FFC6
     10  2e8f		       ff c9	   CHKOUT     EQU	$FFC9
     11  2e8f		       ff cc	   CLRCHN     EQU	$FFCC
     12  2e8f		       ff cf	   CHRIN      EQU	$FFCF
     13  2e8f		       ff d2	   CHROUT     EQU	$FFD2
     14  2e8f		       ff d5	   LOAD       EQU	$FFD5
     15  2e8f		       ff d8	   SAVE       EQU	$FFD8
     16  2e8f		       ff e1	   STOP       EQU	$FFE1
     17  2e8f		       ff e4	   GETIN      EQU	$FFE4
     18  2e8f		       ff e7	   CLALL      EQU	$FFE7
     19  2e8f
     20  2e8f		       00 69	   FAQ2       EQU	$69
     21  2e8f		       00 69	   ACC	      EQU	FAQ2
     22  2e8f		       00 6b	   AUX	      EQU	ACC+2
     23  2e8f		       00 6d	   EXT	      EQU	AUX+2
     24  2e8f		       00 cc	   BLNSW      EQU	$CC
     25  2e8f		       00 cf	   BLNON      EQU	$CF
     26  2e8f		       00 cd	   BLNCT      EQU	$CD
     27  2e8f
     28  2e8f
     29  2e8f							;--------------------------------------------------------------------------
     30  2e8f				   LOADADDR
     31  2e8f		       00 c0		      dc.b	$00,$C0	;Load target address
     32  2e91				   SAVESTRT
     33  2e91		       00 c0		      dc.b	$00,$C0	;Beginning of block to save
     34  2e93				   SAVEEND
     35  2e93		       31 c0		      dc.b	$31,$C0	;End of block to save
     36  2e95				   FILENAMEREPLACE
     37  2e95		       40 3a		      dc.b	"@:"
     38  2e97				   FILENAME
     39  2e97		       49 50 43 4f*	      dc.b	"IPCONFIG-DEFAULT",0
     40  2ea8		       00 00		      dc.b	0,0
     41  2eaa
     42  2eaa
     43  2eaa							;--------------------------------------------------------------------------
     44  2eaa							;*
     45  2eaa							;* SAVEFILE, whose purpose is awfully self-evident.
     46  2eaa							;*
     47  2eaa
     48  2eaa				   SAVEFILE
     49  2eaa		       a2 95		      LDX	#<FILENAMEREPLACE
     50  2eac		       a0 2e		      LDY	#>FILENAMEREPLACE
     51  2eae		       a9 12		      LDA	#$12	;Length - note two extra for @:
     52  2eb0		       20 bd ff 	      JSR	SETNAM
     53  2eb3
     54  2eb3		       a9 08		      LDA	#$08	;File no.
     55  2eb5		       a6 ba		      LDX	$BA	;Current device number
     56  2eb7		       a0 01		      LDY	#$01	;Secondary address
     57  2eb9		       20 ba ff 	      JSR	SETLFS
     58  2ebc
     59  2ebc							;Temporary values to save the starting address in zero-page
     60  2ebc		       ad 91 2e 	      LDA	SAVESTRT
     61  2ebf		       85 69		      STA	FAQ2
     62  2ec1
     63  2ec1		       ad 92 2e 	      LDA	SAVESTRT+1
     64  2ec4		       85 6a		      STA	FAQ2+1
     65  2ec6
     66  2ec6							;Save from (FAQ2) to SAVEEND
     67  2ec6		       ae 93 2e 	      LDX	SAVEEND
     68  2ec9		       ac 94 2e 	      LDY	SAVEEND+1
     69  2ecc		       a9 69		      LDA	#FAQ2	;Note #!
     70  2ece		       20 d8 ff 	      JSR	SAVE
     71  2ed1
     72  2ed1		       b0 05		      BCS	ERROR
     73  2ed3		       20 cc ff 	      JSR	CLRCHN
     74  2ed6		       18		      CLC
     75  2ed7		       60		      RTS
     76  2ed8
     77  2ed8							;--------------------------------------------------------------------------
     78  2ed8							; Common error handler
     79  2ed8							;
     80  2ed8		       20 e7 ff    ERROR      JSR	CLALL
     81  2edb		       20 cc ff 	      JSR	CLRCHN
     82  2ede		       a0 00		      LDY	#00
     83  2ee0		       b9 f0 2e    LOOP2      LDA	ERTEXT,Y
     84  2ee3		       f0 06		      BEQ	END
     85  2ee5		       20 d2 ff 	      JSR	CHROUT
     86  2ee8		       c8		      INY
     87  2ee9		       d0 f5		      BNE	LOOP2
     88  2eeb
     89  2eeb		       20 63 2f    END	      JSR	GETERR
     90  2eee		       38		      SEC
     91  2eef		       60		      RTS
     92  2ef0
     93  2ef0		       0d	   ERTEXT     dc.b	13
     94  2ef1		       2a 2a 2a 20*	      dc.b	"*** DISK ERROR ***", 0
     95  2f04
     96  2f04							;--------------------------------------------------------------------------
     97  2f04							;
     98  2f04							;* LOADFILE - remarkably similar to SAVEFILE - works!
     99  2f04							;*
    100  2f04				   LOADFILE
    101  2f04		       a2 97		      LDX	#<FILENAME
    102  2f06		       a0 2e		      LDY	#>FILENAME
    103  2f08		       a9 10		      LDA	#$10	; Length
    104  2f0a		       20 bd ff 	      JSR	SETNAM
    105  2f0d
    106  2f0d		       a9 08		      LDA	#$08	;File no.
    107  2f0f		       a6 ba		      LDX	$BA	;Current device number
    108  2f11		       a0 00		      LDY	#$00	;Secondary address
    109  2f13		       20 ba ff 	      JSR	SETLFS
    110  2f16
    111  2f16		       a9 00		      LDA	#$00	;Load, not verify
    112  2f18		       ae 8f 2e 	      LDX	LOADADDR
    113  2f1b		       ac 90 2e 	      LDY	LOADADDR+1
    114  2f1e		       20 d5 ff 	      JSR	LOAD
    115  2f21		       b0 b5		      BCS	ERROR
    116  2f23
    117  2f23		       20 cc ff 	      JSR	CLRCHN
    118  2f26		       18		      CLC
    119  2f27		       60		      RTS
    120  2f28
    121  2f28							;--------------------------------------------------------------------------
    122  2f28							;*
    123  2f28							;* SENDCMD sends a command to the current drive
    124  2f28							;*
    125  2f28				   SENDCMD
    126  2f28		       a9 0d		      LDA	#13
    127  2f2a		       20 d2 ff 	      JSR	CHROUT
    128  2f2d		       a9 00		      LDA	#$00	; '>'	 TODO
    129  2f2f		       20 d2 ff 	      JSR	CHROUT
    130  2f32		       a2 27		      LDX	#39
    131  2f34							;   JSR INPUT	 TODO
    132  2f34		       f0 22		      BEQ	ERRORC
    133  2f36
    134  2f36		       a9 0f		      LDA	#$0F
    135  2f38		       a6 ba		      LDX	$BA
    136  2f3a		       a0 0f		      LDY	#$0F
    137  2f3c		       20 ba ff 	      JSR	SETLFS
    138  2f3f		       a9 00		      LDA	#00
    139  2f41		       20 bd ff 	      JSR	SETNAM
    140  2f44		       20 c0 ff 	      JSR	OPEN
    141  2f47		       b0 0f		      BCS	ERRORC
    142  2f49		       a2 0f		      LDX	#$0F
    143  2f4b		       20 c9 ff 	      JSR	CHKOUT
    144  2f4e		       a0 00		      LDY	#00
    145  2f50				   LOOP 		; LDA STRBUF,Y     ; TODO
    146  2f50		       f0 06		      BEQ	ERRORC
    147  2f52		       20 d2 ff 	      JSR	CHROUT
    148  2f55		       c8		      INY
    149  2f56		       d0 f8		      BNE	LOOP
    150  2f58
    151  2f58		       20 cc ff    ERRORC     JSR	CLRCHN
    152  2f5b		       a9 0f		      LDA	#$0F
    153  2f5d		       20 c3 ff 	      JSR	CLOSE
    154  2f60		       4c cc ff 	      JMP	CLRCHN
    155  2f63
    156  2f63							;--------------------------------------------------------------------------
    157  2f63							;*
    158  2f63							;* GETERR prints the error message from the current disk drive.
    159  2f63							;*
    160  2f63				   GETERR
    161  2f63		       a9 0d		      LDA	#13
    162  2f65		       20 d2 ff 	      JSR	CHROUT
    163  2f68							;*
    164  2f68							;* This method is a bit faster on output to screen.
    165  2f68							;*
    166  2f68		       a9 0f		      LDA	#$0F
    167  2f6a		       a6 ba		      LDX	$BA
    168  2f6c		       a0 0f		      LDY	#$0F
    169  2f6e		       20 ba ff 	      JSR	SETLFS
    170  2f71		       a9 00		      LDA	#00
    171  2f73		       20 bd ff 	      JSR	SETNAM
    172  2f76		       20 c0 ff 	      JSR	OPEN
    173  2f79		       a2 0f		      LDX	#$0F
    174  2f7b		       20 c6 ff 	      JSR	CHKIN
    175  2f7e		       20 cf ff    LOOPy      JSR	CHRIN
    176  2f81		       c9 0d		      CMP	#$0D
    177  2f83		       f0 05		      BEQ	EXIT
    178  2f85		       20 d2 ff 	      JSR	CHROUT
    179  2f88		       d0 f4		      BNE	LOOPy
    180  2f8a		       20 d2 ff    EXIT       JSR	CHROUT
    181  2f8d		       20 d2 ff 	      JSR	CHROUT	;One more to look nice
    182  2f90		       a9 0f		      LDA	#15
    183  2f92		       20 c3 ff 	      JSR	CLOSE
    184  2f95		       4c cc ff 	      JMP	CLRCHN	; Which does an RTS
    185  2f98
    186  2f98							;--------------------------------------------------------------------------
    187  2f98							;*
    188  2f98							;* PRINTDIR reads the directory from the current device
    189  2f98							;* and prints it to the screen.
    190  2f98							;*
    191  2f98				   PRINTDIR
    192  2f98		       a9 01		      LDA	#01	;File no.
    193  2f9a		       a6 ba		      LDX	$BA	;Current device number
    194  2f9c		       a0 00		      LDY	#00	;Secondary address
    195  2f9e		       20 ba ff 	      JSR	SETLFS
    196  2fa1		       a9 01		      LDA	#1
    197  2fa3		       a2 ed		      LDX	#<DOLLAR
    198  2fa5		       a0 2f		      LDY	#>DOLLAR
    199  2fa7		       20 bd ff 	      JSR	SETNAM
    200  2faa		       20 c0 ff 	      JSR	OPEN
    201  2fad		       a2 01		      LDX	#01
    202  2faf		       20 c6 ff 	      JSR	CHKIN
    203  2fb2		       b0 31		      BCS	ENDP	;Error if carry set
    204  2fb4
    205  2fb4		       20 cf ff 	      JSR	CHRIN	;Grab load address
    206  2fb7		       20 cf ff 	      JSR	CHRIN
    207  2fba		       a9 0d	   LOOP1      LDA	#13
    208  2fbc		       20 d2 ff 	      JSR	CHROUT
    209  2fbf		       20 cf ff 	      JSR	CHRIN	;Line link
    210  2fc2		       20 cf ff 	      JSR	CHRIN
    211  2fc5		       20 cf ff 	      JSR	CHRIN	;Line number (file size)
    212  2fc8		       a8		      TAY
    213  2fc9		       20 cf ff 	      JSR	CHRIN
    214  2fcc		       aa		      TAX
    215  2fcd		       20 b7 ff 	      JSR	READST
    216  2fd0		       d0 13		      BNE	ENDP
    217  2fd2		       98		      TYA
    218  2fd3		       a0 0a		      LDY	#10	;Base
    219  2fd5							;  JSR PRINTNUM     ;Print out the number in X,Y
    220  2fd5		       a9 20		      LDA	#32
    221  2fd7		       20 d2 ff 	      JSR	CHROUT	;Add a space to look nice
    222  2fda		       20 cf ff    LOOPz      JSR	CHRIN
    223  2fdd		       aa		      TAX
    224  2fde		       f0 da		      BEQ	LOOP1
    225  2fe0		       20 d2 ff 	      JSR	CHROUT
    226  2fe3		       d0 f5		      BNE	LOOPz
    227  2fe5		       a9 01	   ENDP       LDA	#01
    228  2fe7		       20 c3 ff 	      JSR	CLOSE
    229  2fea		       4c cc ff 	      JMP	CLRCHN
    230  2fed
    231  2fed		       24	   DOLLAR     dc.b	"$"
------- FILE duel-main.asm
------- FILE duel-send.asm LEVEL 2 PASS 2
      0  2fee					      include	"duel-send.asm"
      1  2fee							; duel-send.asm
      2  2fee							; Weather War III / Artillery Duel Packet Send Routines
      3  2fee
      4  2fee							; ==============================================================
      5  2fee							; Macro to prep and copy UDP packet.  Does the following:
      6  2fee							;   1. Set packet location to copy from
      7  2fee							;   2. Gets checksum and adds it to the packet
      8  2fee							;   3. Copies the data to the UDP send buffer
      9  2fee							;   {1} is the start of the packet
     10  2fee							;   {2) is the checksum location
     11  2fee							; ==============================================================
     12  2fee
     13  2fee					      MAC	prepcopy
     14  2fee					      ldx	#<{1}
     15  2fee					      lda	#>{1}
     16  2fee					      stx	COPYLOC+1
     17  2fee					      sta	COPYLOC+2
     18  2fee
     19  2fee					      ldy	MYDATALEN
     20  2fee					      dey		; So we don't include the checksum byte itself
     21  2fee					      dey
     22  2fee					      jsr	DATACHECKSUM
     23  2fee					      lda	CSUM
     24  2fee					      sta	{2}
     25  2fee
     26  2fee					      jsr	COPYTOUDPBUFFER
     27  2fee					      ENDM
     28  2fee
     29  2fee				   LASTPACKETNUM
     30  2fee		       01		      dc.b	$01
     31  2fef
     32  2fef				   MYDATALEN
     33  2fef		       00		      dc.b	$00
     34  2ff0
     35  2ff0							; ==============================================================
     36  2ff0							; The "Announce" packet used at the beginning of the game.
     37  2ff0							; ==============================================================
     38  2ff0
     39  2ff0				   ANNOUNCEPACKET
     40  2ff0		       01		      dc.b	$01	; Type = announce
     41  2ff1		       00		      dc.b	$00	; Packet#
     42  2ff2		       00		      dc.b	$00	; Who is first?  1=me, 2=opponent
     43  2ff3		       08		      dc.b	$08	; # chars in name, overwritten
     44  2ff4				   MY_NAME
     45  2ff4		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00	; My name in PETSCII - 8 chars
     46  2ffc		       00		      dc.b	$00	; Zero-terminate it for printing, this byte *is* sent
     47  2ffd
     48  2ffd				   ANN_CSUM
     49  2ffd		       ff		      dc.b	$FF	; Checksum, overwritten
     50  2ffe
     51  2ffe				   SENDANNOUNCE
     52  2ffe		       a9 0e		      lda	#$0e	; Including zero-term. and checksum (was $0c)
     53  3000		       a2 00		      ldx	#$00
     54  3002		       8d ef 2f 	      sta	MYDATALEN
     55  3005		       20 14 69 	      jsr	UDP_SET_DATALEN
     56  3008
     57  3008							; Clear any previously received packet flag
     58  3008		       a9 00		      lda	#$00
     59  300a		       8d 14 32 	      sta	PACKET_RECEIVED
     60  300d
     61  300d							; Packet#
     62  300d		       ee ee 2f 	      inc	LASTPACKETNUM
     63  3010		       ad ee 2f 	      lda	LASTPACKETNUM
     64  3013		       8d f1 2f 	      sta	ANNOUNCEPACKET+1
     65  3016
     66  3016							; Copy data into buffer and send
      0  3016					      PREPCOPY	ANNOUNCEPACKET, ANN_CSUM
      1  3016		       a2 f0		      ldx	#<ANNOUNCEPACKET
      2  3018		       a9 2f		      lda	#>ANNOUNCEPACKET
      3  301a		       8e 08 32 	      stx	COPYLOC+1
      4  301d		       8d 09 32 	      sta	COPYLOC+2
      5  3020
      6  3020		       ac ef 2f 	      ldy	MYDATALEN
      7  3023		       88		      dey
      8  3024		       88		      dey
      9  3025		       20 64 33 	      jsr	DATACHECKSUM
     10  3028		       ad 63 33 	      lda	CSUM
     11  302b		       8d fd 2f 	      sta	ANN_CSUM
     12  302e
     13  302e		       20 03 32 	      jsr	COPYTOUDPBUFFER
     68  3031		       4c 51 31 	      jmp	SENDWAITACK
     69  3034
     70  3034
     71  3034							; ==============================================================
     72  3034							; Weapon packet - Weapon angle and power
     73  3034							; ==============================================================
     74  3034
     75  3034				   WEAPONPACKET
     76  3034		       02		      dc.b	$02	; Type = Weapon
     77  3035		       ff		      dc.b	$FF	; Packet# - overwritten
     78  3036		       ff		      dc.b	$FF	; Weapon angle in degrees - overwritten
     79  3037		       ff		      dc.b	$FF	; Weapon power +/-100 - overwritten
     80  3038				   WEAPON_CSUM
     81  3038		       ff		      dc.b	$FF	; Checksum - Overwritten
     82  3039
     83  3039				   SENDWEAPON
     84  3039		       a9 05		      lda	#$05
     85  303b		       a2 00		      ldx	#$00
     86  303d		       8d ef 2f 	      sta	MYDATALEN
     87  3040		       20 14 69 	      jsr	UDP_SET_DATALEN
     88  3043
     89  3043							; Packet#
     90  3043		       ee ee 2f 	      inc	LASTPACKETNUM
     91  3046		       ad ee 2f 	      lda	LASTPACKETNUM
     92  3049		       8d 35 30 	      sta	WEAPONPACKET+1
     93  304c
     94  304c							; Weapon + Power already in buffer
     95  304c
     96  304c							; Copy data into buffer and send
      0  304c					      PREPCOPY	WEAPONPACKET, WEAPON_CSUM
      1  304c		       a2 34		      ldx	#<WEAPONPACKET
      2  304e		       a9 30		      lda	#>WEAPONPACKET
      3  3050		       8e 08 32 	      stx	COPYLOC+1
      4  3053		       8d 09 32 	      sta	COPYLOC+2
      5  3056
      6  3056		       ac ef 2f 	      ldy	MYDATALEN
      7  3059		       88		      dey
      8  305a		       88		      dey
      9  305b		       20 64 33 	      jsr	DATACHECKSUM
     10  305e		       ad 63 33 	      lda	CSUM
     11  3061		       8d 38 30 	      sta	WEAPON_CSUM
     12  3064
     13  3064		       20 03 32 	      jsr	COPYTOUDPBUFFER
     98  3067		       4c 51 31 	      jmp	SENDWAITACK
     99  306a
    100  306a
    101  306a							; ==============================================================
    102  306a							; Health Packet
    103  306a							; ==============================================================
    104  306a
    105  306a				   HEALTHPACKET
    106  306a		       03		      dc.b	$03	; Type = Weapon
    107  306b		       ff		      dc.b	$FF	; Packet# - overwritten
    108  306c		       ff		      dc.b	$FF	; Health remaining - overwritten
    109  306d				   HEALTH_CSUM
    110  306d		       ff		      dc.b	$FF	; Checksum - Overwritten
    111  306e
    112  306e				   SENDHEALTH
    113  306e		       a9 04		      lda	#$04
    114  3070		       a2 00		      ldx	#$00
    115  3072		       8d ef 2f 	      sta	MYDATALEN
    116  3075		       20 14 69 	      jsr	UDP_SET_DATALEN
    117  3078
    118  3078							; Packet#
    119  3078		       ee ee 2f 	      inc	LASTPACKETNUM
    120  307b		       ad ee 2f 	      lda	LASTPACKETNUM
    121  307e		       8d 6b 30 	      sta	HEALTHPACKET+1
    122  3081
    123  3081							; Health value, always 1 byte
    124  3081		       ad 8d 2e 	      lda	MYHEALTH
    125  3084		       8d 6c 30 	      sta	HEALTHPACKET+2
    126  3087
    127  3087							; Copy data into buffer
      0  3087					      PREPCOPY	HEALTHPACKET, HEALTH_CSUM
      1  3087		       a2 6a		      ldx	#<HEALTHPACKET
      2  3089		       a9 30		      lda	#>HEALTHPACKET
      3  308b		       8e 08 32 	      stx	COPYLOC+1
      4  308e		       8d 09 32 	      sta	COPYLOC+2
      5  3091
      6  3091		       ac ef 2f 	      ldy	MYDATALEN
      7  3094		       88		      dey
      8  3095		       88		      dey
      9  3096		       20 64 33 	      jsr	DATACHECKSUM
     10  3099		       ad 63 33 	      lda	CSUM
     11  309c		       8d 6d 30 	      sta	HEALTH_CSUM
     12  309f
     13  309f		       20 03 32 	      jsr	COPYTOUDPBUFFER
    129  30a2
    130  30a2		       4c 51 31 	      jmp	SENDWAITACK
    131  30a5
    132  30a5
    133  30a5							; ==============================================================
    134  30a5							; Weather packet - wind direction and speed
    135  30a5							; ==============================================================
    136  30a5
    137  30a5				   WEATHERPACKET
    138  30a5		       04		      dc.b	$04	; Type = weather
    139  30a6		       ff		      dc.b	$FF	; Packet# - overwritten
    140  30a7		       ff		      dc.b	$FF	; Direction 0/1 (+/-) for Artillery Duel
    141  30a8		       ff		      dc.b	$FF	; Wind speed 0-100
    142  30a9				   WEATHER_CSUM
    143  30a9		       ff		      dc.b	$FF	; Checksum - Overwritten
    144  30aa
    145  30aa				   SENDWEATHER
    146  30aa		       a9 05		      lda	#$05
    147  30ac		       a2 00		      ldx	#$00
    148  30ae		       8d ef 2f 	      sta	MYDATALEN
    149  30b1		       20 14 69 	      jsr	UDP_SET_DATALEN
    150  30b4
    151  30b4							; Packet#
    152  30b4		       ee ee 2f 	      inc	LASTPACKETNUM
    153  30b7		       ad ee 2f 	      lda	LASTPACKETNUM
    154  30ba		       8d a6 30 	      sta	WEATHERPACKET+1
    155  30bd
    156  30bd							; Random numbers
    157  30bd		       20 54 33 	      jsr	RANDOM255
    158  30c0		       29 01		      and	#$01	;Odd/Even = +/-
    159  30c2		       8d a7 30 	      sta	WEATHERPACKET+2
    160  30c5		       8d d7 2d 	      sta	CLOUDLOC
    161  30c8
    162  30c8				   PICK
    163  30c8		       20 54 33 	      jsr	RANDOM255
    164  30cb		       a8		      tay
    165  30cc		       b9 2b 73 	      lda	LOOKUP100,y	;LOOKUP100 was moved to the end of the file to avoid timing problems
    166  30cf		       8d a8 30 	      sta	WEATHERPACKET+3
    167  30d2		       8d d8 2d 	      sta	WINDSPEED
    168  30d5
    169  30d5							; Copy data into buffer and send
      0  30d5					      PREPCOPY	WEATHERPACKET, WEATHER_CSUM
      1  30d5		       a2 a5		      ldx	#<WEATHERPACKET
      2  30d7		       a9 30		      lda	#>WEATHERPACKET
      3  30d9		       8e 08 32 	      stx	COPYLOC+1
      4  30dc		       8d 09 32 	      sta	COPYLOC+2
      5  30df
      6  30df		       ac ef 2f 	      ldy	MYDATALEN
      7  30e2		       88		      dey
      8  30e3		       88		      dey
      9  30e4		       20 64 33 	      jsr	DATACHECKSUM
     10  30e7		       ad 63 33 	      lda	CSUM
     11  30ea		       8d a9 30 	      sta	WEATHER_CSUM
     12  30ed
     13  30ed		       20 03 32 	      jsr	COPYTOUDPBUFFER
    171  30f0		       4c 51 31 	      jmp	SENDWAITACK
    172  30f3
    173  30f3
    174  30f3							; ==============================================================
    175  30f3							; Outgoing chat packet
    176  30f3							; ==============================================================
    177  30f3
    178  30f3				   CHATPACKET
    179  30f3		       05		      dc.b	$05	; Type = chat
    180  30f4		       ff		      dc.b	$FF	; Packet# - overwritten
    181  30f5		       ff		      dc.b	$FF	; Length - overwritten
    182  30f6				   GOTINPUT
    183  30f6				   CHATTEXT
    184  30f6		       00 00 00 00*	      ds.b	$28	; 40 bytes
    185  311e				   CHAT_CSUM
    186  311e		       ff		      dc.b	$FF	; Checksum, overwritten
    187  311f
    188  311f				   SENDCHAT
    189  311f		       a9 2c		      lda	#$2C
    190  3121		       a2 00		      ldx	#$00
    191  3123		       8d ef 2f 	      sta	MYDATALEN
    192  3126		       20 14 69 	      jsr	UDP_SET_DATALEN
    193  3129
    194  3129							; Packet#
    195  3129		       ee ee 2f 	      inc	LASTPACKETNUM
    196  312c		       ad ee 2f 	      lda	LASTPACKETNUM
    197  312f		       8d f4 30 	      sta	CHATPACKET+1
    198  3132
    199  3132							; Length and text are written to by the CHATINPUT routine
    200  3132
    201  3132							; Copy data into buffer
      0  3132					      PREPCOPY	CHATPACKET, CHAT_CSUM
      1  3132		       a2 f3		      ldx	#<CHATPACKET
      2  3134		       a9 30		      lda	#>CHATPACKET
      3  3136		       8e 08 32 	      stx	COPYLOC+1
      4  3139		       8d 09 32 	      sta	COPYLOC+2
      5  313c
      6  313c		       ac ef 2f 	      ldy	MYDATALEN
      7  313f		       88		      dey
      8  3140		       88		      dey
      9  3141		       20 64 33 	      jsr	DATACHECKSUM
     10  3144		       ad 63 33 	      lda	CSUM
     11  3147		       8d 1e 31 	      sta	CHAT_CSUM
     12  314a
     13  314a		       20 03 32 	      jsr	COPYTOUDPBUFFER
    203  314d		       4c 51 31 	      jmp	SENDWAITACK
    204  3150
    205  3150
    206  3150
    207  3150							; Flag that we're currently waiting for an ACK, so don't send out ACKs ourselves
    208  3150							; Until complete
    209  3150
    210  3150				   WAITINGFORACK
    211  3150		       00		      .byte.b	$00
    212  3151
    213  3151							; ==============================================================
    214  3151							; ALL PACKETS - send the data and wait for an ACK
    215  3151							; ==============================================================
    216  3151				   SENDWAITACK
    217  3151							; Clear any previously received packet flag
    218  3151		       a9 00		      lda	#$00
    219  3153		       8d 14 32 	      sta	PACKET_RECEIVED
    220  3156
    221  3156		       a9 01		      lda	#$01
    222  3158		       8d 50 31 	      sta	WAITINGFORACK
    223  315b
    224  315b				   SENDWAITACK1
    225  315b							;Send the packet
    226  315b		       20 a1 68 	      jsr	UDP_SEND
    227  315e
    228  315e							; Show waiting (red)
    229  315e		       a9 02		      lda	#$02
    230  3160		       8d 95 db 	      sta	COMMSLED
    231  3163
    232  3163							; Wait for one second or a packet
    233  3163		       20 2b 33 	      jsr	WAITONE
    234  3166
    235  3166							; Did we receive a packet while waiting?
    236  3166		       ad 14 32 	      lda	PACKET_RECEIVED
    237  3169		       f0 f0		      beq	SENDWAITACK1	; flag=0, no packet, send again
    238  316b
    239  316b		       ad 13 32 	      lda	LAST_PACKET_TYPE
    240  316e		       c9 80		      cmp	#$80	; ACK	   ; Not an ACK, ignore and send again
    241  3170		       d0 df		      bne	SENDWAITACK
    242  3172
    243  3172							; Compare sequence
    244  3172		       ad 61 74 	      lda	INPACKET+$2B	;Received packet#
    245  3175		       cd ee 2f 	      cmp	LASTPACKETNUM
    246  3178		       f0 44		      beq	ACKOK
    247  317a
    248  317a							; Sequence# of ACK was bad!
      0  317a					      PLOT	0,0
      1  317a		       a0 00		      ldy	#0
      2  317c		       a2 00		      ldx	#0
      3  317e		       18		      clc
      4  317f		       20 0a e5 	      jsr	$E50A
      0  3182					      PRINT	CG_WHT, "SENT PACKET #"
      1  3182		       20 f8 47 	      jsr	prns
      2  3185		       05 53 45 4e*	      dc.b	CG_WHT, "SENT PACKET #",0
      0  3194					      PRINTBYTE	LASTPACKETNUM
      1  3194		       a2 00		      ldx	#$00
      2  3196		       a0 0a		      ldy	#$0a
      3  3198		       ad ee 2f 	      lda	LASTPACKETNUM
      4  319b		       20 ff 49 	      jsr	printnum
      0  319e					      PRINT	CRLF
      1  319e		       20 f8 47 	      jsr	prns
      2  31a1		       0d 00		      dc.b	CRLF,0
      0  31a3					      PRINT	"RCVD ACK #"
      1  31a3		       20 f8 47 	      jsr	prns
      2  31a6		       52 43 56 44*	      dc.b	"RCVD ACK #",0
      0  31b1					      PRINTBYTE	INPACKET+$2B
      1  31b1		       a2 00		      ldx	#$00
      2  31b3		       a0 0a		      ldy	#$0a
      3  31b5		       ad 61 74 	      lda	INPACKET+$2B
      4  31b8		       20 ff 49 	      jsr	printnum
    255  31bb		       4c 5b 31 	      jmp	SENDWAITACK1
    256  31be
    257  31be							; Packet was sent and ACKed.  Back to the game.
    258  31be							; Show no activity
    259  31be				   ACKOK
    260  31be		       a9 0b		      lda	#$0b
    261  31c0		       8d 95 db 	      sta	COMMSLED
    262  31c3
    263  31c3							; Clear waiting flag
    264  31c3		       a9 00		      lda	#$00
    265  31c5		       8d 50 31 	      sta	WAITINGFORACK
    266  31c8		       60		      rts
    267  31c9
    268  31c9
    269  31c9							; ===========================================================================
    270  31c9							; The ACK packet used to acknowledge any incoming packets.
    271  31c9							; ========================================================s===================
    272  31c9
    273  31c9				   ACKPACKET
    274  31c9		       80		      dc.b	$80	; Type = ACK
    275  31ca		       00		      dc.b	$00	; Packet# to ACK
    276  31cb				   ACK_CSUM
    277  31cb		       ff		      dc.b	$FF
    278  31cc
    279  31cc				   SENDACK
    280  31cc							;If we're waiting for an ACK already, don't send one as it screws up the outgoing buffer
    281  31cc		       ad 50 31 	      lda	WAITINGFORACK
    282  31cf		       f0 03		      beq	ACKGOAHEAD
    283  31d1		       4c 02 32 	      jmp	NOACK
    284  31d4
    285  31d4				   ACKGOAHEAD
    286  31d4		       a9 03		      lda	#$03
    287  31d6		       a2 00		      ldx	#$00
    288  31d8		       8d ef 2f 	      sta	MYDATALEN
    289  31db		       20 14 69 	      jsr	UDP_SET_DATALEN
    290  31de
    291  31de							;Copy in the packet# that we're sending back
    292  31de		       ad 61 74 	      lda	INPACKET+$2B
    293  31e1		       8d ca 31 	      sta	ACKPACKET+1
    294  31e4
    295  31e4							; Copy data into buffer
      0  31e4					      PREPCOPY	ACKPACKET, ACK_CSUM
      1  31e4		       a2 c9		      ldx	#<ACKPACKET
      2  31e6		       a9 31		      lda	#>ACKPACKET
      3  31e8		       8e 08 32 	      stx	COPYLOC+1
      4  31eb		       8d 09 32 	      sta	COPYLOC+2
      5  31ee
      6  31ee		       ac ef 2f 	      ldy	MYDATALEN
      7  31f1		       88		      dey
      8  31f2		       88		      dey
      9  31f3		       20 64 33 	      jsr	DATACHECKSUM
     10  31f6		       ad 63 33 	      lda	CSUM
     11  31f9		       8d cb 31 	      sta	ACK_CSUM
     12  31fc
     13  31fc		       20 03 32 	      jsr	COPYTOUDPBUFFER
    297  31ff		       20 a1 68 	      jsr	UDP_SEND
    298  3202
    299  3202							; There is no ACK in this case
    300  3202				   NOACK
    301  3202		       60		      rts
    302  3203
    303  3203
    304  3203							; ===========================================================================
    305  3203							; Helper routine to copy packets into the UDP buffer.	 255 bytes max.
    306  3203							; ===========================================================================
    307  3203
    308  3203				   COPYTOUDPBUFFER
    309  3203		       ae 6a 68 	      ldx	UDP_LEN
    310  3206		       e8		      inx
    311  3207				   COPYLOC
    312  3207		       bd ff ff 	      lda	$FFFF,x	; This gets overwritten by PREPCOPY macro
    313  320a		       9d 66 65 	      sta	UDP_DATA,x
    314  320d		       ca		      dex
    315  320e		       e0 ff		      cpx	#$FF	; aka -1 This is needed so the "zeroth" byte gets copied
    316  3210		       d0 f5		      bne	COPYLOC
    317  3212		       60		      rts
------- FILE duel-main.asm
------- FILE duel-receive.asm LEVEL 2 PASS 2
      0  3213					      include	"duel-receive.asm"
      1  3213							; duel-receive.asm
      2  3213							; Packet Receive + Handling Routine
      3  3213
      4  3213							; Port to "listen" on
      5  3213		       0b b8	   USER_DEST_PORT =	3000
      6  3213
      7  3213							; Miscellaneous flags
      8  3213				   LAST_PACKET_TYPE
      9  3213		       00		      dc.b	$00
     10  3214
     11  3214							; Flag that a packet was received
     12  3214				   PACKET_RECEIVED
     13  3214		       00		      dc.b	$00
     14  3215
     15  3215							; Special flag for chat packets
     16  3215				   CHAT_RECEIVED
     17  3215		       00		      dc.b	$00
     18  3216
     19  3216							; Special flag for announce packets, as the game stalls if this isn't detected
     20  3216				   ANNOUNCE_RECEIVED
     21  3216		       00		      dc.b	$00
     22  3217
     23  3217							; Special flag for health packets, as the game stalls if this isn't detected
     24  3217				   HEALTH_RECEIVED
     25  3217		       00		      dc.b	$00
     26  3218
     27  3218							; Temporary holder of the checksum we received
     28  3218				   RCV_CSUM
     29  3218		       ff		      dc.b	$ff
     30  3219
     31  3219							; ==============================================================
     32  3219							; Master packet receiver.  This occurs inside the interrupt!
     33  3219							; A UDP packet has arrived, and the port matches the one we want.
     34  3219							; ==============================================================
     35  3219
     36  3219				   MYUDP_PROCESS
     37  3219							;Show receive (green)
     38  3219		       a9 0d		      lda	#$0d
     39  321b		       8d 95 db 	      sta	COMMSLED
     40  321e
     41  321e							; Check that the packet type is sensible before flagging it.
     42  321e		       ad 60 74 	      lda	INPACKET+$2A	; Beginning of UDP data buffer
     43  3221
     44  3221							; copy to LAST_PACKET_TYPE
     45  3221		       8d 13 32 	      sta	LAST_PACKET_TYPE
     46  3224
     47  3224							; Check for ACK packets ---------------------------------
     48  3224		       c9 80		      cmp	#$80	; ACK
     49  3226		       d0 03		      bne	DOCHECK
     50  3228		       4c c4 32 	      jmp	FLAGRECEIVED	; Don't ACK ACK packets
     51  322b
     52  322b							; Check checksum, and don't ack if bad
     53  322b				   DOCHECK
     54  322b		       20 e2 32 	      jsr	CHECKSUM
     55  322e		       f0 03		      beq	NOTACK
     56  3230		       4c cf 32 	      jmp	BADCSUM
     57  3233
     58  3233							; Check for Chat packet ---------------------------------
     59  3233				   NOTACK
     60  3233		       ad 13 32 	      lda	LAST_PACKET_TYPE
     61  3236		       c9 05		      cmp	#$05	;Chat
     62  3238		       d0 0b		      bne	NOTCHAT
     63  323a		       a9 01		      lda	#$01
     64  323c		       8d 15 32 	      sta	CHAT_RECEIVED
     65  323f		       20 cc 31 	      jsr	SENDACK
     66  3242		       4c c4 32 	      jmp	FLAGRECEIVED
     67  3245
     68  3245							; Check for Announce packet ---------------------------------
     69  3245				   NOTCHAT
     70  3245		       ad 13 32 	      lda	LAST_PACKET_TYPE
     71  3248		       c9 01		      cmp	#$01	;Announce
     72  324a		       d0 0e		      bne	NOTANNOUNCE
     73  324c		       20 05 33 	      jsr	GRABOPPNAME
     74  324f		       20 cc 31 	      jsr	SENDACK
     75  3252		       a9 01		      lda	#$01
     76  3254		       8d 16 32 	      sta	ANNOUNCE_RECEIVED
     77  3257		       4c c4 32 	      jmp	FLAGRECEIVED
     78  325a
     79  325a							; Check for Health packets ---------------------------------
     80  325a				   NOTANNOUNCE
     81  325a		       ad 13 32 	      lda	LAST_PACKET_TYPE
     82  325d		       c9 03		      cmp	#$03	;Health
     83  325f		       d0 11		      bne	NOTHEALTH
     84  3261
     85  3261							;Store opponent's health
     86  3261		       ad 62 74 	      lda	INPACKET+$2C
     87  3264		       8d 8e 2e 	      sta	OPPHEALTH
     88  3267		       20 cc 31 	      jsr	SENDACK
     89  326a
     90  326a		       a9 01		      lda	#$01
     91  326c		       8d 17 32 	      sta	HEALTH_RECEIVED
     92  326f		       4c c4 32 	      jmp	FLAGRECEIVED
     93  3272
     94  3272							; Check for Weather packets ---------------------------------
     95  3272				   NOTHEALTH
     96  3272		       ad 13 32 	      lda	LAST_PACKET_TYPE
     97  3275		       c9 04		      cmp	#$04	;Weather - handle it right away
     98  3277		       d0 15		      bne	NOTWEATHER
     99  3279		       ad 62 74 	      lda	INPACKET+$2C
    100  327c		       8d d7 2d 	      sta	CLOUDLOC
    101  327f		       ad 63 74 	      lda	INPACKET+$2D
    102  3282		       8d d8 2d 	      sta	WINDSPEED
    103  3285		       20 04 40 	      jsr	SHOWWEATHER
    104  3288		       20 cc 31 	      jsr	SENDACK
    105  328b		       4c c9 32 	      jmp	MYUDP_PROCESS_x	; Don't set packet received flag - we've handled it already so main loop can ignore it.
    106  328e
    107  328e							; Check for Weapon packets ---------------------------------
    108  328e				   NOTWEATHER
    109  328e		       ad 13 32 	      lda	LAST_PACKET_TYPE
    110  3291		       c9 02		      cmp	#$02	;Weapon - just flag - handled by main code
    111  3293		       d0 06		      bne	UNKNOWNTYPE
    112  3295		       20 cc 31 	      jsr	SENDACK
    113  3298		       4c c4 32 	      jmp	FLAGRECEIVED
    114  329b
    115  329b				   UNKNOWNTYPE
    116  329b							;Don't ACK any other packets, since they're of an unknown type
      0  329b					      PLOT	0,0
      1  329b		       a0 00		      ldy	#0
      2  329d		       a2 00		      ldx	#0
      3  329f		       18		      clc
      4  32a0		       20 0a e5 	      jsr	$E50A
      0  32a3					      IPRINT	CG_WHT,"UNKNOWN PACKET "
      1  32a3		       20 45 48 	      jsr	iprns
      2  32a6		       05 55 4e 4b*	      dc.b	CG_WHT,"UNKNOWN PACKET ",0
      0  32b7					      PRINTBYTE	LAST_PACKET_TYPE	; This should be made threadsafe
      1  32b7		       a2 00		      ldx	#$00
      2  32b9		       a0 0a		      ldy	#$0a
      3  32bb		       ad 13 32 	      lda	LAST_PACKET_TYPE
      4  32be		       20 ff 49 	      jsr	printnum
    120  32c1		       4c c9 32 	      jmp	MYUDP_PROCESS_x
    121  32c4
    122  32c4				   FLAGRECEIVED
    123  32c4							; Flag that we got the packet - this is cleared after packet has been processed by the code that uses it
    124  32c4		       a9 01		      lda	#$01
    125  32c6		       8d 14 32 	      sta	PACKET_RECEIVED
    126  32c9
    127  32c9				   MYUDP_PROCESS_x
    128  32c9							;Show no more activity
    129  32c9		       a9 0b		      lda	#$0b
    130  32cb		       8d 95 db 	      sta	COMMSLED
    131  32ce		       60		      rts
    132  32cf
    133  32cf							; -------------------------------------------------------------------------
    134  32cf							; Make bad checksums really obvious visually - maybe remove in the future
    135  32cf				   BADCSUM
    136  32cf		       ad 21 d0 	      lda	$d021	;Save screen color
    137  32d2		       a2 00		      ldx	#$00
    138  32d4				   bad1
    139  32d4		       ea		      nop
    140  32d5		       ea		      nop
    141  32d6		       ca		      dex
    142  32d7		       8e 21 d0 	      stx	$d021
    143  32da		       d0 f8		      bne	bad1
    144  32dc		       8d 21 d0 	      sta	$d021
    145  32df		       4c c9 32 	      jmp	MYUDP_PROCESS_x
    146  32e2
    147  32e2							; -------------------------------------------------------------------------
    148  32e2							; Do Checksum here
    149  32e2				   CHECKSUM
    150  32e2		       ae 13 32 	      ldx	LAST_PACKET_TYPE
    151  32e5		       bd 13 33 	      lda	BYTESPERPACKET,x
    152  32e8		       a8		      tay
    153  32e9		       aa		      tax
    154  32ea		       bd 60 74 	      lda	INPACKET+$2A,x	; A now holds the checksum we received
    155  32ed		       8d 18 32 	      sta	RCV_CSUM
    156  32f0
    157  32f0							;Point x:a to start of received packet
    158  32f0							;and calculate our own checksum
    159  32f0		       a2 60		      ldx	#<(INPACKET+$2A)
    160  32f2		       a9 74		      lda	#>(INPACKET+$2A)
    161  32f4		       88		      dey		; So we aren't including the checksum byte itself
    162  32f5		       20 64 33 	      jsr	DATACHECKSUM
    163  32f8
    164  32f8		       ad 63 33 	      lda	CSUM
    165  32fb		       8d 62 33 	      sta	CSUM_SAVE
    166  32fe
    167  32fe		       ad 18 32 	      lda	RCV_CSUM
    168  3301		       cd 63 33 	      cmp	CSUM
    169  3304							; Zero bit now contains whether or not checksum matches, use bne/beq
    170  3304		       60		      rts
    171  3305
    172  3305							; -------------------------------------------------------------------------
    173  3305							; Grab the opponent's name from the received packet
    174  3305				   GRABOPPNAME
    175  3305		       a2 08		      ldx	#$08	; was INPACKET+$2D; # of chars
    176  3307				   COPYNAME
    177  3307		       bd 64 74 	      lda	INPACKET+$2E,x
    178  330a		       9d 40 2a 	      sta	OPP_NAME,x
    179  330d		       ca		      dex
    180  330e		       e0 ff		      cpx	#$ff	;So the "zeroth" byte gets copied
    181  3310		       d0 f5		      bne	COPYNAME
    182  3312		       60		      rts
    183  3313
    184  3313							; -------------------------------------------------------------------------
    185  3313							; A lookup table of the length of packets, by packet type.
    186  3313				   BYTESPERPACKET
    187  3313		       ff 0d 04 03*	      dc.b	$ff,$0d,$04,$03,$04,$2b	; There is no packet 0
------- FILE duel-main.asm
------- FILE duel-utils.asm LEVEL 2 PASS 2
      0  3319					      include	"duel-utils.asm"
      1  3319							; duel-utils.asm
      2  3319							; Utils and macros
      3  3319
      4  3319							; ==============================================================
      5  3319							; One second delay - thanks groepaz
      6  3319							; ==============================================================
      7  3319
      8  3319				   ONESECOND
      9  3319		       a2 3c		      ldx	#60	; - NTSC   use #50 for PAL
     10  331b				   lp
     11  331b		       a9 f8		      lda	#$f8
     12  331d				   lp2
     13  331d		       cd 12 d0 	      cmp	$d012	; reached the line
     14  3320		       d0 fb		      bne	lp2
     15  3322				   lp3
     16  3322		       cd 12 d0 	      cmp	$d012	; past the line
     17  3325		       f0 fb		      beq	lp3
     18  3327
     19  3327							; Count down
     20  3327		       ca		      dex
     21  3328		       d0 f1		      bne	lp
     22  332a
     23  332a				   ONESECOND_x
     24  332a		       60		      rts
     25  332b
     26  332b							; ==============================================================
     27  332b							; One second delay that can be interrupted by a packet
     28  332b							; ==============================================================
     29  332b
     30  332b				   WAITONE
     31  332b		       a2 3c		      ldx	#60	; - NTSC   use #50 for PAL
     32  332d				   alp
     33  332d		       a9 f8		      lda	#$f8
     34  332f				   alp2
     35  332f		       cd 12 d0 	      cmp	$d012	; reached the line
     36  3332		       d0 fb		      bne	alp2
     37  3334				   alp3
     38  3334		       cd 12 d0 	      cmp	$d012	; past the line
     39  3337		       f0 fb		      beq	alp3
     40  3339
     41  3339							; Early exit if a packet is received
     42  3339		       ad 14 32 	      lda	PACKET_RECEIVED
     43  333c		       d0 03		      bne	WAITONE_x	; exit if flag = 1
     44  333e
     45  333e							; Count down
     46  333e		       ca		      dex
     47  333f		       d0 ec		      bne	alp
     48  3341
     49  3341				   WAITONE_x
     50  3341		       60		      rts
     51  3342
     52  3342
     53  3342							; ==============================================================
     54  3342							; One-tenth second delay
     55  3342							; ==============================================================
     56  3342
     57  3342				   TENTHSECOND
     58  3342		       a2 06		      ldx	#6	; - NTSC   use #5 for PAL
     59  3344				   tlp
     60  3344		       a9 f8		      lda	#$f8
     61  3346				   tlp2
     62  3346		       cd 12 d0 	      cmp	$d012	; reached the line
     63  3349		       d0 fb		      bne	tlp2
     64  334b				   tlp3
     65  334b		       cd 12 d0 	      cmp	$d012	; past the line
     66  334e		       f0 fb		      beq	tlp3
     67  3350
     68  3350							; Count down
     69  3350		       ca		      dex
     70  3351		       d0 f1		      bne	tlp
     71  3353
     72  3353				   TENTHSECOND_x
     73  3353		       60		      rts
     74  3354
     75  3354							; ====================================================================
     76  3354							; Return a random number from 1-255 using SID Voice #3 - thanks Golan
     77  3354							; ====================================================================
     78  3354
     79  3354				   RANDOM255
     80  3354		       a9 ff		      LDA	#$FF
     81  3356		       8d 0f d4 	      STA	$D40F
     82  3359		       a9 80		      LDA	#$80
     83  335b		       8d 12 d4 	      STA	$D412
     84  335e		       ad 1b d4 	      LDA	$D41B
     85  3361		       60		      rts
     86  3362
     87  3362
     88  3362
     89  3362							; ==============================================================
     90  3362							; Simple checksum on sent/received data
     91  3362							; Start of data in x:a, length in y
     92  3362							; checksum in CSUM when finished
     93  3362							; ==============================================================
     94  3362
     95  3362		       00	   CSUM_SAVE  dc.b	$00
     96  3363
     97  3363		       00	   CSUM       dc.b	$00
     98  3364
     99  3364				   DATACHECKSUM
    100  3364		       8e 71 33 	      stx	DCS1+1
    101  3367		       8d 72 33 	      sta	DCS1+2
    102  336a
    103  336a		       a9 00		      lda	#$00	; Reset checksum
    104  336c		       8d 63 33 	      sta	CSUM
    105  336f		       18		      clc
    106  3370
    107  3370				   DCS1
    108  3370		       b9 ff ff 	      lda	$FFFF,y	;Overwritten above
    109  3373		       6d 63 33 	      adc	CSUM
    110  3376		       8d 63 33 	      sta	CSUM
    111  3379		       88		      dey
    112  337a		       c0 ff		      cpy	#$FF	; aka -1 This is needed so the "zeroth" byte gets added
    113  337c		       d0 f2		      bne	DCS1
    114  337e		       60		      rts
    115  337f
    116  337f
    117  337f							; ==============================================================
    118  337f							; All defaults are NTSC.  This code overrides for PAL.
    119  337f							; ==============================================================
    120  337f
    121  337f				   SETUP_PAL
      0  337f					      PLOT	35,24
      1  337f		       a0 23		      ldy	#35
      2  3381		       a2 18		      ldx	#24
      3  3383		       18		      clc
      4  3384		       20 0a e5 	      jsr	$E50A
      0  3387					      PRINT	CG_RED
      1  3387		       20 f8 47 	      jsr	prns
      2  338a		       1c 00		      dc.b	CG_RED,0
    124  338c
    125  338c		       ad a6 02 	      lda	$2A6
    126  338f		       d0 09		      bne	DOPAL
    127  3391
    128  3391							; NTSC System detected, don't change anything
      0  3391					      PRINT	"NTSC"
      1  3391		       20 f8 47 	      jsr	prns
      2  3394		       4e 54 53 43*	      dc.b	"NTSC",0
    130  3399		       60		      rts
    131  339a
    132  339a							; PAL System detected, make changes
    133  339a				   DOPAL
    134  339a
      0  339a					      PRINT	"PAL"
      1  339a		       20 f8 47 	      jsr	prns
      2  339d		       50 41 4c 00	      dc.b	"PAL",0
    136  33a1		       a9 32		      lda	#50
    137  33a3		       8d 1a 33 	      sta	ONESECOND+1
    138  33a6		       8d 2c 33 	      sta	WAITONE+1
    139  33a9		       a9 05		      lda	#$05
    140  33ab		       8d 43 33 	      sta	TENTHSECOND+1
    141  33ae		       60		      rts
    142  33af
    143  33af				   SETUP_PAL_x
    144  33af		       60		      rts
    145  33b0
    146  33b0
    147  33b0							; ==============================================================
    148  33b0							; Filtered Input routine
    149  33b0							; ==============================================================
    150  33b0
    151  33b0				   TEXT_FILTER
    152  33b0		       20 41 42 43*	      dc.b	" ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.,-+!#$%&'()*",0
    153  33e3
    154  33e3							;Input a string and store it in GOTINPUT, terminated with a null byte.
    155  33e3							;x:a is a pointer to the allowed list of characters, null-terminated.
    156  33e3							;max # of chars in y returns num of chars entered in y.
    157  33e3
    158  33e3				   MAXCHARS
    159  33e3		       00		      dc.b	$00
    160  33e4
    161  33e4				   LASTCHAR
    162  33e4		       00		      dc.b	$00
    163  33e5
    164  33e5		       ff e4	   GETIN      =	$ffe4
    165  33e5
    166  33e5				   FILTERED_TEXT
    167  33e5		       a9 33		      lda	#>TEXT_FILTER
    168  33e7		       a2 b0		      ldx	#<TEXT_FILTER
    169  33e9		       a0 26		      ldy	#38
    170  33eb							;Drop through
    171  33eb
    172  33eb				   FILTERED_INPUT
    173  33eb		       8c e3 33 	      sty	MAXCHARS
    174  33ee		       8e 0b 34 	      stx	CHECKALLOWED+1
    175  33f1		       8d 0c 34 	      sta	CHECKALLOWED+2
    176  33f4
    177  33f4							;Zero characters received.
    178  33f4		       a9 00		      lda	#$00
    179  33f6		       85 69		      sta	INPUT_Y
    180  33f8
    181  33f8							;Wait for a character.
    182  33f8				   INPUT_GET
    183  33f8		       20 e4 ff 	      jsr	GETIN
    184  33fb		       f0 fb		      beq	INPUT_GET
    185  33fd
    186  33fd		       8d e4 33 	      sta	LASTCHAR
    187  3400
    188  3400		       c9 14		      cmp	#$14	;Delete
    189  3402		       f0 33		      beq	DELETE	;TODO
    190  3404
    191  3404		       c9 0d		      cmp	#$0d	;Return
    192  3406		       f0 27		      beq	INPUT_DONE
    193  3408
    194  3408							;Check the allowed list of characters.
    195  3408		       a2 00		      ldx	#$00
    196  340a				   CHECKALLOWED
    197  340a		       bd ff ff 	      lda	$FFFF,x	;Overwritten
    198  340d		       f0 e9		      beq	INPUT_GET	;Reached end of list (0)
    199  340f
    200  340f		       cd e4 33 	      cmp	LASTCHAR
    201  3412		       f0 04		      beq	INPUTOK	;Match found
    202  3414
    203  3414							;Not end or match, keep checking
    204  3414		       e8		      inx
    205  3415		       4c 0a 34 	      jmp	CHECKALLOWED
    206  3418
    207  3418				   INPUTOK
    208  3418		       ad e4 33 	      lda	LASTCHAR	;Get the char back
    209  341b		       a4 69		      ldy	INPUT_Y
    210  341d		       99 f6 30 	      sta	CHATTEXT,y
    211  3420		       20 d2 ff 	      jsr	$ffd2	;Print it
    212  3423
    213  3423		       e6 69		      inc	INPUT_Y	;Next character
    214  3425
    215  3425							;End reached?
    216  3425		       a5 69		      lda	INPUT_Y
    217  3427		       cd e3 33 	      cmp	MAXCHARS
    218  342a		       f0 03		      beq	INPUT_DONE
    219  342c
    220  342c							;Not yet.
    221  342c		       4c f8 33 	      jmp	INPUT_GET
    222  342f
    223  342f				   INPUT_DONE
    224  342f		       a4 69		      ldy	INPUT_Y
    225  3431		       a9 00		      lda	#$00
    226  3433		       99 f6 30 	      sta	CHATTEXT,y	;Zero-terminate
    227  3436		       60		      rts
    228  3437
    229  3437							; Delete last character.
    230  3437				   DELETE
    231  3437							;First, check if we're at the beginning.  If so, just exit.
    232  3437		       a5 69		      lda	INPUT_Y
    233  3439		       d0 03		      bne	DELETE_OK
    234  343b		       4c f8 33 	      jmp	INPUT_GET
    235  343e
    236  343e							;At least one character entered.
    237  343e				   DELETE_OK
    238  343e							;Move pointer back.
    239  343e		       c6 69		      dec	INPUT_Y
    240  3440
    241  3440							;Store a zero, just in case no other characters are entered.
    242  3440		       a4 69		      ldy	INPUT_Y
    243  3442		       a9 00		      lda	#$00
    244  3444		       99 f6 30 	      sta	CHATTEXT,y
    245  3447
    246  3447							;Print the delete char
    247  3447		       a9 14		      lda	#$14
    248  3449		       20 d2 ff 	      jsr	$ffd2
    249  344c
    250  344c							;Wait for next char
    251  344c		       4c f8 33 	      jmp	INPUT_GET
------- FILE duel-main.asm
------- FILE duel-ipaddress.asm LEVEL 2 PASS 2
      0  344f					      include	"duel-ipaddress.asm"
      1  344f							; ======================================
      2  344f							; IP Address Input routine - Schema/AIC
      3  344f							; ======================================
      4  344f
      5  344f							;Converts e.g.
      6  344f							;192.168.1.23
      7  344f							;to
      8  344f							;ABC ABC ABC ABC
      9  344f							;192.168.023.001
     10  344f							;and then to 4 bytes at gotip
     11  344f
     12  344f				   IPADDRESS_FILTER
     13  344f		       31 32 33 34*	      dc.b	"1234567890.",0
     14  345b
     15  345b				   getip
     16  345b		       a9 00		      lda	#$00
     17  345d		       85 cc		      sta	$cc	; Force cursor to flash
     18  345f
     19  345f		       a9 34		      lda	#>IPADDRESS_FILTER
     20  3461		       a2 4f		      ldx	#<IPADDRESS_FILTER
     21  3463		       a0 0f		      ldy	#15
     22  3465		       20 eb 33 	      jsr	FILTERED_INPUT
     23  3468		       20 78 34 	      jsr	CONVERTIP
     24  346b
     25  346b		       a9 01		      lda	#$01
     26  346d		       85 cc		      sta	$cc	; Force cursor to not flash
     27  346f		       60		      rts
     28  3470
     29  3470				   gotip
     30  3470		       00 00 00 00	      dc.b	$00,$00,$00,$00
     31  3474
     32  3474				   IP_OK
     33  3474		       00		      dc.b	$00
     34  3475							;===========================
     35  3475
     36  3475				   DOTS
     37  3475		       00		      dc.b	#$00
     38  3476
     39  3476				   STRINDEX
     40  3476		       00		      dc.b	#$00
     41  3477
     42  3477				   IPINDEX
     43  3477		       00		      dc.b	$00
     44  3478
     45  3478				   CONVERTIP
     46  3478							;First, check that there are three periods '.' in the string.
     47  3478		       a2 00		      ldx	#$00
     48  347a		       8d 75 34 	      sta	DOTS
     49  347d		       8d 77 34 	      sta	IPINDEX
     50  3480		       8d 76 34 	      sta	STRINDEX
     51  3483				   COUNTLOOP
     52  3483		       bd f6 30 	      lda	GOTINPUT,x
     53  3486		       f0 0b		      beq	DONECOUNT	; end of string (0)
     54  3488		       c9 2e		      cmp	#'.
     55  348a		       d0 03		      bne	COUNTNEXT
     56  348c		       ee 75 34 	      inc	DOTS
     57  348f				   COUNTNEXT
     58  348f		       e8		      inx
     59  3490		       4c 83 34 	      jmp	COUNTLOOP
     60  3493
     61  3493				   DONECOUNT
     62  3493		       ad 75 34 	      lda	DOTS
     63  3496		       c9 03		      cmp	#$03
     64  3498		       f0 03		      beq	DOTSOK
     65  349a		       4c f1 34 	      jmp	INVALIDIP
     66  349d
     67  349d
     68  349d							; OK, now pad the values if needed for the conversion, one octet at a time
     69  349d				   DOTSOK
     70  349d
     71  349d							;Init A,B,C with 0
     72  349d				   NEXTBYTE
     73  349d		       a9 00		      lda	#$0
     74  349f		       8d 3d 35 	      sta	A
     75  34a2		       8d 3e 35 	      sta	B
     76  34a5		       8d 3f 35 	      sta	C
     77  34a8
     78  34a8				   BYTELOOP
     79  34a8		       ae 76 34 	      ldx	STRINDEX
     80  34ab		       bd f6 30 	      lda	GOTINPUT,x
     81  34ae		       f0 1b		      beq	ENDOFBYTE	;end of string (0)
     82  34b0		       c9 2e		      cmp	#'.
     83  34b2		       f0 17		      beq	ENDOFBYTE
     84  34b4
     85  34b4							;Shift ABC over
     86  34b4		       ac 3e 35 	      ldy	B
     87  34b7		       8c 3d 35 	      sty	A	;old A is lost
     88  34ba		       ac 3f 35 	      ldy	C
     89  34bd		       8c 3e 35 	      sty	B
     90  34c0		       e9 30		      sbc	#$30	;Convert from PETSCII to equivalent value
     91  34c2		       8d 3f 35 	      sta	C	;insert new digit
     92  34c5
     93  34c5				   NEXTDIGIT
     94  34c5		       ee 76 34 	      inc	STRINDEX
     95  34c8		       4c a8 34 	      jmp	BYTELOOP
     96  34cb
     97  34cb				   ENDOFBYTE
     98  34cb		       20 12 35 	      jsr	dec2hex	;Returns byte in accumulator, carry set if >255
     99  34ce
    100  34ce		       b0 21		      bcs	INVALIDIP
    101  34d0
    102  34d0							;Save the returned byte
    103  34d0		       ac 77 34 	      ldy	IPINDEX
    104  34d3		       99 70 34 	      sta	gotip,y
    105  34d6		       ee 77 34 	      inc	IPINDEX
    106  34d9		       ad 77 34 	      lda	IPINDEX
    107  34dc		       c9 04		      cmp	#$04	;Done
    108  34de		       f0 06		      beq	IP_DONE
    109  34e0
    110  34e0		       ee 76 34 	      inc	STRINDEX	;Skip over the '.'
    111  34e3		       4c 9d 34 	      jmp	NEXTBYTE
    112  34e6
    113  34e6				   IP_DONE
    114  34e6		       a9 01		      lda	#$01
    115  34e8		       8d 74 34 	      sta	IP_OK
    116  34eb		       a9 20		      lda	#$20
    117  34ed		       20 d2 ff 	      jsr	$ffd2	;overwrite cursor detritus
    118  34f0		       60		      rts
    119  34f1
    120  34f1
    121  34f1				   INVALIDIP
      0  34f1					      PRINT	" ",CRLF,CG_RED,"INVALID IP ADDRESS!",CRLF
      1  34f1		       20 f8 47 	      jsr	prns
      2  34f4		       20 0d 1c 49*	      dc.b	" ",CRLF,CG_RED,"INVALID IP ADDRESS!",CRLF,0
    123  350c		       a9 00		      lda	#$00
    124  350e		       8d 74 34 	      sta	IP_OK
    125  3511		       60		      rts
    126  3512
    127  3512
    128  3512							;===================================================
    129  3512							; Convert three-digit decimal (ABC) into a byte
    130  3512							;===================================================
    131  3512
    132  3512				   dec2hex
    133  3512		       ad 3d 35 	      lda	A
    134  3515		       20 40 35 	      jsr	MULT10
    135  3518		       20 40 35 	      jsr	MULT10	;x100
    136  351b		       8d 3a 35 	      sta	TMP0
    137  351e		       ad 3e 35 	      lda	B
    138  3521		       20 40 35 	      jsr	MULT10	;x10
    139  3524		       8d 3b 35 	      sta	TMP1
    140  3527		       ad 3f 35 	      lda	C
    141  352a		       8d 3c 35 	      sta	TMP2	;x1
    142  352d
    143  352d		       18		      clc
    144  352e		       a9 00		      lda	#$00
    145  3530		       6d 3a 35 	      adc	TMP0
    146  3533		       6d 3b 35 	      adc	TMP1
    147  3536		       6d 3c 35 	      adc	TMP2
    148  3539		       60		      rts		;Carry will be set if result was > 255
    149  353a
    150  353a							; ===================
    151  353a
    152  353a				   TMP0
    153  353a		       00		      dc.b	#$00
    154  353b
    155  353b				   TMP1
    156  353b		       00		      dc.b	#$00
    157  353c
    158  353c				   TMP2
    159  353c		       00		      dc.b	#$00
    160  353d
    161  353d				   A			;First digit
    162  353d		       00		      dc.b	#$00
    163  353e
    164  353e				   B			;Second digit
    165  353e		       00		      dc.b	#$00
    166  353f
    167  353f				   C			;Third digit
    168  353f		       00		      dc.b	#$00
    169  3540
    170  3540
    171  3540							; =======================================================================
    172  3540							; Multiply by 10 - from http://www.6502.org/source/integers/fastx10.htm
    173  3540
    174  3540		       0a	   MULT10     ASL		;multiply by 2
    175  3541		       8d 4b 35 	      STA	TEMP10	;temp store in TEMP
    176  3544		       0a		      ASL		;again multiply by 2 (*4)
    177  3545		       0a		      ASL		;again multiply by 2 (*8)
    178  3546		       18		      CLC
    179  3547		       6d 4b 35 	      ADC	TEMP10	;as result, A = x*8 + x*2
    180  354a		       60		      RTS
    181  354b
    182  354b		       00	   TEMP10     .byte.b	0
------- FILE duel-main.asm
------- FILE duel-chat.asm LEVEL 2 PASS 2
      0  354c					      include	"duel-chat.asm"
      1  354c							; duel-chat.asm
      2  354c							; Weather War III Packet Chat routines
      3  354c
      4  354c							; ==============================================================
      5  354c							; Display contents of a chat packet.
      6  354c							; Moved to main game thread.  No longer in IRQ.
      7  354c							; ==============================================================
      8  354c
      9  354c				   SHOWCHATMSG
     10  354c							;First, check for a zero-length chat message.	Ignore if it is.
     11  354c		       ad 63 74 	      lda	INPACKET+$2D	;First byte of message text
     12  354f		       d0 03		      bne	CHATOK
     13  3551		       4c a3 35 	      jmp	SHOWCHATMSG_x
     14  3554
     15  3554				   CHATOK
     16  3554							;Clear the bottom of the screen.
      0  3554					      PLOT	0,24
      1  3554		       a0 00		      ldy	#0
      2  3556		       a2 18		      ldx	#24
      3  3558		       18		      clc
      4  3559		       20 0a e5 	      jsr	$E50A
      0  355c					      PRINT	"					 "
      1  355c		       20 f8 47 	      jsr	prns
      2  355f		       20 20 20 20*	      dc.b	"					 ",0
     19  3587
     20  3587							;Force a zero-termination, no matter what
     21  3587		       a9 00		      lda	#$00
     22  3589		       8d 8a 74 	      sta	INPACKET+$2D+$27	;39 decimal
     23  358c
     24  358c							;Print the message
      0  358c					      PLOT	0,24
      1  358c		       a0 00		      ldy	#0
      2  358e		       a2 18		      ldx	#24
      3  3590		       18		      clc
      4  3591		       20 0a e5 	      jsr	$E50A
      0  3594					      PRINT	CG_YEL
      1  3594		       20 f8 47 	      jsr	prns
      2  3597		       9e 00		      dc.b	CG_YEL,0
      0  3599					      PRINTSTRING	(INPACKET+$2D)
      1  3599		       a0 74		      ldy	#>(INPACKET+$2D)
      2  359b		       a9 63		      lda	#<(INPACKET+$2D)
      3  359d		       20 1e ab 	      jsr	$ab1e
     28  35a0
     29  35a0							; Ping sound
     30  35a0		       20 a8 45 	      jsr	SOUND_CHAT
     31  35a3
     32  35a3				   SHOWCHATMSG_x
     33  35a3							; Clear the packet flags.
     34  35a3		       a9 00		      lda	#$00
     35  35a5		       8d 14 32 	      sta	PACKET_RECEIVED
     36  35a8		       8d 15 32 	      sta	CHAT_RECEIVED
     37  35ab		       60		      rts
     38  35ac
     39  35ac
     40  35ac							; ==============================================================
     41  35ac							; Chat Input - in main game thread.
     42  35ac							; ==============================================================
     43  35ac
     44  35ac				   CHATINPUT
      0  35ac					      PLOT	0,24
      1  35ac		       a0 00		      ldy	#0
      2  35ae		       a2 18		      ldx	#24
      3  35b0		       18		      clc
      4  35b1		       20 0a e5 	      jsr	$E50A
      0  35b4					      PRINT	"					 "
      1  35b4		       20 f8 47 	      jsr	prns
      2  35b7		       20 20 20 20*	      dc.b	"					 ",0
      0  35df					      PLOT	0,24
      1  35df		       a0 00		      ldy	#0
      2  35e1		       a2 18		      ldx	#24
      3  35e3		       18		      clc
      4  35e4		       20 0a e5 	      jsr	$E50A
      0  35e7					      PRINT	158	; Yellow
      1  35e7		       20 f8 47 	      jsr	prns
      2  35ea		       9e 00		      dc.b	158,0
     49  35ec
     50  35ec							;Clear chat text buffer
     51  35ec		       a9 00		      lda	#$00
     52  35ee		       a2 27		      ldx	#$27
     53  35f0				   clearchat1
     54  35f0		       9d f6 30 	      sta	CHATTEXT,x
     55  35f3		       ca		      dex
     56  35f4		       d0 fa		      bne	clearchat1
     57  35f6
     58  35f6		       a9 00		      lda	#$00
     59  35f8		       85 cc		      sta	$cc	; Force cursor to flash
     60  35fa		       8d cc 45 	      sta	JOYOK	; Turn off joystick input
     61  35fd
     62  35fd		       20 e5 33 	      jsr	FILTERED_TEXT
     63  3600
     64  3600							; Could check carry for run-stop
     65  3600		       8c f5 30 	      sty	CHATPACKET+2	; Length returned in y
     66  3603
     67  3603		       a9 01		      lda	#$01
     68  3605		       85 cc		      sta	$cc	; Turn off cursor flashing
     69  3607
     70  3607		       20 1f 31 	      jsr	SENDCHAT	;Send the message and wait for ack
     71  360a
     72  360a							; Ping sound
     73  360a		       20 a8 45 	      jsr	SOUND_CHAT
     74  360d
      0  360d					      PLOT	0,24
      1  360d		       a0 00		      ldy	#0
      2  360f		       a2 18		      ldx	#24
      3  3611		       18		      clc
      4  3612		       20 0a e5 	      jsr	$E50A
      0  3615					      PRINT	"					 "
      1  3615		       20 f8 47 	      jsr	prns
      2  3618		       20 20 20 20*	      dc.b	"					 ",0
     77  3640		       60		      rts
------- FILE duel-main.asm
------- FILE duel-screen.asm LEVEL 2 PASS 2
      0  3641					      include	"duel-screen.asm"
      1  3641							; duel-screen.asm
      2  3641							; Screen+Sprite routines
      3  3641
      4  3641							; Color RAM location of the comms character
      5  3641		       db 95	   COMMSLED   =	$db95
      6  3641
      7  3641				   ORIGSCREEN1
      8  3641					      incbin	"duel-screen.bin"
      9  3a2c
     10  3a2c		       36 43	   ORIGSCREEN =	ORIGSCREEN1+2	; Skip over loading address
     11  3a2c
     12  3a2c				   DRAWORIGSCREEN
     13  3a2c		       a2 00		      ldx	#$00
     14  3a2e				   LOOPSOS
     15  3a2e		       bd 43 36 	      lda	ORIGSCREEN,x
     16  3a31		       9d 00 04 	      sta	$0400,x
     17  3a34
     18  3a34		       bd 43 37 	      lda	ORIGSCREEN+$100,x
     19  3a37		       9d 00 05 	      sta	$0500,x
     20  3a3a
     21  3a3a		       bd 43 38 	      lda	ORIGSCREEN+$200,x
     22  3a3d		       9d 00 06 	      sta	$0600,x
     23  3a40
     24  3a40		       bd 2a 39 	      lda	ORIGSCREEN+$2E7,x
     25  3a43		       9d e7 06 	      sta	$06E7,x
     26  3a46
     27  3a46		       e8		      inx
     28  3a47		       f0 03		      beq	SCREENCOLOR
     29  3a49		       4c 2e 3a 	      jmp	LOOPSOS
     30  3a4c
     31  3a4c				   SCREENCOLOR
     32  3a4c		       bd 19 3c 	      lda	COLORDATA,x
     33  3a4f		       9d 00 d8 	      sta	$d800,x
     34  3a52
     35  3a52		       bd 19 3d 	      lda	COLORDATA+$100,x
     36  3a55		       9d 00 d9 	      sta	$d900,x
     37  3a58
     38  3a58		       bd 19 3e 	      lda	COLORDATA+$200,x
     39  3a5b		       9d 00 da 	      sta	$da00,x
     40  3a5e
     41  3a5e		       bd 00 3f 	      lda	COLORDATA+$2e7,x
     42  3a61		       9d e7 da 	      sta	$dae7,x
     43  3a64
     44  3a64		       e8		      inx
     45  3a65		       f0 03		      beq	DRAW_x
     46  3a67		       4c 4c 3a 	      jmp	SCREENCOLOR
     47  3a6a
     48  3a6a				   DRAW_x
     49  3a6a		       60		      rts
     50  3a6b
     51  3a6b
     52  3a6b		       07 fe	   sprite7point EQU	$07fe
     53  3a6b		       d0 00	   sprite1x   EQU	$D000
     54  3a6b		       d0 01	   sprite1y   EQU	$D001
     55  3a6b		       d0 02	   sprite2x   EQU	$D002
     56  3a6b		       d0 03	   sprite2y   EQU	$D003
     57  3a6b		       d0 0c	   sprite7x   EQU	$D00C
     58  3a6b		       d0 0d	   sprite7y   EQU	$D00D
     59  3a6b		       d0 0e	   sprite8x   EQU	$D00E
     60  3a6b		       d0 0f	   sprite8y   EQU	$D00F
     61  3a6b
     62  3a6b							;------------------------------------------------------------------------------
     63  3a6b							; We are using 4 sprites:
     64  3a6b							; #1 = Player 1
     65  3a6b							; #2 = Player 2
     66  3a6b							; #7 = Explosions, appears on hit
     67  3a6b							; #8 = Bullet (1 at a time), gets turned on and off
     68  3a6b
     69  3a6b				   SETUPSPRITES
     70  3a6b		       a9 03		      lda	#$03	;1+2 only
     71  3a6d		       8d 15 d0 	      sta	$D015
     72  3a70
     73  3a70							; Player 1 default location
     74  3a70		       a2 28		      ldx	#$28
     75  3a72		       a0 95		      ldy	#$95
     76  3a74		       8e 00 d0 	      stx	sprite1x
     77  3a77		       8c 01 d0 	      sty	sprite1y
     78  3a7a
     79  3a7a							; Player 2 default location
     80  3a7a		       a2 da		      ldx	#$DA
     81  3a7c		       a0 a5		      ldy	#$A5
     82  3a7e		       8e 02 d0 	      stx	sprite2x
     83  3a81		       8c 03 d0 	      sty	sprite2y
     84  3a84
     85  3a84							; Hide the 'bullet' and "explosion"
     86  3a84		       a9 00		      lda	#$00
     87  3a86		       8d 0c d0 	      sta	sprite7x
     88  3a89		       8d 0d d0 	      sta	sprite7y
     89  3a8c		       8d 0e d0 	      sta	sprite8x
     90  3a8f		       8d 0f d0 	      sta	sprite8y
     91  3a92
     92  3a92							;Colors - P1 and P2
     93  3a92		       a2 01		      ldx	#$01
     94  3a94		       bd 01 40 	      lda	PLAYERCOLORS,x
     95  3a97		       8d 27 d0 	      sta	$d027
     96  3a9a
     97  3a9a		       a2 02		      ldx	#$02
     98  3a9c		       bd 01 40 	      lda	PLAYERCOLORS,x
     99  3a9f		       8d 28 d0 	      sta	$d028
    100  3aa2
    101  3aa2							;Set explosion to light red
    102  3aa2		       a9 0a		      lda	#$0a
    103  3aa4		       8d 2d d0 	      sta	$d02d
    104  3aa7
    105  3aa7							;This also uses sprite multicolors, so set them here
    106  3aa7		       a9 07		      lda	#$07
    107  3aa9		       8d 25 d0 	      sta	$d025
    108  3aac		       a9 02		      lda	#$02
    109  3aae		       8d 26 d0 	      sta	$d026
    110  3ab1
    111  3ab1							;Set bullet to white
    112  3ab1		       a9 01		      lda	#$01
    113  3ab3		       8d 2e d0 	      sta	$d02e
    114  3ab6
    115  3ab6							;Sprite pointers
    116  3ab6		       a9 0d		      lda	#$0d
    117  3ab8		       8d f8 07 	      sta	$07f8
    118  3abb
    119  3abb		       a9 0e		      lda	#$0e
    120  3abd		       8d f9 07 	      sta	$07f9
    121  3ac0
    122  3ac0		       a9 0f		      lda	#$0f
    123  3ac2		       8d ff 07 	      sta	$07FF
    124  3ac5
    125  3ac5		       a9 a0		      lda	#$A0
    126  3ac7		       8d fe 07 	      sta	sprite7point
    127  3aca
    128  3aca							;Set sprite #7 to multicolor
    129  3aca		       a9 40		      lda	#$40
    130  3acc		       8d 1c d0 	      sta	$d01c
    131  3acf
    132  3acf							;Copy turret sprite data to cassette buffer
    133  3acf		       a2 00		      ldx	#$00
    134  3ad1				   SPRLOOP
    135  3ad1		       bd 59 3b 	      lda	SPRITEDATA,x
    136  3ad4		       9d 40 03 	      sta	$0340,x
    137  3ad7		       e8		      inx
    138  3ad8		       e0 c0		      cpx	#$c0
    139  3ada		       d0 f5		      bne	SPRLOOP
    140  3adc		       60		      rts
    141  3add
    142  3add							;------------------------------------------------------------------------------
    143  3add				   KABOOM
    144  3add		       a9 a0		      lda	#$A0
    145  3adf		       8d fe 07 	      sta	sprite7point
    146  3ae2
    147  3ae2							;Show P1 and P2 and explosion, and hide bullet
    148  3ae2		       a9 43		      lda	#$43
    149  3ae4		       8d 15 d0 	      sta	$D015
    150  3ae7
    151  3ae7							; Centered on old bullet location
    152  3ae7		       ae 0e d0 	      ldx	sprite8x
    153  3aea		       ac 0f d0 	      ldy	sprite8y
    154  3aed		       ca		      dex
    155  3aee		       ca		      dex
    156  3aef		       ca		      dex
    157  3af0		       ca		      dex
    158  3af1		       ca		      dex
    159  3af2		       ca		      dex
    160  3af3		       ca		      dex
    161  3af4		       ca		      dex
    162  3af5		       ca		      dex
    163  3af6		       ca		      dex
    164  3af7		       ca		      dex
    165  3af8		       88		      dey
    166  3af9		       88		      dey
    167  3afa		       88		      dey
    168  3afb		       88		      dey
    169  3afc		       88		      dey
    170  3afd		       88		      dey
    171  3afe		       88		      dey
    172  3aff		       88		      dey
    173  3b00		       88		      dey
    174  3b01		       8e 0c d0 	      stx	sprite7x
    175  3b04		       8c 0d d0 	      sty	sprite7y
    176  3b07
    177  3b07		       a2 00		      ldx	#$00
    178  3b09		       8e 46 3b 	      stx	SHAKECOUNT
    179  3b0c
    180  3b0c		       a9 01		      lda	#$01
    181  3b0e		       8d 01 dd 	      sta	$dd01
    182  3b11
    183  3b11				   BOOMLOOP
    184  3b11							; Slow the action down so we can actually see it
    185  3b11		       20 42 33 	      jsr	TENTHSECOND
    186  3b14		       ee fe 07 	      inc	sprite7point
    187  3b17
    188  3b17		       ad 45 3b 	      lda	SHAKE
    189  3b1a		       f0 12		      beq	BLOOP1
    190  3b1c
    191  3b1c							;Shake screen
    192  3b1c		       ae 46 3b 	      ldx	SHAKECOUNT
    193  3b1f		       bd 47 3b 	      lda	SHAKE_X,x
    194  3b22		       8d 16 d0 	      sta	$d016
    195  3b25		       bd 50 3b 	      lda	SHAKE_Y,x
    196  3b28		       8d 11 d0 	      sta	$d011
    197  3b2b		       ee 46 3b 	      inc	SHAKECOUNT
    198  3b2e
    199  3b2e				   BLOOP1
    200  3b2e		       ad fe 07 	      lda	sprite7point
    201  3b31		       c9 a9		      cmp	#$A9
    202  3b33		       d0 dc		      bne	BOOMLOOP
    203  3b35
    204  3b35							;Turn off all sprites except P1 and P2
    205  3b35		       a9 03		      lda	#$03	;1+2 only
    206  3b37		       8d 15 d0 	      sta	$D015
    207  3b3a		       a9 00		      lda	#$00
    208  3b3c		       8d 45 3b 	      sta	SHAKE
    209  3b3f
    210  3b3f		       a9 00		      lda	#$00
    211  3b41		       8d 01 dd 	      sta	$dd01
    212  3b44		       60		      rts
    213  3b45
    214  3b45							; Future - clear the spot on screen where we hit (still buggy)
    215  3b45							;  ldx sprite8x
    216  3b45							;  lda SPRITE2CHAR_X,x
    217  3b45							;  sta CHARX
    218  3b45
    219  3b45							;  ldy sprite8y
    220  3b45							;  lda SPRITE2CHAR_Y,y
    221  3b45							;  sty CHARY
    222  3b45							;
    223  3b45							;  ldy CHARY
    224  3b45							;  ldx CHARX
    225  3b45							;  clc
    226  3b45							;  jsr $E50A  ; PLOT
    227  3b45							;  PRINT " "
    228  3b45							;  rts
    229  3b45
    230  3b45				   SHAKE
    231  3b45		       00		      dc.b	#$00
    232  3b46
    233  3b46				   SHAKECOUNT
    234  3b46		       00		      dc.b	#$00
    235  3b47
    236  3b47							; 9 frames of shaking
    237  3b47				   SHAKE_X
    238  3b47		       09 0e 0f 0d*	      dc.b	$09,$0E,$0F,$0D,$0B,$0C,$0A,$09,$08
    239  3b50
    240  3b50				   SHAKE_Y
    241  3b50		       1c 1d 1f 1c*	      dc.b	$1C,$1D,$1F,$1C,$1E,$18,$19,$1A,$1B
    242  3b59
    243  3b59							;------------------------------------------------------------------------------
    244  3b59				   SPRITEDATA
    245  3b59					      incbin	"duel-sprites.bin"
    246  3c19
    247  3c19				   COLORDATA
    248  3c19		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFF"
    249  3c41		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFNNNNNNNNNF"
    250  3c69		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFNNNNNBBBBF"
    251  3c91		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFF"
    252  3cb9		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFLLLLLLLLLF"
    253  3ce1		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFLLLLLLLLLF"
    254  3d09		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFLLLLLLLLLF"
    255  3d31		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFLLLLLLLLLF"
    256  3d59		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFLLLLLLLLLF"
    257  3d81		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFLLLLLLLLLF"
    258  3da9		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFLLLLLLLLLF"
    259  3dd1		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFLLLLLLLLLF"
    260  3df9		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFLLLLLLLLLF"
    261  3e21		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFLLLLLLLLLF"
    262  3e49		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFLLLLLLLLLF"
    263  3e71		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEEEEEEEEEF"
    264  3e99		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEEEEEEEEEF"
    265  3ec1		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEEEEEEEEEF"
    266  3ee9		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEEEEEEEEEF"
    267  3f11		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEEEEEEEEEF"
    268  3f39		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEEEEEEEEEF"
    269  3f61		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFEEEEEEEEF"
    270  3f89		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFANNNNNOKAF"
    271  3fb1		       45 45 45 45*	      dc.b	"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFF"
    272  3fd9		       47 47 47 47*	      dc.b	"GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"
    273  4001
    274  4001							; 255 to 100 mapping - putting it here causes the game to lock up????
    275  4001							; dc.b 00,00,00,01,01,01,02,02,03,03,03,04,04,05,05,05
    276  4001							; dc.b 06,06,07,07,07,8,8,9,9,9,10,10,11,11,11,12
    277  4001							; dc.b 12,13,13,13,14,14,15,15,15,16,16,16,17,17,18,18
    278  4001							; dc.b 18,19,19,20,20,20,21,21,22,22,22,23,23,24,24,24
    279  4001							; dc.b 25,25,26,26,26,27,27,28,28,28,29,29,30,30,30,31
    280  4001							; dc.b 31,32,32,32,33,33,33,34,34,35,35,35,36,36,37,37
    281  4001							; dc.b 37,38,38,39,39,39,40,40,41,41,41,42,42,43,43,43
    282  4001							; dc.b 44,44,45,45,45,46,46,47,47,47,48,48,49,49,49,50
    283  4001							; dc.b 50,50,51,51,52,52,52,53,53,54,54,54,55,55,56,56
    284  4001							; dc.b 56,57,57,58,58,58,59,59,60,60,60,61,61,62,62,62
    285  4001							; dc.b 63,63,64,64,64,65,65,66,66,66,67,67,67,68,68,69
    286  4001							; dc.b 69,69,70,70,71,71,71,72,72,73,73,73,74,74,75,75
    287  4001							; dc.b 75,76,76,77,77,77,78,78,79,79,79,80,80,81,81,81
    288  4001							; dc.b 82,82,83,83,83,84,84,84,85,85,86,86,86,87,87,88
    289  4001							; dc.b 88,88,89,89,90,90,90,91,91,92,92,92,93,93,94,94
    290  4001							; dc.b 94,95,95,96,96,96,97,97,98,98,98,99,99,100,100,100
    291  4001
    292  4001				   PLAYERCOLORS
    293  4001		       01 07 0a 	      dc.b	$01,$07,$0A
    294  4004
    295  4004							;CHARX
    296  4004							;  dc.b 0
    297  4004							;CHARY
    298  4004							; dc.b 0
    299  4004
    300  4004							;SPRITE2CHAR_X
    301  4004							;  dc.b 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1
    302  4004							;  dc.b 1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24
    303  4004							;  dc.b 24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28
    304  4004
    305  4004							;SPRITE2CHAR_Y
    306  4004							;  dc.b 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3
    307  4004							;  dc.b 4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24
    308  4004
    309  4004							;------------------------------------------------------------------------------
    310  4004							; Routine to display the current wind speed and direction.
    311  4004							;------------------------------------------------------------------------------
    312  4004
    313  4004				   SHOWWEATHER
      0  4004					      PLOT	10,23
      1  4004		       a0 0a		      ldy	#10
      2  4006		       a2 17		      ldx	#23
      3  4008		       18		      clc
      4  4009		       20 0a e5 	      jsr	$E50A
      0  400c					      PRINT	CG_GRN, CG_RVS, "	    "
      1  400c		       20 f8 47 	      jsr	prns
      2  400f		       1e 12 20 20*	      dc.b	CG_GRN, CG_RVS, "	    ",0
      0  401c					      PLOT	10,23
      1  401c		       a0 0a		      ldy	#10
      2  401e		       a2 17		      ldx	#23
      3  4020		       18		      clc
      4  4021		       20 0a e5 	      jsr	$E50A
      0  4024					      PRINT	"WIND "
      1  4024		       20 f8 47 	      jsr	prns
      2  4027		       57 49 4e 44*	      dc.b	"WIND ",0
    318  402d
    319  402d		       ad d7 2d 	      lda	CLOUDLOC
    320  4030		       d0 09		      bne	WPLUS
    321  4032
    322  4032				   WMINUS
      0  4032					      PRINT	"- "
      1  4032		       20 f8 47 	      jsr	prns
      2  4035		       2d 20 00 	      dc.b	"- ",0
    324  4038		       4c 41 40 	      jmp	SHOWWEATHER_x
    325  403b
    326  403b				   WPLUS
      0  403b					      PRINT	"+ "
      1  403b		       20 f8 47 	      jsr	prns
      2  403e		       2b 20 00 	      dc.b	"+ ",0
    328  4041
    329  4041				   SHOWWEATHER_x
      0  4041					      PRINTBYTE	WINDSPEED
      1  4041		       a2 00		      ldx	#$00
      2  4043		       a0 0a		      ldy	#$0a
      3  4045		       ad d8 2d 	      lda	WINDSPEED
      4  4048		       20 ff 49 	      jsr	printnum
      0  404b					      PRINT	CG_NRM
      1  404b		       20 f8 47 	      jsr	prns
      2  404e		       92 00		      dc.b	CG_NRM,0
    332  4050		       60		      rts
------- FILE duel-main.asm
------- FILE duel-trajectory.asm LEVEL 2 PASS 2
      0  4051					      include	"duel-trajectory.asm"
      1  4051							;------------------------------------------------------------------------------
      2  4051							; Plot and animate the bullet trajectory
      3  4051							; Also do collisions etc
      4  4051
      5  4051				   SHOWBULLET
      6  4051		       20 fd 44 	      jsr	SOUND_FIRE
      0  4054					      PLOT	0,0
      1  4054		       a0 00		      ldy	#0
      2  4056		       a2 00		      ldx	#0
      3  4058		       18		      clc
      4  4059		       20 0a e5 	      jsr	$E50A
      8  405c
      9  405c							; So whose turn is it,and which player# are they?
     10  405c		       ad 8a 2e 	      lda	MYTURN
     11  405f		       f0 09		      beq	NOTMYTURN
     12  4061
     13  4061		       ad 5a 2a 	      lda	MYPLAYERNUM
     14  4064		       8d 70 41 	      sta	playernum
     15  4067		       4c 70 40 	      jmp	doparameters
     16  406a
     17  406a				   NOTMYTURN
     18  406a		       ad 59 2a 	      lda	OPP_PLAYERNUM
     19  406d		       8d 70 41 	      sta	playernum
     20  4070
     21  4070							; This code could be optimized
     22  4070				   doparameters
     23  4070
     24  4070		       ad 70 41 	      lda	playernum
     25  4073		       c9 02		      cmp	#$02	; Left side of screen?  (p1)
     26  4075		       f0 15		      beq	player2	; No, right side  (p2)
     27  4077
     28  4077		       ad 00 d0 	      lda	$d000	; Top-left of tower.  Move it over and down a bit.
     29  407a		       18		      clc
     30  407b		       69 05		      adc	#$05
     31  407d		       8d ae 40 	      sta	startx
     32  4080
     33  4080		       ad 01 d0 	      lda	$d001
     34  4083		       18		      clc
     35  4084		       69 10		      adc	#$10
     36  4086		       8d af 40 	      sta	starty
     37  4089		       4c 9e 40 	      jmp	paramscontd
     38  408c
     39  408c				   player2
     40  408c		       ad 02 d0 	      lda	$d002	; Top-left of tower.  Move it over and down a bit.
     41  408f		       18		      clc
     42  4090		       69 05		      adc	#$05
     43  4092		       8d ae 40 	      sta	startx
     44  4095
     45  4095		       ad 03 d0 	      lda	$d003
     46  4098		       18		      clc
     47  4099		       69 10		      adc	#$10
     48  409b		       8d af 40 	      sta	starty
     49  409e
     50  409e				   paramscontd
     51  409e		       ad b0 40 	      lda	WEAPONANGLE
     52  40a1		       8d b0 40 	      sta	angle
     53  40a4
     54  40a4		       ad b1 40 	      lda	WEAPONPOWER
     55  40a7		       4a		      lsr		; divide by 2
     56  40a8		       8d b1 40 	      sta	power
     57  40ab
     58  40ab		       4c 73 41 	      jmp	trajectory
     59  40ae
     60  40ae							;------------------------------------------------------------------------------
     61  40ae							; Input Parameters
     62  40ae
     63  40ae				   startx
     64  40ae		       00		      .byte.b	$00
     65  40af
     66  40af				   starty
     67  40af		       00		      .byte.b	$00
     68  40b0
     69  40b0							; tacky, need to fix up labels
     70  40b0				   WEAPONANGLE
     71  40b0				   angle		;degrees
     72  40b0		       00		      dc.b	$00
     73  40b1
     74  40b1				   WEAPONPOWER
     75  40b1				   power
     76  40b1		       00		      dc.b	$00
     77  40b2
     78  40b2							;------------------------------------------------------------------------------
     79  40b2							; Lookup tables for SIN/COS, from lookup.xls
     80  40b2
     81  40b2				   sinbyte
     82  40b2		       00 04 08 0d*	      .byte.b	0,4,8,13,17,22,26,31,35,39,44,48,53,57,61,65,70,74,78,83,87,91,95,99,103,107,111,115,119,123,127,131,135,138,142,146,149,153,156,160,163,167,170,173,177,180,183,186,189,192,195,198,200,203,206,208,211,213,216,218,220,223,225,227,229,231,232,234,236,238,239,241,242,243,245,246,247,248,249,250,251,251,252,253,253,254,254,254,254,254,255
     83  410d
     84  410d				   cosbyte
     85  410d		       ff fe fe fe*	      .byte.b	255,254,254,254,254,254,253,253,252,251,251,250,249,248,247,246,245,243,242,241,239,238,236,234,232,231,229,227,225,223,220,218,216,213,211,208,206,203,200,198,195,192,189,186,183,180,177,173,170,167,163,160,156,153,149,146,142,138,135,131,127,123,119,115,111,107,103,99,95,91,87,83,78,74,70,65,61,57,53,48,44,39,35,31,26,22,17,13,8,4,0
     86  4168
     87  4168							;------------------------------------------------------------------------------
     88  4168							; "Variables"
     89  4168
     90  4168				   curx 		;X-position
     91  4168		       00 00		      .byte.b	$00,$00	; First byte is "fraction", second byte is "integer"
     92  416a
     93  416a				   cury 		;Y-position
     94  416a		       00 00		      .byte.b	$00,$00	; First byte is "fraction", second byte is "integer"
     95  416c
     96  416c				   dy			; Y component of current speed
     97  416c		       00 00		      .byte.b	$00,$00	; low/high, as above
     98  416e
     99  416e				   dx			; X component of current speed
    100  416e		       00 00		      .byte.b	$00,$00	; low/high
    101  4170
    102  4170				   playernum		; Whose turn is it?
    103  4170		       00		      .byte.b	$00
    104  4171
    105  4171				   nocollis		; Temporarily hold off $d01e to give the bullet time to get past shooter's sprite
    106  4171		       00		      .byte.b	$00
    107  4172
    108  4172				   windcounter
    109  4172		       00		      .byte.b	$00
    110  4173
    111  4173							;------------------------------------------------------------------------------
    112  4173							; "Function"
    113  4173
    114  4173				   trajectory
    115  4173							;Start the sprite/sprite collision suppression countdown
    116  4173		       a9 30		      lda	#$30	;trial and error
    117  4175		       8d 71 41 	      sta	nocollis
    118  4178
    119  4178							;Show bullet sprite
    120  4178		       ad 15 d0 	      lda	$d015
    121  417b		       09 80		      ora	#$80
    122  417d		       8d 15 d0 	      sta	$D015
    123  4180
    124  4180							;Reset the wind counter
    125  4180		       20 df 44 	      jsr	RESETWINDCOUNTER
    126  4183
    127  4183							; Current object position - 16 bits
    128  4183		       ad ae 40 	      lda	startx
    129  4186		       8d 69 41 	      sta	curx+1
    130  4189		       8d 0e d0 	      sta	sprite8x	;Actually set the sprite position too
    131  418c		       a9 00		      lda	#$00
    132  418e		       8d 68 41 	      sta	curx
    133  4191
    134  4191		       ad af 40 	      lda	starty
    135  4194		       8d 6b 41 	      sta	cury+1
    136  4197		       8d 0f d0 	      sta	sprite8y	;Actually set the sprite position too
    137  419a		       a9 00		      lda	#$00
    138  419c		       8d 6a 41 	      sta	cury
    139  419f
    140  419f							; Clear sprite collision registers by reading them - moved down so sprite is shown already
    141  419f		       ad 1e d0 	      lda	$d01e	; sprite-sprite
    142  41a2		       ad 1f d0 	      lda	$d01f	; background
    143  41a5
    144  41a5							; Sin and cos were swapped to rotate the input 90 degrees
    145  41a5							; Break speed into component vectors - Y
    146  41a5		       ae b0 40 	      ldx	angle
    147  41a8		       bd b2 40 	      lda	sinbyte,x	; Get sin(angle) from lookup table
    148  41ab		       ac b1 40 	      ldy	power
    149  41ae		       20 a3 44 	      jsr	multiply8x8
    150  41b1		       8e 6c 41 	      stx	dy	; Low byte
    151  41b4		       8d 6d 41 	      sta	dy+1	; High byte
    152  41b7
    153  41b7							; Break speed into component vectors - X
    154  41b7		       ae b0 40 	      ldx	angle
    155  41ba		       bd 0d 41 	      lda	cosbyte,x	; Get cos(angle) from lookup table
    156  41bd		       ac b1 40 	      ldy	power
    157  41c0		       20 a3 44 	      jsr	multiply8x8
    158  41c3		       8e 6e 41 	      stx	dx	; Low byte
    159  41c6		       8d 6f 41 	      sta	dx+1	; High byte
    160  41c9
    161  41c9							; Negate dy because "up" is negative on the screen
    162  41c9							; 16 bit Binary Negation
    163  41c9		       38		      SEC		;Ensure carry is set
    164  41ca		       a9 00		      LDA	#0	;Load constant zero
    165  41cc		       ed 6c 41 	      SBC	dy+0	;... subtract the least significant byte
    166  41cf		       8d 6c 41 	      STA	dy+0	;... and store the result
    167  41d2		       a9 00		      LDA	#0	;Load constant zero again
    168  41d4		       ed 6d 41 	      SBC	dy+1	;... subtract the most significant byte
    169  41d7		       8d 6d 41 	      STA	dy+1	;... and store the result
    170  41da
    171  41da		       ad 70 41 	      lda	playernum
    172  41dd		       c9 02		      cmp	#$02
    173  41df		       d0 11		      bne	trajloop
    174  41e1							; If playernum = 2, also negate dx so shot goes left
    175  41e1							; 16 bit Binary Negation
    176  41e1		       38		      SEC		;Ensure carry is set
    177  41e2		       a9 00		      LDA	#0	;Load constant zero
    178  41e4		       ed 6e 41 	      SBC	dx+0	;... subtract the least significant byte
    179  41e7		       8d 6e 41 	      STA	dx+0	;... and store the result
    180  41ea		       a9 00		      LDA	#0	;Load constant zero again
    181  41ec		       ed 6f 41 	      SBC	dx+1	;... subtract the most significant byte
    182  41ef		       8d 6f 41 	      STA	dx+1	;... and store the result
    183  41f2
    184  41f2				   trajloop
    185  41f2							; Display on screen
    186  41f2		       ae 69 41 	      ldx	curx+1	; high byte
    187  41f5		       ac 6b 41 	      ldy	cury+1	; high byte
    188  41f8		       8e 0e d0 	      stx	sprite8x
    189  41fb		       8c 0f d0 	      sty	sprite8y
    190  41fe
    191  41fe							; Slow the action down so we can actually see it
    192  41fe		       a0 00		      ldy	#$00
    193  4200				   slowdown
    194  4200		       ea		      nop
    195  4201		       ea		      nop
    196  4202		       ea		      nop
    197  4203		       ea		      nop
    198  4204		       ea		      nop
    199  4205		       ea		      nop
    200  4206		       ea		      nop
    201  4207		       ea		      nop
    202  4208		       ea		      nop
    203  4209		       ea		      nop
    204  420a		       ea		      nop
    205  420b		       88		      dey
    206  420c		       d0 f2		      bne	slowdown
    207  420e
    208  420e							; Move the object - 16-bit addition
    209  420e							; X component
    210  420e		       18		      clc
    211  420f		       ad 68 41 	      lda	curx
    212  4212		       6d 6e 41 	      adc	dx
    213  4215		       8d 68 41 	      sta	curx
    214  4218		       ad 69 41 	      lda	curx+1
    215  421b		       6d 6f 41 	      adc	dx+1
    216  421e		       8d 69 41 	      sta	curx+1
    217  4221
    218  4221							; Y component
    219  4221		       18		      clc
    220  4222		       ad 6a 41 	      lda	cury
    221  4225		       6d 6c 41 	      adc	dy
    222  4228		       8d 6a 41 	      sta	cury
    223  422b		       ad 6b 41 	      lda	cury+1
    224  422e		       6d 6d 41 	      adc	dy+1
    225  4231		       8d 6b 41 	      sta	cury+1
    226  4234
    227  4234							; Check for collision with background
    228  4234		       ad 1f d0 	      lda	$d01f
    229  4237		       29 80		      and	#$80
    230  4239		       f0 03		      beq	NOCOLLIS1	;zero, meaning no collision
    231  423b
    232  423b							;Hit the ground!
    233  423b		       4c 10 43 	      jmp	MISSED
    234  423e
    235  423e				   NOCOLLIS1
    236  423e							;Check if the bullet's probably cleared the first sprite
    237  423e		       ad 71 41 	      lda	nocollis
    238  4241		       d0 13		      bne	NOCOLLISX
    239  4243
    240  4243							;Check for collisions between sprites
    241  4243		       ad 1e d0 	      lda	$d01e
    242  4246		       f0 17		      beq	CHECKOOB	; None
    243  4248
    244  4248				   CHECKP1
    245  4248		       c9 81		      cmp	#$81	;Player 1
    246  424a		       d0 03		      bne	CHECKP2
    247  424c		       4c 56 43 	      jmp	PLAYER1HIT
    248  424f
    249  424f				   CHECKP2
    250  424f		       c9 82		      cmp	#$82	;Player 2
    251  4251		       d0 0c		      bne	CHECKOOB
    252  4253		       4c a7 43 	      jmp	PLAYER2HIT
    253  4256
    254  4256				   NOCOLLISX
    255  4256							; Clear collision registers by reading them
    256  4256		       ad 1e d0 	      lda	$d01e
    257  4259		       ad 1f d0 	      lda	$d01f
    258  425c		       ce 71 41 	      dec	nocollis	; Count down...
    259  425f
    260  425f				   CHECKOOB
    261  425f							;Check for out of bounds -
    262  425f
    263  425f							; Left side is easy for x due to the wrap (also handles right)
    264  425f		       18		      clc
    265  4260		       ad 69 41 	      lda	curx+1
    266  4263		       e9 14		      sbc	#20	; decimal  - 24 is edge of screen, give some leeway
    267  4265		       b0 03		      bcs	gravity	; Didn't have to borrow
    268  4267
    269  4267		       4c d3 42 	      jmp	OUTOFBOUNDS
    270  426a							;Top is allowed, for dramatic effect of the bullet disappearing
    271  426a
    272  426a							; Simulate gravity -----------------------------------------------------
    273  426a				   gravity
    274  426a		       ee 6c 41 	      inc	dy	; Smallest possible
    275  426d		       d0 03		      bne	wind	; dy (low byte) did not wrap around to zero
    276  426f		       ee 6d 41 	      inc	dy+1	; increment the high byte
    277  4272
    278  4272							; Simulate wind -----------------------------------------------------
    279  4272				   wind
    280  4272							; Decrement the countdown
    281  4272		       ce 72 41 	      dec	windcounter
    282  4275		       d0 20		      bne	endloop	;Not zero yet, keep counting
    283  4277
    284  4277							;Zero.  Reset counter for next pass, and fall through to code that affects the speed.
    285  4277		       20 df 44 	      jsr	RESETWINDCOUNTER
    286  427a
    287  427a				   wind_direction		; Determine direction
    288  427a		       ad d7 2d 	      lda	CLOUDLOC
    289  427d		       d0 10		      bne	wind_positive
    290  427f
    291  427f							;wind_negative
    292  427f		       ce 6e 41 	      dec	dx	; Smallest possible
    293  4282		       ae 6e 41 	      ldx	dx
    294  4285		       e0 ff		      cpx	#$FF
    295  4287		       d0 0e		      bne	endloop	; dx (low byte) did not wrap around to -1 (FF)
    296  4289		       ce 6f 41 	      dec	dx+1	; decrement the high byte
    297  428c		       4c 97 42 	      jmp	endloop
    298  428f
    299  428f				   wind_positive		; Positive (to right) - works perfectly
    300  428f		       ee 6e 41 	      inc	dx	; Smallest possible
    301  4292		       d0 03		      bne	endloop	; dx (low byte) did not wrap around to zero
    302  4294		       ee 6f 41 	      inc	dx+1	; increment the high byte
    303  4297
    304  4297				   endloop
    305  4297		       4c f2 41 	      jmp	trajloop
    306  429a
    307  429a							;Exit routine.
    308  429a				   traj_x
    309  429a							;Turn off bullet sprite
    310  429a		       a9 03		      lda	#$03
    311  429c		       8d 15 d0 	      sta	$D015
    312  429f
    313  429f							; Clear any messages
      0  429f					      PLOT	0,24
      1  429f		       a0 00		      ldy	#0
      2  42a1		       a2 18		      ldx	#24
      3  42a3		       18		      clc
      4  42a4		       20 0a e5 	      jsr	$E50A
      0  42a7					      PRINT	"					 "
      1  42a7		       20 f8 47 	      jsr	prns
      2  42aa		       20 20 20 20*	      dc.b	"					 ",0
    316  42d2		       60		      rts
    317  42d3
    318  42d3							; -------------------------------------------------------------------------
    319  42d3							; The various ways the shot can end.
    320  42d3
    321  42d3				   OUTOFBOUNDS
    322  42d3		       20 65 45 	      jsr	SOUND_BOUNDS
      0  42d6					      PLOT	0,24
      1  42d6		       a0 00		      ldy	#0
      2  42d8		       a2 18		      ldx	#24
      3  42da		       18		      clc
      4  42db		       20 0a e5 	      jsr	$E50A
      0  42de					      PRINT	28, "		 OUT OF BOUNDS! 	     "
      1  42de		       20 f8 47 	      jsr	prns
      2  42e1		       1c 20 20 20*	      dc.b	28, "		 OUT OF BOUNDS! 	     ",0
    325  430a		       20 19 33 	      jsr	ONESECOND
    326  430d		       4c 9a 42 	      jmp	traj_x
    327  4310
    328  4310				   MISSED
    329  4310		       20 22 45 	      jsr	SOUND_MISSED
      0  4313					      PLOT	0,24
      1  4313		       a0 00		      ldy	#0
      2  4315		       a2 18		      ldx	#24
      3  4317		       18		      clc
      4  4318		       20 0a e5 	      jsr	$E50A
      0  431b					      PRINT	28, "		      MISSED!		     "
      1  431b		       20 f8 47 	      jsr	prns
      2  431e		       1c 20 20 20*	      dc.b	28, "		      MISSED!		     ",0
    332  4347		       ad 1e d0 	      lda	$d01e	;Clear sprite flags by reading them
    333  434a		       20 dd 3a 	      jsr	KABOOM
    334  434d		       20 0c 44 	      jsr	CHECKMINOR
    335  4350		       20 19 33 	      jsr	ONESECOND
    336  4353		       4c 9a 42 	      jmp	traj_x
    337  4356
    338  4356				   PLAYER1HIT
    339  4356		       20 84 45 	      jsr	SOUND_DIRECT
      0  4359					      PLOT	0,24
      1  4359		       a0 00		      ldy	#0
      2  435b		       a2 18		      ldx	#24
      3  435d		       18		      clc
      4  435e		       20 0a e5 	      jsr	$E50A
      0  4361					      PRINT	28, "	     DIRECT HIT ON PLAYER 1!	     "
      1  4361		       20 f8 47 	      jsr	prns
      2  4364		       1c 20 20 20*	      dc.b	28, "	     DIRECT HIT ON PLAYER 1!	     ",0
    342  438d		       a9 01		      lda	#$01
    343  438f		       8d 45 3b 	      sta	SHAKE
    344  4392		       20 dd 3a 	      jsr	KABOOM
    345  4395		       20 19 33 	      jsr	ONESECOND
    346  4398
    347  4398							; Am I player one?
    348  4398		       ad 5a 2a 	      lda	MYPLAYERNUM
    349  439b		       c9 01		      cmp	#$01
    350  439d		       d0 05		      bne	P1DONE	; No, exit (other player will calc health and send to me)
    351  439f
    352  439f		       a9 14		      lda	#20
    353  43a1		       20 f8 43 	      jsr	IWASHIT
    354  43a4
    355  43a4				   P1DONE
    356  43a4		       4c 9a 42 	      jmp	traj_x
    357  43a7
    358  43a7				   PLAYER2HIT
    359  43a7		       20 84 45 	      jsr	SOUND_DIRECT
      0  43aa					      PLOT	0,24
      1  43aa		       a0 00		      ldy	#0
      2  43ac		       a2 18		      ldx	#24
      3  43ae		       18		      clc
      4  43af		       20 0a e5 	      jsr	$E50A
      0  43b2					      PRINT	28, "	     DIRECT HIT ON PLAYER 2!	     "
      1  43b2		       20 f8 47 	      jsr	prns
      2  43b5		       1c 20 20 20*	      dc.b	28, "	     DIRECT HIT ON PLAYER 2!	     ",0
    362  43de		       a9 01		      lda	#$01
    363  43e0		       8d 45 3b 	      sta	SHAKE
    364  43e3		       20 dd 3a 	      jsr	KABOOM
    365  43e6		       20 19 33 	      jsr	ONESECOND
    366  43e9
    367  43e9							; Am I player two?
    368  43e9		       ad 5a 2a 	      lda	MYPLAYERNUM
    369  43ec		       c9 02		      cmp	#$02
    370  43ee		       d0 05		      bne	P2DONE	; No, exit (other player will calc health and send to me)
    371  43f0
    372  43f0		       a9 14		      lda	#20
    373  43f2		       20 f8 43 	      jsr	IWASHIT
    374  43f5
    375  43f5							;Screen etc. updated in main game loop
    376  43f5				   P2DONE
    377  43f5		       4c 9a 42 	      jmp	traj_x
    378  43f8
    379  43f8							;---------------------------------------------------------------------
    380  43f8							; I was hit!  Take off "a" health from me and return.
    381  43f8				   IWASHIT
    382  43f8		       8d 00 44 	      sta	DAMAGE+1	;Self-modifying code
    383  43fb		       38		      sec
    384  43fc		       ad 8d 2e 	      lda	MYHEALTH
    385  43ff				   DAMAGE
    386  43ff		       e9 00		      sbc	#$00	;Overwritten above
    387  4401		       8d 8d 2e 	      sta	MYHEALTH
    388  4404
    389  4404							;Keep value above 0
    390  4404		       10 05		      bpl	IWASHIT_x	; Result still positive
    391  4406
    392  4406		       a9 00		      lda	#$00
    393  4408		       8d 8d 2e 	      sta	MYHEALTH	;Will still end the game
    394  440b
    395  440b							;Screen etc. updated in main game loop
    396  440b				   IWASHIT_x
    397  440b		       60		      rts
    398  440c
    399  440c							;---------------------------------------------------------------------
    400  440c							;Check for minor damage from near misses.
    401  440c				   CHECKMINOR
    402  440c							;Check for collisions between sprites
    403  440c		       ad 1e d0 	      lda	$d01e
    404  440f		       d0 03		      bne	CHECKP1M
    405  4411		       4c 9e 44 	      jmp	CHECKMINOR_x	; None
    406  4414
    407  4414				   CHECKP1M
    408  4414		       c9 41		      cmp	#$41	;Explosion and Player 1
    409  4416		       d0 41		      bne	CHECKP2M
      0  4418					      PLOT	0,24
      1  4418		       a0 00		      ldy	#0
      2  441a		       a2 18		      ldx	#24
      3  441c		       18		      clc
      4  441d		       20 0a e5 	      jsr	$E50A
      0  4420					      PRINT	28, "	     MINOR DAMAGE TO PLAYER 1	     "
      1  4420		       20 f8 47 	      jsr	prns
      2  4423		       1c 20 20 20*	      dc.b	28, "	     MINOR DAMAGE TO PLAYER 1	     ",0
    412  444c
    413  444c							; Am I player one?
    414  444c		       ad 5a 2a 	      lda	MYPLAYERNUM
    415  444f		       c9 01		      cmp	#$01
    416  4451		       d0 4b		      bne	CHECKMINOR_x	; No, exit (other player will calc health and send to me)
    417  4453
    418  4453		       a9 0a		      lda	#10	;decimal
    419  4455		       20 f8 43 	      jsr	IWASHIT
    420  4458		       60		      rts
    421  4459
    422  4459				   CHECKP2M
    423  4459		       c9 42		      cmp	#$42	;Explosion and Player 2
    424  445b		       d0 41		      bne	CHECKMINOR_x
      0  445d					      PLOT	0,24
      1  445d		       a0 00		      ldy	#0
      2  445f		       a2 18		      ldx	#24
      3  4461		       18		      clc
      4  4462		       20 0a e5 	      jsr	$E50A
      0  4465					      PRINT	28, "	     MINOR DAMAGE TO PLAYER 2	     "
      1  4465		       20 f8 47 	      jsr	prns
      2  4468		       1c 20 20 20*	      dc.b	28, "	     MINOR DAMAGE TO PLAYER 2	     ",0
    427  4491
    428  4491							; Am I player two?
    429  4491		       ad 5a 2a 	      lda	MYPLAYERNUM
    430  4494		       c9 02		      cmp	#$02
    431  4496		       d0 06		      bne	CHECKMINOR_x	; No, exit (other player will calc health and send to me)
    432  4498
    433  4498		       a9 0a		      lda	#10	;decimal
    434  449a		       20 f8 43 	      jsr	IWASHIT
    435  449d		       60		      rts
    436  449e
    437  449e				   CHECKMINOR_x
    438  449e		       60		      rts
    439  449f
    440  449f							; ---------------------------------------------------------------------
    441  449f							; 8x8 Bit Multiplication
    442  449f							;
    443  449f							; Input: Byte1 in Val1
    444  449f							;	    Byte 2 in Val2
    445  449f							;
    446  449f							; Output: Erg
    447  449f							; ---------------------------------------------------------------------
    448  449f
    449  449f				   Val1
    450  449f		       00		      .byte.b	$00
    451  44a0
    452  44a0				   Val2
    453  44a0		       00		      .byte.b	$00
    454  44a1
    455  44a1				   Erg
    456  44a1		       00 00		      .byte.b	$00, $00
    457  44a3
    458  44a3				   multiply8x8
    459  44a3		       8d 9f 44 	      sta	Val1
    460  44a6		       8c a0 44 	      sty	Val2
    461  44a9		       20 bf 44 	      jsr	Mul8
    462  44ac
    463  44ac
    464  44ac							;Scale the result to get greater input range
    465  44ac		       a2 05		      ldx	#$05	; Scale factor = 2^x
    466  44ae				   scaleloop
    467  44ae		       18		      clc		; Carry = 0
    468  44af		       6e a2 44 	      ror	Erg+1	; Carry = old bit 0 of high byte
    469  44b2		       6e a1 44 	      ror	Erg	; Bit 7 = Carry
    470  44b5		       ca		      dex
    471  44b6		       d0 f6		      bne	scaleloop
    472  44b8
    473  44b8		       ae a1 44 	      ldx	Erg
    474  44bb		       ad a2 44 	      lda	Erg+1
    475  44be		       60		      rts
    476  44bf
    477  44bf							; --- Original routine from Schlowski on Denial
    478  44bf				   Mul8
    479  44bf		       a9 00		      lda	#$00
    480  44c1		       a0 08		      ldy	#8
    481  44c3				   Mul8Lp
    482  44c3		       0a		      asl
    483  44c4		       2e 9f 44 	      rol	Val1
    484  44c7		       90 09		      bcc	Mul8L1
    485  44c9		       18		      clc
    486  44ca		       6d a0 44 	      adc	Val2
    487  44cd		       90 03		      bcc	Mul8L1
    488  44cf		       ee 9f 44 	      inc	Val1
    489  44d2				   Mul8L1
    490  44d2		       88		      dey
    491  44d3		       d0 ee		      bne	Mul8Lp
    492  44d5		       8d a1 44 	      sta	Erg
    493  44d8		       ad 9f 44 	      lda	Val1
    494  44db		       8d a2 44 	      sta	Erg+1
    495  44de		       60		      rts
    496  44df
    497  44df				   RESETWINDCOUNTER
    498  44df							;Intead of 0 to 100, make it 100 to 0
    499  44df		       38		      sec
    500  44e0		       a9 64		      lda	#100
    501  44e2		       ed d8 2d 	      sbc	WINDSPEED
    502  44e5
    503  44e5		       8d 72 41 	      sta	windcounter
    504  44e8		       ee 72 41 	      inc	windcounter	; So it's never 0
    505  44eb		       60		      rts
------- FILE duel-main.asm
------- FILE duel-soundfx.asm LEVEL 2 PASS 2
      0  44ec					      include	"duel-soundfx.asm"
      1  44ec							; Sound Effects
      2  44ec
      3  44ec							;------------------------------------------------------------------------------
      4  44ec							; Setup - clear sound chip and set maximum volume!
      5  44ec
      6  44ec				   SOUND_SETUP
      7  44ec		       a2 00		      ldx	#$00
      8  44ee		       8a		      txa
      9  44ef				   SETUP1
     10  44ef		       9d 00 d4 	      sta	$d400,x
     11  44f2		       e8		      inx
     12  44f3		       e0 19		      cpx	#$19
     13  44f5		       d0 f8		      bne	SETUP1
     14  44f7
     15  44f7		       a9 0f		      lda	#$0f
     16  44f9		       8d 18 d4 	      sta	$d418
     17  44fc		       60		      rts
     18  44fd
     19  44fd							;------------------------------------------------------------------------------
     20  44fd							; Fire Cannon - use Voice 1
     21  44fd
     22  44fd				   SOUND_FIRE
     23  44fd		       a9 0f		      lda	#$0f
     24  44ff		       8d 18 d4 	      sta	$d418
     25  4502		       a9 00		      lda	#$00
     26  4504		       8d 05 d4 	      sta	$d405
     27  4507		       a9 0a		      lda	#$0A
     28  4509		       8d 06 d4 	      sta	$d406
     29  450c		       a9 05		      lda	#$05
     30  450e		       8d 01 d4 	      sta	$d401
     31  4511		       ad b1 40 	      lda	power
     32  4514		       8d 00 d4 	      sta	$d400
     33  4517		       a9 81		      lda	#$81
     34  4519		       8d 04 d4 	      sta	$d404
     35  451c		       a9 80		      lda	#$80
     36  451e		       8d 04 d4 	      sta	$d404
     37  4521		       60		      rts
     38  4522
     39  4522
     40  4522
     41  4522							;------------------------------------------------------------------------------
     42  4522							; Hit the Ground - use Voice 2
     43  4522
     44  4522				   SOUND_MISSED
     45  4522		       a9 0f		      lda	#$0f
     46  4524		       8d 18 d4 	      sta	$d418
     47  4527		       a9 0f		      lda	#$0f
     48  4529		       8d 0c d4 	      sta	$d40c
     49  452c		       a9 0b		      lda	#$0B
     50  452e		       8d 0d d4 	      sta	$d40d
     51  4531		       a9 02		      lda	#$02
     52  4533		       8d 08 d4 	      sta	$d408
     53  4536		       a9 00		      lda	#$00
     54  4538		       8d 07 d4 	      sta	$d407
     55  453b		       a9 81		      lda	#$81
     56  453d		       8d 0b d4 	      sta	$d40b
     57  4540		       a9 80		      lda	#$80
     58  4542		       8d 0b d4 	      sta	$d40b
     59  4545		       60		      rts
     60  4546
     61  4546
     62  4546							;------------------------------------------------------------------------------
     63  4546							; Move turret - use Voice 1  Don't use A as we're inside joystick routine.
     64  4546
     65  4546				   SOUND_TURRET
     66  4546		       a2 00		      ldx	#$00
     67  4548		       8e 05 d4 	      stx	$d405
     68  454b		       a2 f8		      ldx	#$f8
     69  454d		       8e 06 d4 	      stx	$d406
     70  4550		       a2 03		      ldx	#$03
     71  4552		       8e 01 d4 	      stx	$d401
     72  4555		       a2 00		      ldx	#$00
     73  4557		       8e 00 d4 	      stx	$d400
     74  455a		       a2 21		      ldx	#$21
     75  455c		       8e 04 d4 	      stx	$d404
     76  455f		       a2 20		      ldx	#$20
     77  4561		       8e 04 d4 	      stx	$d404
     78  4564		       60		      rts
     79  4565
     80  4565
     81  4565				   ------------------------------------------------------------------------------
     82  4565							; Out of bounds swish - use Voice 2
     83  4565
     84  4565				   SOUND_BOUNDS
     85  4565		       a9 0f		      lda	#$0f
     86  4567		       8d 0c d4 	      sta	$d40c
     87  456a		       a9 0b		      lda	#$0B
     88  456c		       8d 0d d4 	      sta	$d40d
     89  456f		       a9 10		      lda	#$10
     90  4571		       8d 08 d4 	      sta	$d408
     91  4574		       a9 00		      lda	#$00
     92  4576		       8d 07 d4 	      sta	$d407
     93  4579		       a9 81		      lda	#$81
     94  457b		       8d 0b d4 	      sta	$d40b
     95  457e		       a9 80		      lda	#$80
     96  4580		       8d 0b d4 	      sta	$d40b
     97  4583		       60		      rts
     98  4584
     99  4584
    100  4584							;------------------------------------------------------------------------------
    101  4584							; Direct Hit!! - use Voice 2
    102  4584
    103  4584				   SOUND_DIRECT
    104  4584		       a9 0f		      lda	#$0f
    105  4586		       8d 18 d4 	      sta	$d418
    106  4589		       a9 0f		      lda	#$0f
    107  458b		       8d 0c d4 	      sta	$d40c
    108  458e		       a9 0b		      lda	#$0B
    109  4590		       8d 0d d4 	      sta	$d40d
    110  4593		       a9 01		      lda	#$01
    111  4595		       8d 08 d4 	      sta	$d408
    112  4598		       a9 00		      lda	#$00
    113  459a		       8d 07 d4 	      sta	$d407
    114  459d		       a9 81		      lda	#$81
    115  459f		       8d 0b d4 	      sta	$d40b
    116  45a2		       a9 80		      lda	#$80
    117  45a4		       8d 0b d4 	      sta	$d40b
    118  45a7		       60		      rts
    119  45a8
    120  45a8							;------------------------------------------------------------------------------
    121  45a8							; Incoming chat message - voice 2
    122  45a8
    123  45a8				   SOUND_CHAT
    124  45a8		       a9 0f		      lda	#$0f
    125  45aa		       8d 18 d4 	      sta	$d418
    126  45ad		       a9 01		      lda	#$01
    127  45af		       8d 0c d4 	      sta	$d40c
    128  45b2		       a9 07		      lda	#$07
    129  45b4		       8d 0d d4 	      sta	$d40d
    130  45b7		       a9 30		      lda	#$30
    131  45b9		       8d 08 d4 	      sta	$d408
    132  45bc		       a9 00		      lda	#$00
    133  45be		       8d 07 d4 	      sta	$d407
    134  45c1		       a9 11		      lda	#$11
    135  45c3		       8d 0b d4 	      sta	$d40b
    136  45c6		       a9 10		      lda	#$10
    137  45c8		       8d 0b d4 	      sta	$d40b
    138  45cb		       60		      rts
------- FILE duel-main.asm
------- FILE duel-joystick.asm LEVEL 2 PASS 2
      0  45cc					      include	"duel-joystick.asm"
      1  45cc
      2  45cc							;Flag that the joystick may be used for input
      3  45cc				   JOYOK
      4  45cc		       00		      .byte.b	$00
      5  45cd
      6  45cd							; Rate at which joystick moves - higher = slower movement
      7  45cd				   JOYCOUNT
      8  45cd		       08		      .byte.b	$08
      9  45ce
     10  45ce							;This holds the joystick button
     11  45ce				   JOYBUTTON
     12  45ce		       00		      .byte.b	$00
     13  45cf
     14  45cf							; This is called from inside the interrupt!
     15  45cf				   READJOYSTICK 		; Thanks Jason aka TMR/C0S
     16  45cf
     17  45cf		       ad cc 45 	      lda	JOYOK	; At a part of the game where joystick input is allowed
     18  45d2		       d0 03		      bne	CHECKJOYCOUNT
     19  45d4				   RX
     20  45d4		       4c 34 46 	      jmp	JOY_OUT1
     21  45d7
     22  45d7				   CHECKJOYCOUNT
     23  45d7		       ce cd 45 	      dec	JOYCOUNT
     24  45da		       d0 f8		      bne	RX
     25  45dc		       a9 08		      lda	#$08
     26  45de		       8d cd 45 	      sta	JOYCOUNT
     27  45e1							; Drop through
     28  45e1
     29  45e1		       ad 00 dc 	      lda	$dc00	; Port 2
     30  45e4				   up
     31  45e4		       4a		      lsr
     32  45e5		       b0 0d		      bcs	down
     33  45e7							; do up here, don't use A
     34  45e7
     35  45e7							;Check range
     36  45e7		       ae 8b 2e 	      ldx	MYANGLE
     37  45ea		       e0 5a		      cpx	#90	;Decimal
     38  45ec		       f0 06		      beq	down
     39  45ee
     40  45ee		       ee 8b 2e 	      inc	MYANGLE
     41  45f1		       20 46 45 	      jsr	SOUND_TURRET
     42  45f4
     43  45f4				   down
     44  45f4		       4a		      lsr
     45  45f5		       b0 0b		      bcs	left
     46  45f7							; do down here, don't use A
     47  45f7
     48  45f7							;Check range
     49  45f7		       ae 8b 2e 	      ldx	MYANGLE
     50  45fa		       f0 06		      beq	left	;Zero
     51  45fc
     52  45fc		       ce 8b 2e 	      dec	MYANGLE
     53  45ff		       20 46 45 	      jsr	SOUND_TURRET
     54  4602
     55  4602				   left
     56  4602		       4a		      lsr
     57  4603		       b0 0b		      bcs	right
     58  4605							; do left here, don't use A
     59  4605
     60  4605							;Check range
     61  4605		       ae 8c 2e 	      ldx	MYPOWER
     62  4608		       f0 06		      beq	right	;zero
     63  460a
     64  460a		       ce 8c 2e 	      dec	MYPOWER
     65  460d		       20 46 45 	      jsr	SOUND_TURRET
     66  4610
     67  4610				   right
     68  4610		       4a		      lsr
     69  4611		       b0 0d		      bcs	fire
     70  4613							; do right here, don't use A
     71  4613
     72  4613							;Check range
     73  4613		       ae 8c 2e 	      ldx	MYPOWER
     74  4616		       e0 64		      cpx	#100	;Decimal
     75  4618		       f0 06		      beq	fire
     76  461a
     77  461a		       ee 8c 2e 	      inc	MYPOWER
     78  461d		       20 46 45 	      jsr	SOUND_TURRET
     79  4620
     80  4620				   fire
     81  4620		       4a		      lsr
     82  4621		       b0 05		      bcs	JOY_OUT
     83  4623							; do firing here
     84  4623		       a2 01		      ldx	#$01
     85  4625		       8e ce 45 	      stx	JOYBUTTON
     86  4628
     87  4628				   JOY_OUT
     88  4628							;For fun - use Shift as an alternate fire button.
     89  4628							;This way Shift-Lock can be used as a demo mode.
     90  4628		       ad 8e 02 	      lda	$028e
     91  462b		       c9 01		      cmp	#$01
     92  462d		       d0 05		      bne	JOY_OUT1
     93  462f		       a2 01		      ldx	#$01
     94  4631		       8e ce 45 	      stx	JOYBUTTON
     95  4634
     96  4634				   JOY_OUT1
     97  4634		       60		      rts
------- FILE duel-main.asm
------- FILE SIXNET.ASM LEVEL 2 PASS 2
      0  4635					      include	"SIXNET.ASM"
      1  4635							;Source by Six of Style (Oliver VieBrooks)		 _,.-------.,_
      2  4635							;http://style64.org				     ,;~'	      '~;,
      3  4635							;http://thedarkside.ath.cx			   ,;			  ;,
      4  4635							;mailto:six@darklordsofchaos.com		  ;			    ;
      5  4635							;Last Updated 11/29/2006			 ,'	  Style 2006	    ',
      6  4635							;						,;			     ;,
      7  4635							;						; ;	 .	     .	    ; ;
      8  4635							;						| ;   ______	   ______   ; |
      9  4635							;						|  `/~"     ~" . "~	"~\'  |
     10  4635							;						|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     11  4635							;						 |   |	      }:{	 |   |
     12  4635							;						 |   !	     / | \	 !   |
     13  4635							;						 .~  (__,.--" .^. "--.,__)  ~.
     14  4635							;						 |     ---;' / | \ `;---     |
     15  4635							;						  \__.	     \/^\/	 .__/
     16  4635							;						   V| \ 		/ |V
     17  4635							;						    | |T~\___!___!___/~T| |
     18  4635							;						    | |`IIII_I_I_I_IIII'| |
     19  4635							;						    |  \,III I I I III,/  |
     20  4635							;						     \	 `~~~~~~~~~~'	 /
     21  4635							;						       \   .	   .   /
     22  4635							;							 \.    ^    ./
     23  4635							;							   ^~~~^~~~^
     24  4635
     25  4635							; (LB) - removed some crap
     26  4635
     27  4635				   OLDSTART
     28  4635							;	jsr LOAD_CONFIG
     29  4635							;	jsr initTOD
     30  4635							;	jsr net_init
     31  4635							;	bcs S_1
     32  4635							;	jsr irq_init
     33  4635							;	PRINT 13,"aUTOCONFIGURE WITH dhcp? "
     34  4635							;	jsr yesno
     35  4635							;	beq S_2
     36  4635							;	cmp #$02
     37  4635							;	beq S_1
     38  4635							;	PRINT 13,"dhcp iNIT"
     39  4635							;	jsr DHCP_DISCOVER
     40  4635							;	jsr getanykey
     41  4635							;
     42  4635							;S_2	jsr get_macs
     43  4635							;	bcc S_0
     44  4635							;	ERROR "could not resolve gateway mac!"
     45  4635							;	jmp S_1
     46  4635							;S_0
     47  4635							;	jsr MENU (LB)
     48  4635							;S_1	PRINT 13,"eXITING.",13
     49  4635							;	rts
     50  4635
     51  4635				   net_init
     52  4635		       20 a5 4e 	      jsr	CARD_DETECT
     53  4638		       b0 5d		      bcs	detect_ERROR
     54  463a		       c9 01		      cmp	#$01
     55  463c		       d0 17		      bne	f_RR
      0  463e					      PRINT	CG_GRN,"ETH64 DETECTED",CRLF
      1  463e		       20 f8 47 	      jsr	prns
      2  4641		       1e 45 54 48*	      dc.b	CG_GRN,"ETH64 DETECTED",CRLF,0
     57  4652		       4c 7a 46 	      jmp	init
      0  4655				   f_RR       PRINT	CG_RED,"RR-NET COMPATIBLE CARD DETECTED",CRLF
      1  4655		       20 f8 47 	      jsr	prns
      2  4658		       1c 52 52 2d*	      dc.b	CG_RED,"RR-NET COMPATIBLE CARD DETECTED",CRLF,0
     59  467a		       20 d7 4e    init       jsr	CARD_INIT
     60  467d		       b0 39		      bcs	init_ERROR
      0  467f					      PRINT	CG_RED,"CARD INITIALIZED",CRLF
      1  467f		       20 f8 47 	      jsr	prns
      2  4682		       1c 43 41 52*	      dc.b	CG_RED,"CARD INITIALIZED",CRLF,0
     62  4695		       18		      clc
     63  4696		       60		      rts
     64  4697
     65  4697				   detect_ERROR
      0  4697					      ERROR	"NO CARD WAS DETECTED!"
      1  4697		       20 f8 47 	      jsr	prns
      2  469a		       0d 1c 12 4e*	      dc.b	13,CG_RED,CG_RVS,"NO CARD WAS DETECTED!",CG_NRM,CG_WHT,13,0
     67  46b6		       38		      sec
     68  46b7		       60		      rts
     69  46b8				   init_ERROR
      0  46b8					      ERROR	"ERROR DURING INITIALIZATION!"
      1  46b8		       20 f8 47 	      jsr	prns
      2  46bb		       0d 1c 12 45*	      dc.b	13,CG_RED,CG_RVS,"ERROR DURING INITIALIZATION!",CG_NRM,CG_WHT,13,0
     71  46de		       38		      sec
     72  46df		       60		      rts
     73  46e0
     74  46e0				   get_macs		;returns carry clear if success, set if error
     75  46e0							;get MAC for gateway
     76  46e0		       a9 33		      lda	#<CARD_GATE
     77  46e2		       a2 4f		      ldx	#>CARD_GATE
     78  46e4		       20 a6 51 	      jsr	GET_ARP
     79  46e7		       b0 0f		      bcs	getmacs_ERR
     80  46e9							;copy gateway mac
     81  46e9		       a2 00		      ldx	#$00
     82  46eb				   gm_0
     83  46eb		       bd 1a 50 	      lda	ARP_MAC,x
     84  46ee		       9d 4b 4f 	      sta	CARD_GATE_MAC,x
     85  46f1		       e8		      inx
     86  46f2		       e0 06		      cpx	#$06
     87  46f4		       d0 f5		      bne	gm_0
     88  46f6		       18		      clc
     89  46f7		       60		      rts
     90  46f8				   getmacs_ERR
     91  46f8		       38		      sec
     92  46f9		       60		      rts
     93  46fa
     94  46fa				   initTOD
     95  46fa		       ad 0f dc 	      lda	$dc0f
     96  46fd		       29 7f		      and	#$7f
     97  46ff		       8d 0f dc 	      sta	$dc0f
     98  4702		       a9 00		      lda	#$00
     99  4704		       8d 08 dc 	      sta	$dc08
    100  4707		       60		      rts
    101  4708
    102  4708				   irq_init
    103  4708		       78		      sei
    104  4709		       a9 01		      lda	#$01
    105  470b		       8d 19 d0 	      sta	$d019
    106  470e		       8d 1a d0 	      sta	$d01a
    107  4711		       a9 1b		      lda	#$1b
    108  4713		       8d 11 d0 	      sta	$d011
    109  4716		       a9 7f		      lda	#$7f
    110  4718		       8d 0d dc 	      sta	$dc0d
    111  471b		       a9 31		      lda	#$31
    112  471d		       8d 12 d0 	      sta	$d012
    113  4720		       a9 2c		      lda	#<IRQ
    114  4722		       8d 14 03 	      sta	$0314
    115  4725		       a9 47		      lda	#>IRQ
    116  4727		       8d 15 03 	      sta	$0315
    117  472a		       58		      cli
    118  472b		       60		      rts
    119  472c
    120  472c							;===========================
    121  472c							; Several changes by (LB)
    122  472c							;===========================
    123  472c
    124  472c				   IRQ
    125  472c		       ee 19 d0 	      inc	$d019
    126  472f		       a9 31		      lda	#$31
    127  4731		       8d 12 d0 	      sta	$d012
    128  4734
    129  4734		       20 cf 45 	      jsr	READJOYSTICK
    130  4737
    131  4737		       20 ea 4e 	      jsr	CARD_POLL
    132  473a		       f0 03		      beq	IRQx
    133  473c
    134  473c		       20 42 47 	      jsr	IRQ_PACKET
    135  473f				   IRQx
    136  473f		       4c 31 ea 	      jmp	$ea31
    137  4742
    138  4742							; Alternate code suggested by Fungus - save if we need it
    139  4742							; Note that cursor won't flash in chat mode properly
    140  4742							;IRQx
    141  4742							;  jsr $FF9F  ;Scan keys, since we're not using ea31
    142  4742							;	 jmp $ea81  ;was jmp $ea31
    143  4742
    144  4742							;==================
    145  4742
    146  4742				   IRQ_PACKET
    147  4742		       20 fd 4e 	      jsr	CARD_READ
    148  4745		       20 6a 4f 	      jsr	MAC_PROCESS
    149  4748		       60		      rts
    150  4749
    151  4749
    152  4749				   killirq
    153  4749		       78		      sei
    154  474a		       ee 19 d0 	      inc	$d019	;ack any pending vic irq
    155  474d		       20 81 ff 	      jsr	$ff81
    156  4750		       a9 31		      lda	#$31
    157  4752		       8d 14 03 	      sta	$0314
    158  4755		       a9 ea		      lda	#$ea
    159  4757		       8d 15 03 	      sta	$0315
    160  475a		       58		      cli
      0  475b					      PRINT	"NETIRQ KILLED", CRLF
      1  475b		       20 f8 47 	      jsr	prns
      2  475e		       4e 45 54 49*	      dc.b	"NETIRQ KILLED", CRLF,0
    162  476d		       60		      rts
    163  476e							;=============================================================================
    164  476e							;MAIN MENU - Removed by (LB)
    165  476e							;=============================================================================
    166  476e
    167  476e							;=============================================================================
    168  476e							;VARIABLES AND DATA
    169  476e
    170  476e		       00	   pingcount  dc.b	$00
    171  476f		       00	   TIMEOUT    dc.b	$00
    172  4770		       00	   TICKER     dc.b	$00
    173  4771							;=============================================================================
    174  4771							;INCLUDES
------- FILE checksum.asm LEVEL 3 PASS 2
      0  4771					      include	"checksum.asm"
      1  4771
      2  4771
      3  4771
      4  4771
      5  4771		       00 00	   MakeChecksumZp_Len dc.w	$0000
      6  4773		       00 00	   MakeChecksumZp_Sum dc.w	$0000
      7  4775
      8  4775				   MakeChecksum
      9  4775							;clear sum
     10  4775		       a0 00		      ldy	#0
     11  4777		       8c 73 47 	      sty	MakeChecksumZp_Sum
     12  477a		       8c 74 47 	      sty	MakeChecksumZp_Sum+1
     13  477d
     14  477d				   MakeChecksum_Page
     15  477d							;less than a page to go?
     16  477d		       ad 72 47 	      lda	MakeChecksumZp_Len+1
     17  4780		       f0 0c		      beq	MakeChecksum_Rest
     18  4782
     19  4782		       a2 00		      ldx	#0	;do full page
     20  4784		       20 a0 47 	      jsr	MakeChksum	;checksum current page
     21  4787
     22  4787		       e6 6b		      inc	MakeChecksumZp_Ptr+1	;next page
     23  4789		       ce 72 47 	      dec	MakeChecksumZp_Len+1	;one less page to do
     24  478c		       d0 ef		      bne	MakeChecksum_Page	;If it's not the last page, do it again
     25  478e
     26  478e				   MakeChecksum_Rest		;checksum remaining <page bytes
     27  478e		       ae 71 47 	      ldx	MakeChecksumZp_Len
     28  4791		       20 a0 47 	      jsr	MakeChksum
     29  4794
     30  4794							;put sum in x:a, eor'ed by #$ffff
     31  4794		       ad 74 47 	      lda	MakeChecksumZp_Sum+1
     32  4797		       49 ff		      eor	#$ff
     33  4799		       aa		      tax
     34  479a		       ad 73 47 	      lda	MakeChecksumZp_Sum
     35  479d		       49 ff		      eor	#$ff
     36  479f		       60		      rts
     37  47a0
     38  47a0
     39  47a0				   MakeChksum
     40  47a0		       18		      clc
     41  47a1				   MakeChksum0
     42  47a1		       b1 6a		      lda	(MakeChecksumZp_Ptr),y
     43  47a3		       6d 73 47 	      adc	MakeChecksumZp_Sum
     44  47a6		       8d 73 47 	      sta	MakeChecksumZp_Sum
     45  47a9		       c8		      iny
     46  47aa		       ca		      dex
     47  47ab		       f0 16		      beq	MakeChksum2
     48  47ad
     49  47ad		       b1 6a		      lda	(MakeChecksumZp_Ptr),y
     50  47af		       6d 74 47 	      adc	MakeChecksumZp_Sum+1
     51  47b2		       8d 74 47 	      sta	MakeChecksumZp_Sum+1
     52  47b5		       c8		      iny
     53  47b6		       ca		      dex
     54  47b7		       d0 e8		      bne	MakeChksum0
     55  47b9
     56  47b9				   MakeChksum1
     57  47b9		       a9 00		      lda	#0
     58  47bb		       6d 73 47 	      adc	MakeChecksumZp_Sum
     59  47be		       8d 73 47 	      sta	MakeChecksumZp_Sum
     60  47c1		       90 0a		      bcc	MakeChksum3
     61  47c3				   MakeChksum2
     62  47c3		       a9 00		      lda	#0
     63  47c5		       6d 74 47 	      adc	MakeChecksumZp_Sum+1
     64  47c8		       8d 74 47 	      sta	MakeChecksumZp_Sum+1
     65  47cb		       b0 ec		      bcs	MakeChksum1
     66  47cd
     67  47cd				   MakeChksum3
     68  47cd		       60		      rts
     69  47ce
------- FILE SIXNET.ASM
------- FILE utils.asm LEVEL 3 PASS 2
      0  47ce					      include	"utils.asm"
      1  47ce							;Source by Six of Style (Oliver VieBrooks)
      2  47ce							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  47ce							;
      4  47ce							;Last Updated 8/24/2005
      5  47ce
      6  47ce
      7  47ce				   getanykey
      0  47ce					      PRINT	13,146,5,"PRESS ANY KEY TO CONTINUE",13	;(LB)
      1  47ce		       20 f8 47 	      jsr	prns
      2  47d1		       0d 92 05 50*	      dc.b	13,146,5,"PRESS ANY KEY TO CONTINUE",13,0
      9  47ef				   gak0
     10  47ef		       20 e4 ff 	      jsr	GETIN
     11  47f2		       f0 fb		      beq	gak0
     12  47f4		       60		      rts
     13  47f5
     14  47f5		       00	   px	      dc.b	$00
     15  47f6		       00	   py	      dc.b	$00
     16  47f7		       00	   pa	      dc.b	$00
     17  47f8
     18  47f8				   prns
     19  47f8		       8d f7 47 	      sta	pa
     20  47fb		       8e f5 47 	      stx	px
     21  47fe		       8c f6 47 	      sty	py
     22  4801
     23  4801							;jsr CLRCHN (LB) was causing problems with IDE64, also see iprns below
     24  4801		       68		      pla
     25  4802		       8d 12 48 	      sta	addr$+1
     26  4805		       68		      pla
     27  4806		       8d 13 48 	      sta	addr$+2
     28  4809		       ee 12 48    loop$      inc	addr$+1
     29  480c		       d0 03		      bne	addr$
     30  480e		       ee 13 48 	      inc	addr$+2
     31  4811		       ad aa aa    addr$      lda	$aaaa
     32  4814		       f0 06		      beq	out$
     33  4816		       20 d2 ff 	      jsr	CHROUT
     34  4819		       4c 09 48 	      jmp	loop$
     35  481c		       ad 13 48    out$       lda	addr$+2
     36  481f		       48		      pha
     37  4820		       ad 12 48 	      lda	addr$+1
     38  4823		       48		      pha
     39  4824
     40  4824		       ad f7 47 	      lda	pa
     41  4827		       ae f5 47 	      ldx	px
     42  482a		       ac f6 47 	      ldy	py
     43  482d
     44  482d		       60		      rts
     45  482e
     46  482e							;print null terminated string found at x:a
     47  482e				   pnts
     48  482e		       8d 37 48 	      sta	pnts_0+1
     49  4831		       8e 38 48 	      stx	pnts_0+2
     50  4834							;jsr CLRCHN   (LB) was causing problems on IDE64, also see iprns below
     51  4834		       a2 00		      ldx	#$00
     52  4836		       bd ff ff    pnts_0     lda	$ffff,x
     53  4839		       f0 06		      beq	pntsx
     54  483b		       20 d2 ff 	      jsr	CHROUT
     55  483e		       4c 36 48 	      jmp	pnts_0
     56  4841				   pntsx
     57  4841		       60		      rts
     58  4842
     59  4842							;Duplicate PRNS used from IRQ to avoid crossover
     60  4842		       00	   ipx	      dc.b	$00
     61  4843		       00	   ipy	      dc.b	$00
     62  4844		       00	   ipa	      dc.b	$00
     63  4845				   iprns
     64  4845		       8d 44 48 	      sta	ipa
     65  4848		       8e 42 48 	      stx	ipx
     66  484b		       8c 43 48 	      sty	ipy
     67  484e
     68  484e							;jsr CLRCHN
     69  484e		       68		      pla
     70  484f		       8d 5f 48 	      sta	iaddr$+1
     71  4852		       68		      pla
     72  4853		       8d 60 48 	      sta	iaddr$+2
     73  4856		       ee 5f 48    iloop$     inc	iaddr$+1
     74  4859		       d0 03		      bne	iaddr$
     75  485b		       ee 60 48 	      inc	iaddr$+2
     76  485e		       ad aa aa    iaddr$     lda	$aaaa
     77  4861		       f0 06		      beq	iout$
     78  4863		       20 d2 ff 	      jsr	CHROUT
     79  4866		       4c 56 48 	      jmp	iloop$
     80  4869		       ad 60 48    iout$      lda	iaddr$+2
     81  486c		       48		      pha
     82  486d		       ad 5f 48 	      lda	iaddr$+1
     83  4870		       48		      pha
     84  4871
     85  4871		       ad 44 48 	      lda	ipa
     86  4874		       ae 42 48 	      ldx	ipx
     87  4877		       ac 43 48 	      ldy	ipy
     88  487a
     89  487a		       60		      rts
     90  487b
     91  487b		       00 00	   as0	      dc.b	$00,$00
     92  487d		       00 00	   as1	      dc.b	$00,$00
     93  487f		       00 00	   res	      dc.b	$00,$00
     94  4881
     95  4881				   add16		;adds two 16-bit numbers (as0 + as1), returns 16-bit result in x:a
     96  4881		       18		      clc
     97  4882		       ad 7b 48 	      lda	as0
     98  4885		       6d 7d 48 	      adc	as1
     99  4888		       48		      pha
    100  4889		       ad 7c 48 	      lda	as0+$01
    101  488c		       6d 7e 48 	      adc	as1+$01
    102  488f		       aa		      tax
    103  4890		       68		      pla
    104  4891		       60		      rts
    105  4892
    106  4892				   sub16		;subtracts two 16-bit numbers (as0-as1), returns 16-bit result in x:a
    107  4892		       38		      sec
    108  4893		       ad 7b 48 	      lda	as0
    109  4896		       ed 7d 48 	      sbc	as1
    110  4899		       48		      pha
    111  489a		       ad 7c 48 	      lda	as0+$01
    112  489d		       ed 7e 48 	      sbc	as1+$01
    113  48a0		       aa		      tax
    114  48a1		       68		      pla
    115  48a2		       60		      rts
    116  48a3
    117  48a3				   copybytes		; takes y bytes at x:a and transfers it to address in as0 (lo:hi)
    118  48a3		       8e bc 48 	      stx	copybytes1+$02
    119  48a6		       8d bb 48 	      sta	copybytes1+$01
    120  48a9		       8c c3 48 	      sty	copybytes2+$01
    121  48ac		       ad 7b 48 	      lda	as0
    122  48af		       8d be 48 	      sta	as2+$01
    123  48b2		       ad 7c 48 	      lda	as0+$01
    124  48b5		       8d bf 48 	      sta	as2+$02
    125  48b8		       a2 00		      ldx	#$00
    126  48ba				   copybytes1
    127  48ba		       bd ff ff 	      lda	$ffff,x
    128  48bd		       9d ff ff    as2	      sta	$ffff,x
    129  48c0		       c8		      iny
    130  48c1		       e8		      inx
    131  48c2				   copybytes2
    132  48c2		       e0 ff		      cpx	#$ff
    133  48c4		       d0 f4		      bne	copybytes1
    134  48c6		       60		      rts
    135  48c7
    136  48c7		       00 00	   CPY_LEN    dc.b	$00,$00
    137  48c9				   copyblock		;src=CPY_SRC, dst=CPY_DST, len in x:a
    138  48c9		       8e c8 48 	      stx	CPY_LEN+1
    139  48cc		       8d c7 48 	      sta	CPY_LEN
    140  48cf
    141  48cf		       a0 00		      ldy	#$00
    142  48d1		       ae c8 48 	      ldx	CPY_LEN+1
    143  48d4		       f0 0e		      beq	CPY_FRAG
    144  48d6				   CPY_PAGE
    145  48d6		       b1 63		      lda	(CPY_SRC),y
    146  48d8		       91 65		      sta	(CPY_DST),y
    147  48da		       c8		      iny
    148  48db		       d0 f9		      bne	CPY_PAGE
    149  48dd		       e6 64		      inc	CPY_SRC+1
    150  48df		       e6 66		      inc	CPY_DST+1
    151  48e1		       ca		      dex
    152  48e2		       d0 f2		      bne	CPY_PAGE
    153  48e4				   CPY_FRAG
    154  48e4		       cc c7 48 	      cpy	CPY_LEN+0
    155  48e7		       f0 07		      beq	CPY_DONE
    156  48e9		       b1 63		      lda	(CPY_SRC),Y
    157  48eb		       91 65		      sta	(CPY_DST),Y
    158  48ed		       c8		      iny
    159  48ee		       d0 f4		      bne	CPY_FRAG
    160  48f0				   CPY_DONE
    161  48f0		       60		      rts
    162  48f1
    163  48f1							;Input a string and store it in x:a, terminated with a null byte.
    164  48f1							;max # of chars in y returns num of chars entered in y, carry set if run/stop
    165  48f1		       00	   ICOUNT     dc.b	$00
    166  48f2				   INPUT
    167  48f2		       86 68		      stx	INPUT_PTR+1
    168  48f4		       85 67		      sta	INPUT_PTR
    169  48f6		       8c 1b 49 	      sty	INPUT_1+1
    170  48f9		       a9 00		      lda	#$00
    171  48fb		       85 69		      sta	INPUT_Y
    172  48fd				   INPUT_G
    173  48fd		       20 e1 ff 	      jsr	STOP
    174  4900		       f0 22		      beq	INPUT_3
    175  4902		       20 e4 ff 	      jsr	GETIN
    176  4905		       f0 f6		      beq	INPUT_G
    177  4907		       a4 69		      ldy	INPUT_Y
    178  4909
    179  4909		       c9 a0		      cmp	#160
    180  490b		       b0 f0		      bcs	INPUT_G
    181  490d		       c9 0d		      cmp	#$0d
    182  490f		       f0 0d		      beq	INPUT_2
    183  4911
    184  4911		       91 67	   INPUT_0    sta	(INPUT_PTR),y
    185  4913		       20 d2 ff 	      jsr	$ffd2
    186  4916
    187  4916		       e6 69		      inc	INPUT_Y
    188  4918		       a5 69		      lda	INPUT_Y
    189  491a		       c9 ff	   INPUT_1    cmp	#$ff
    190  491c		       d0 df		      bne	INPUT_G
    191  491e				   INPUT_2
    192  491e		       a9 00		      lda	#$00
    193  4920		       91 67		      sta	(INPUT_PTR),y
    194  4922		       18		      clc
    195  4923		       60		      rts
    196  4924				   INPUT_3
    197  4924		       38		      sec
    198  4925		       60		      rts
    199  4926
    200  4926
    201  4926							; print hex  char $ of number in a
    202  4926		       00 00	   hexx       dc.b	$00,$00
    203  4928				   hexstr
    204  4928		       8e 26 49 	      stx	hexx
    205  492b		       48		      pha
    206  492c		       29 f0		      and	#$f0
    207  492e		       18		      clc
    208  492f		       4a		      lsr
    209  4930		       4a		      lsr
    210  4931		       4a		      lsr
    211  4932		       4a		      lsr
    212  4933		       aa		      tax
    213  4934		       bd c4 4b 	      lda	hexstring,x
    214  4937		       20 d2 ff 	      jsr	$ffd2
    215  493a
    216  493a		       68		      pla
    217  493b		       29 0f		      and	#$0f
    218  493d		       aa		      tax
    219  493e		       bd c4 4b 	      lda	hexstring,x
    220  4941		       20 d2 ff 	      jsr	$ffd2
    221  4944		       ae 26 49 	      ldx	hexx
    222  4947		       60		      rts
    223  4948
    224  4948				   acc
    225  4948		       00 00		      dc.b	$00,$00
    226  494a				   aux
    227  494a		       00 00		      dc.b	$00,$00
    228  494c				   ext
    229  494c		       00 00		      dc.b	$00,$00
    230  494e				   decstr
    231  494e
    232  494e		       8d 48 49 	      STA	acc
    233  4951		       8e 49 49 	      STX	acc+1
    234  4954		       8c 4a 49 	      STY	aux	;Base
    235  4957		       a2 00		      LDX	#00
    236  4959		       8e 4b 49 	      STX	aux+1
    237  495c				   decstrLOOP
    238  495c		       20 7c 49 	      JSR	DIV16
    239  495f		       e8		      INX
    240  4960		       ad 4c 49 	      LDA	ext
    241  4963		       48		      PHA
    242  4964		       ad 48 49 	      LDA	acc
    243  4967		       0d 49 49 	      ORA	acc+1
    244  496a		       d0 f0		      BNE	decstrLOOP	;Divide until result=0
    245  496c		       68	   decstrPOOP PLA
    246  496d		       09 30		      ORA	#$30	;Convert to chr$
    247  496f		       c9 3a		      CMP	#$3A
    248  4971		       90 02		      BCC	decstrPLOP
    249  4973		       69 06		      ADC	#$06	;$3A->A $3B->B etc.
    250  4975		       20 d2 ff    decstrPLOP JSR	$FFD2
    251  4978		       ca		      DEX
    252  4979		       d0 f1		      BNE	decstrPOOP
    253  497b		       60		      RTS
    254  497c
    255  497c				   DIV16
    256  497c		       a9 00		      LDA	#0
    257  497e		       8d 4d 49 	      STA	ext+1
    258  4981		       a0 10		      LDY	#$10
    259  4983				   div16LOOP
    260  4983		       0e 48 49 	      ASL	acc
    261  4986		       2e 49 49 	      ROL	acc+1
    262  4989		       2a		      ROL
    263  498a		       2e 4d 49 	      ROL	ext+1
    264  498d		       48		      PHA
    265  498e		       cd 4a 49 	      CMP	aux
    266  4991		       ad 4d 49 	      LDA	ext+1
    267  4994		       ed 4b 49 	      SBC	aux+1
    268  4997		       90 0b		      BCC	div16DIV2
    269  4999		       8d 4d 49 	      STA	ext+1
    270  499c		       68		      PLA
    271  499d		       ed 4a 49 	      SBC	aux
    272  49a0		       48		      PHA
    273  49a1		       ee 48 49 	      INC	acc
    274  49a4		       68	   div16DIV2  PLA
    275  49a5		       88		      DEY
    276  49a6		       d0 db		      BNE	div16LOOP
    277  49a8		       8d 4c 49 	      STA	ext
    278  49ab		       60		      RTS
    279  49ac
    280  49ac							;
    281  49ac							;Prints the mac address indicated by the six bytes at (x:a)
    282  49ac							;destroys a,x, preserves y
    283  49ac							;
    284  49ac				   printmac
    285  49ac		       8c cf 49 	      sty	macprinty
    286  49af		       8e b9 49 	      stx	macprl+$02
    287  49b2		       8d b8 49 	      sta	macprl+$01
    288  49b5		       a0 00		      ldy	#$00
    289  49b7				   macprl
    290  49b7		       b9 ff ff 	      lda	$FFFF,y
    291  49ba		       20 28 49 	      jsr	hexstr
    292  49bd		       c0 05		      cpy	#$05
    293  49bf		       f0 05		      beq	macpr2
    294  49c1		       20 f8 47 	      jsr	prns
    295  49c4		       3a 00		      dc.b	":",0
    296  49c6		       c8	   macpr2     iny
    297  49c7		       c0 06		      cpy	#$06
    298  49c9		       d0 ec		      bne	macprl
    299  49cb		       ac cf 49 	      ldy	macprinty
    300  49ce		       60		      rts
    301  49cf		       00	   macprinty  dc.b	$00
    302  49d0
    303  49d0		       00	   printipy   dc.b	$00
    304  49d1				   printip		;Address in x:a, preserves y
    305  49d1		       8c d0 49 	      sty	printipy
    306  49d4		       8d df 49 	      sta	pipadr+$01
    307  49d7		       8e e0 49 	      stx	pipadr+$02
    308  49da		       a0 00		      ldy	#$00
    309  49dc				   printiploop
    310  49dc		       98		      tya
    311  49dd		       48		      pha
    312  49de
    313  49de		       b9 ff ff    pipadr     lda	$FFFF,y
    314  49e1		       a2 00		      ldx	#$00
    315  49e3		       a0 0a		      ldy	#$0a
    316  49e5		       20 4e 49 	      jsr	decstr
    317  49e8
    318  49e8		       68		      pla
    319  49e9		       a8		      tay
    320  49ea		       48		      pha
    321  49eb
    322  49eb		       c0 03		      cpy	#$03
    323  49ed		       f0 05		      beq	printiploop2
    324  49ef
    325  49ef		       20 f8 47 	      jsr	prns
    326  49f2		       2e 00		      dc.b	".",0
    327  49f4
    328  49f4				   printiploop2
    329  49f4		       68		      pla
    330  49f5		       a8		      tay
    331  49f6		       c8		      iny
    332  49f7		       c0 04		      cpy	#$04
    333  49f9		       d0 e1		      bne	printiploop
    334  49fb
    335  49fb		       ac d0 49 	      ldy	printipy
    336  49fe		       60		      rts
    337  49ff
    338  49ff							;Thank you, Steve Judd
    339  49ff				   printnum
    340  49ff		       8d 48 49 	      sta	acc
    341  4a02		       8e 49 49 	      stx	acc+1
    342  4a05		       8c 4a 49 	      sty	aux
    343  4a08		       a2 00		      ldx	#$00
    344  4a0a		       8e 4b 49 	      stx	aux+1
    345  4a0d		       20 7c 49    pn_l       jsr	DIV16
    346  4a10		       e8		      inx
    347  4a11		       ad 4c 49 	      lda	ext
    348  4a14		       48		      pha
    349  4a15		       ad 48 49 	      lda	acc
    350  4a18		       0d 49 49 	      ora	acc+1
    351  4a1b		       d0 f0		      bne	pn_l
    352  4a1d		       68	   pn_l2      pla
    353  4a1e		       09 30		      ora	#$30
    354  4a20		       c9 3a		      cmp	#$3a
    355  4a22		       90 02		      bcc	pn_l3
    356  4a24		       69 06		      adc	#$06
    357  4a26		       20 d2 ff    pn_l3      jsr	CHROUT
    358  4a29		       ca		      dex
    359  4a2a		       d0 f1		      bne	pn_l2
    360  4a2c		       60		      rts
    361  4a2d
    362  4a2d				   yesno		;returns 0 in a for no, 1 in a for yes, 2 for "quit"
      0  4a2d					      PRINT	"(y/n/q)"
      1  4a2d		       20 f8 47 	      jsr	prns
      2  4a30		       28 79 2f 6e*	      dc.b	"(y/n/q)",0
    364  4a38		       20 e4 ff    yn1	      jsr	GETIN
    365  4a3b		       f0 fb		      beq	yn1
    366  4a3d		       c9 59		      cmp	#89	;y
    367  4a3f		       f0 17		      beq	yesnoyes
    368  4a41		       c9 d9		      cmp	#217	;Y
    369  4a43		       f0 13		      beq	yesnoyes
    370  4a45		       c9 4e		      cmp	#78	;n
    371  4a47		       f0 12		      beq	yesnono
    372  4a49		       c9 ce		      cmp	#206	;N
    373  4a4b		       f0 0e		      beq	yesnono
    374  4a4d		       c9 51		      cmp	#81	;q
    375  4a4f		       f0 0d		      beq	yesnoquit
    376  4a51		       c9 d1		      cmp	#209	;Q
    377  4a53		       f0 09		      beq	yesnoquit
    378  4a55		       4c 38 4a 	      jmp	yn1
    379  4a58				   yesnoyes
    380  4a58		       a9 01		      lda	#$01
    381  4a5a		       60		      rts
    382  4a5b				   yesnono
    383  4a5b		       a9 00		      lda	#$00
    384  4a5d		       60		      rts
    385  4a5e				   yesnoquit
    386  4a5e		       a9 02		      lda	#$02
    387  4a60		       60		      rts
    388  4a61
    389  4a61		       00 00 00 00*gotmac     dc.b	$00,$00,$00,$00,$00,$00
    390  4a67				   getmac
      0  4a67					      PRINT	13,"mac: "
      1  4a67		       20 f8 47 	      jsr	prns
      2  4a6a		       0d 6d 61 63*	      dc.b	13,"mac: ",0
    392  4a71		       20 b0 4a 	      jsr	gethex
    393  4a74		       8d 61 4a 	      sta	gotmac
      0  4a77					      PRINT	":"
      1  4a77		       20 f8 47 	      jsr	prns
      2  4a7a		       3a 00		      dc.b	":",0
    395  4a7c		       20 b0 4a 	      jsr	gethex
    396  4a7f		       8d 62 4a 	      sta	gotmac+1
      0  4a82					      PRINT	":"
      1  4a82		       20 f8 47 	      jsr	prns
      2  4a85		       3a 00		      dc.b	":",0
    398  4a87		       20 b0 4a 	      jsr	gethex
    399  4a8a		       8d 63 4a 	      sta	gotmac+2
      0  4a8d					      PRINT	":"
      1  4a8d		       20 f8 47 	      jsr	prns
      2  4a90		       3a 00		      dc.b	":",0
    401  4a92		       20 b0 4a 	      jsr	gethex
    402  4a95		       8d 64 4a 	      sta	gotmac+3
      0  4a98					      PRINT	":"
      1  4a98		       20 f8 47 	      jsr	prns
      2  4a9b		       3a 00		      dc.b	":",0
    404  4a9d		       20 b0 4a 	      jsr	gethex
    405  4aa0		       8d 65 4a 	      sta	gotmac+4
      0  4aa3					      PRINT	":"
      1  4aa3		       20 f8 47 	      jsr	prns
      2  4aa6		       3a 00		      dc.b	":",0
    407  4aa8		       20 b0 4a 	      jsr	gethex
    408  4aab		       8d 66 4a 	      sta	gotmac+5
    409  4aae		       60		      rts
    410  4aaf
    411  4aaf		       00	   ghr	      dc.b	$00
    412  4ab0				   gethex
    413  4ab0		       20 6f 4b 	      jsr	gethexdig
    414  4ab3		       8a		      txa
    415  4ab4		       0a		      asl
    416  4ab5		       0a		      asl
    417  4ab6		       0a		      asl
    418  4ab7		       0a		      asl
    419  4ab8		       8d af 4a 	      sta	ghr
    420  4abb		       20 6f 4b 	      jsr	gethexdig
    421  4abe		       8a		      txa
    422  4abf		       0d af 4a 	      ora	ghr
    423  4ac2		       60		      rts
    424  4ac3
    425  4ac3
    426  4ac3							; Replaced with better version
    427  4ac3							;gotip
    428  4ac3							;	dc.b $00,$00,$00,$00
    429  4ac3
    430  4ac3							;getip
    431  4ac3							;	PRINT 13,"IP[0]: "
    432  4ac3							;	jsr getnum
    433  4ac3							;	sta gotip
    434  4ac3							;	PRINT 13,"IP[1]: "
    435  4ac3							;	jsr getnum
    436  4ac3							;	sta gotip+$01
    437  4ac3							;	PRINT 13,"IP[2]: "
    438  4ac3							;	jsr getnum
    439  4ac3							;	sta gotip+$02
    440  4ac3							;	PRINT 13,"IP[3]: "
    441  4ac3							;	jsr getnum
    442  4ac3							;	sta gotip+$03
    443  4ac3							;	rts
    444  4ac3
    445  4ac3		       00	   gny	      dc.b	$00
    446  4ac4				   getnum		;max 3 digits
    447  4ac4		       a9 00		      lda	#$00
    448  4ac6		       8d 49 4b 	      sta	gns
    449  4ac9		       8d 4a 4b 	      sta	gns+$01
    450  4acc		       8d 4b 4b 	      sta	gns+$02
    451  4acf		       a0 00		      ldy	#$00
    452  4ad1		       8c c3 4a    gn0	      sty	gny
    453  4ad4		       20 4e 4b 	      jsr	getdigit	;returns dec value in a
    454  4ad7		       ac c3 4a 	      ldy	gny
    455  4ada		       c9 0d		      cmp	#$0d	;abort on return
    456  4adc		       f0 0b		      beq	gn1
    457  4ade		       99 49 4b 	      sta	gns,y
    458  4ae1		       c8		      iny
    459  4ae2		       c0 03		      cpy	#$03
    460  4ae4		       f0 2b		      beq	gn3
    461  4ae6		       4c d1 4a 	      jmp	gn0
    462  4ae9
    463  4ae9				   gn1
    464  4ae9		       ad c3 4a 	      lda	gny
    465  4aec		       f0 5a		      beq	gnx
    466  4aee
    467  4aee		       ad c3 4a 	      lda	gny
    468  4af1		       c9 01		      cmp	#$01	;1 digit entered
    469  4af3		       d0 04		      bne	gn2
    470  4af5		       ad 49 4b 	      lda	gns
    471  4af8		       60		      rts
    472  4af9
    473  4af9				   gn2
    474  4af9		       ad 49 4b 	      lda	gns	;mul gns+1 * 10 and store in gnr+1
    475  4afc		       0a		      asl		;*2
    476  4afd		       8d 4c 4b 	      sta	gnr
    477  4b00		       0a		      asl		;*4	    ;again multiply by 2 (*4)
    478  4b01		       0a		      asl		;*8	    ;again multiply by 2 (*8)
    479  4b02		       18		      clc
    480  4b03		       6d 4c 4b 	      adc	gnr
    481  4b06		       8d 4c 4b 	      sta	gnr
    482  4b09
    483  4b09		       ad 4c 4b 	      lda	gnr
    484  4b0c		       18		      clc
    485  4b0d		       6d 4a 4b 	      adc	gns+1
    486  4b10		       60		      rts
    487  4b11
    488  4b11				   gn3
    489  4b11		       ad 49 4b 	      lda	gns	;mul gns*100 and store in gnr
    490  4b14		       0a		      asl		;*2 (*4 + *32 + *64)
    491  4b15		       0a		      asl		;*4
    492  4b16		       8d 4c 4b 	      sta	gnr
    493  4b19		       0a		      asl		;*8
    494  4b1a		       0a		      asl		;*16
    495  4b1b		       0a		      asl		;*32
    496  4b1c		       48		      pha
    497  4b1d		       18		      clc
    498  4b1e		       6d 4c 4b 	      adc	gnr
    499  4b21		       8d 4c 4b 	      sta	gnr
    500  4b24		       68		      pla
    501  4b25		       0a		      asl		;*64
    502  4b26		       18		      clc
    503  4b27		       6d 4c 4b 	      adc	gnr
    504  4b2a		       8d 4c 4b 	      sta	gnr
    505  4b2d
    506  4b2d		       ad 4a 4b 	      lda	gns+1	;mul gns+1 * 10 and store in gnr+1
    507  4b30		       0a		      asl		;*2
    508  4b31		       8d 4d 4b 	      sta	gnr+1
    509  4b34		       0a		      asl		;*4	    ;again multiply by 2 (*4)
    510  4b35		       0a		      asl		;*8	    ;again multiply by 2 (*8)
    511  4b36		       18		      clc
    512  4b37		       6d 4d 4b 	      adc	gnr+1
    513  4b3a		       8d 4d 4b 	      sta	gnr+1
    514  4b3d
    515  4b3d		       ad 4c 4b 	      lda	gnr
    516  4b40		       18		      clc
    517  4b41		       6d 4d 4b 	      adc	gnr+1
    518  4b44		       18		      clc
    519  4b45		       6d 4b 4b 	      adc	gns+2
    520  4b48				   gnx
    521  4b48		       60		      rts
    522  4b49
    523  4b49
    524  4b49
    525  4b49		       00 00 00    gns	      dc.b	$00,$00,$00
    526  4b4c		       00 00	   gnr	      dc.b	$00,$00
    527  4b4e
    528  4b4e				   getdigit		;returns digit in a,value in x
    529  4b4e		       20 e4 ff 	      jsr	GETIN
    530  4b51		       f0 fb		      beq	getdigit
    531  4b53		       c9 0d		      cmp	#$0d
    532  4b55		       f0 17		      beq	gd2
    533  4b57		       a2 00		      ldx	#$00
    534  4b59				   gd0
    535  4b59		       dd ba 4b 	      cmp	numstr,x
    536  4b5c		       f0 08		      beq	gd1
    537  4b5e		       e8		      inx
    538  4b5f		       e0 0b		      cpx	#$0b
    539  4b61		       f0 eb		      beq	getdigit
    540  4b63		       4c 59 4b 	      jmp	gd0
    541  4b66				   gd1
    542  4b66		       48		      pha
    543  4b67		       20 d2 ff 	      jsr	$ffd2
    544  4b6a		       68		      pla
    545  4b6b		       38		      sec
    546  4b6c		       e9 30		      sbc	#$30
    547  4b6e				   gd2
    548  4b6e		       60		      rts
    549  4b6f
    550  4b6f				   gethexdig		;returns hex digit in a,value in x
    551  4b6f		       20 e4 ff 	      jsr	GETIN
    552  4b72		       f0 fb		      beq	gethexdig
    553  4b74		       c9 0d		      cmp	#$0d
    554  4b76		       f0 17		      beq	ghd2
    555  4b78		       a2 00		      ldx	#$00
    556  4b7a				   ghd0
    557  4b7a		       dd c4 4b 	      cmp	hexstring,x
    558  4b7d		       f0 08		      beq	ghd1
    559  4b7f		       e8		      inx
    560  4b80		       e0 10		      cpx	#$10
    561  4b82		       f0 eb		      beq	gethexdig
    562  4b84		       4c 7a 4b 	      jmp	ghd0
    563  4b87				   ghd1
    564  4b87		       48		      pha
    565  4b88		       20 d2 ff 	      jsr	$ffd2
    566  4b8b		       68		      pla
    567  4b8c		       38		      sec
    568  4b8d		       e9 30		      sbc	#$30
    569  4b8f				   ghd2
    570  4b8f		       60		      rts
    571  4b90
    572  4b90		       00 00 00 00 ipm	      dc.b	$00,$00,$00,$00
    573  4b94
    574  4b94		       00	   IPMTemp    dc.b	$00
    575  4b95
    576  4b95							;IF CARD_IP AND CARD_MASK = DEST_IP AND CARD_MASK THEN LOCAL
    577  4b95				   IPMASK		; expects pointer to IP in x:a,
    578  4b95							; returns carry clear if local,
    579  4b95							; carry set if not.
    580  4b95		       8d 9e 4b 	      sta	IPM0+1
    581  4b98		       8e 9f 4b 	      stx	IPM0+2
    582  4b9b
    583  4b9b		       a0 00		      ldy	#$00
    584  4b9d				   IPM0
    585  4b9d		       b9 ff ff 	      lda	$FFFF,y
    586  4ba0		       39 2f 4f 	      and	CARD_MASK,y
    587  4ba3							;	sta $0500,y
    588  4ba3
    589  4ba3		       8d 94 4b 	      sta	IPMTemp
    590  4ba6
    591  4ba6		       b9 2b 4f 	      lda	CARD_IP,y
    592  4ba9		       39 2f 4f 	      and	CARD_MASK,y
    593  4bac
    594  4bac		       cd 94 4b 	      cmp	IPMTemp
    595  4baf		       d0 07		      bne	IPM_NL
    596  4bb1		       c8		      iny
    597  4bb2		       c0 04		      cpy	#$04
    598  4bb4		       d0 e7		      bne	IPM0
    599  4bb6
    600  4bb6		       18		      clc
    601  4bb7		       60		      rts
    602  4bb8				   IPM_NL
    603  4bb8		       38		      sec
    604  4bb9		       60		      rts
    605  4bba
    606  4bba		       30 31 32 33*numstr     dc.b	"0123456789"
    607  4bc4
    608  4bc4				   hexstring
    609  4bc4		       30 31 32 33*	      dc.b	"0123456789ABCDEF"
    610  4bd4
    611  4bd4				   pet2asc		;petscii char in a returns ascii char in a
    612  4bd4							;if a > 64 AND a <91 THEN a = a + 32
    613  4bd4							;if a > 96 AND a <123 THEN a = a - 32
    614  4bd4		       c9 61		      cmp	#97
      0  4bd6					      blt	pet2asc0
      1  4bd6		       90 08		      bcc	pet2asc0
    616  4bd8							;it's greater than 96
    617  4bd8		       c9 7b		      cmp	#123
      0  4bda					      bge	pet2ascx
      1  4bda		       b0 0f		      bcs	pet2ascx
    619  4bdc		       38		      sec
    620  4bdd		       e9 20		      sbc	#$20
    621  4bdf		       60		      rts
    622  4be0				   pet2asc0
    623  4be0		       c9 41		      cmp	#65
      0  4be2					      blt	pet2ascx
      1  4be2		       90 07		      bcc	pet2ascx
    625  4be4		       c9 5b		      cmp	#91
      0  4be6					      bge	pet2ascx
      1  4be6		       b0 03		      bcs	pet2ascx
    627  4be8		       18		      clc
    628  4be9		       69 20		      adc	#$20
    629  4beb				   pet2ascx
    630  4beb		       60		      rts
    631  4bec
------- FILE SIXNET.ASM
    177  4bec
------- FILE ETH64.ASM LEVEL 3 PASS 2
      0  4bec					      include	"ETH64.ASM"
      1  4bec							;Source by Six of Style (Oliver VieBrooks)
      2  4bec							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  4bec							;
      4  4bec							;Last Updated 8/24/2005
      5  4bec							;
      6  4bec							;=============================================================================
      7  4bec							;ETH64 CONSTANTS
      8  4bec		       de 10	   ETH64_BASE =	$de10	;ETH64 Base Address
      9  4bec		       de 1e	   ETH64_BANK =	ETH64_BASE+$0e	;Bank select register		   R/W (2B)
     10  4bec
     11  4bec							;Register bank 0
     12  4bec		       de 10	   ETH64_TCR  =	ETH64_BASE	;Transmition control register	   R/W (2B)
     13  4bec		       de 12	   ETH64_EPHSR =	ETH64_BASE+$02	;EPH status register		   R/O (2B)
     14  4bec		       de 14	   ETH64_RCR  =	ETH64_BASE+4	;Receive control register	   R/W (2B)
     15  4bec		       de 16	   ETH64_ECR  =	ETH64_BASE+6	;Counter register		   R/O (2B)
     16  4bec		       de 18	   ETH64_MIR  =	ETH64_BASE+8	;Memory information register	   R/O (2B)
     17  4bec		       de 1a	   ETH64_MCR  =	ETH64_BASE+$0a	;Memory Config. reg.	 +0 R/W +1 R/O (2B)
     18  4bec
     19  4bec							;Register bank 1
     20  4bec		       de 10	   ETH64_CR   =	ETH64_BASE	;Configuration register	   R/W (2B)
     21  4bec		       de 12	   ETH64_BAR  =	ETH64_BASE+2	;Base address register 	   R/W (2B)
     22  4bec		       de 14	   ETH64_IAR  =	ETH64_BASE+4	;Individual address register	   R/W (6B)
     23  4bec		       de 1a	   ETH64_GPR  =	ETH64_BASE+$0a	;General address register	   R/W (2B)
     24  4bec		       de 1c	   ETH64_CTR  =	ETH64_BASE+$0c	;Control register		   R/W (2B)
     25  4bec
     26  4bec							;Register bank 2
     27  4bec		       de 10	   ETH64_MMUCR =	ETH64_BASE	;MMU command register		   W/O (1B)
     28  4bec		       de 11	   ETH64_AUTOTX =	ETH64_BASE+1	;AUTO TX start register	   R/W (1B)
     29  4bec		       de 12	   ETH64_PNR  =	ETH64_BASE+2	;Packet number register	   R/W (1B)
     30  4bec		       de 13	   ETH64_ARR  =	ETH64_BASE+3	;Allocation result register	   R/O (1B)
     31  4bec		       de 14	   ETH64_FIFO =	ETH64_BASE+4	;FIFO ports register		   R/O (2B)
     32  4bec		       de 16	   ETH64_PTR  =	ETH64_BASE+6	;Pointer register		   R/W (2B)
     33  4bec		       de 18	   ETH64_DATA =	ETH64_BASE+8	;Data register 		   R/W (4B)
     34  4bec		       de 1c	   ETH64_IST  =	ETH64_BASE+$0c	;Interrupt status register	   R/O (1B)
     35  4bec		       de 1c	   ETH64_ACK  =	ETH64_BASE+$0c	;Interrupt acknowledge register   W/O (1B)
     36  4bec		       de 1d	   ETH64_MSK  =	ETH64_BASE+$0d	;Interrupt mask register	   R/W (1B)
     37  4bec
     38  4bec							;Register bank 3
     39  4bec		       de 10	   ETH64_MT   =	ETH64_BASE	;Multicast table		   R/W (8B)
     40  4bec		       de 18	   ETH64_MGMT =	ETH64_BASE+8	;Management interface		   R/W (2B)
     41  4bec		       de 1a	   ETH64_REV  =	ETH64_BASE+$0a	;Revision register		   R/W (2B)
     42  4bec		       de 1c	   ETH64_ERCV =	ETH64_BASE+$0c	;Early RCV register		   R/W (2B)
     43  4bec
     44  4bec							;=============================================================================
     45  4bec							;ETH64 SEND PACKET
     46  4bec				   ETH64_SEND
     47  4bec							;bank 2
     48  4bec		       a9 02		      lda	#$02
     49  4bee		       8d 1e de 	      sta	ETH64_BANK
     50  4bf1							;only allocate one block
     51  4bf1		       a9 00		      lda	#$00
     52  4bf3		       09 20		      ora	#%00100000	;Command 0010: Allocate Memory for TX
     53  4bf5		       8d 10 de 	      sta	ETH64_MMUCR
     54  4bf8
     55  4bf8							;Wait for up to 200us
     56  4bf8		       a2 08		      ldx	#8
     57  4bfa				   lan91c96_send3
     58  4bfa		       ad 1c de 	      lda	ETH64_IST
     59  4bfd		       29 08		      and	#%00001000	;Check ALLOC_INT on status register
     60  4bff		       d0 04		      bne	lan91c96_send4
     61  4c01		       ca		      dex
     62  4c02		       d0 f6		      bne	lan91c96_send3
     63  4c04		       60		      rts		;Choked, return (error?)
     64  4c05
     65  4c05				   lan91c96_send4
     66  4c05							;Acknowledge int.
     67  4c05		       a9 08		      lda	#%00001000
     68  4c07		       8d 1c de 	      sta	ETH64_ACK
     69  4c0a
     70  4c0a		       ad 13 de 	      lda	ETH64_ARR	;Get address from Allocation Result Register
     71  4c0d		       8d 12 de 	      sta	ETH64_PNR	;And use it to set our packet address
     72  4c10
     73  4c10		       a9 00		      lda	#0
     74  4c12		       8d 16 de 	      sta	ETH64_PTR
     75  4c15		       a9 40		      lda	#%01000000	;AUTO INCR.
     76  4c17		       8d 17 de 	      sta	ETH64_PTR+1
     77  4c1a
     78  4c1a		       a9 00		      lda	#0	;Status written by CSMA
     79  4c1c		       8d 18 de 	      sta	ETH64_DATA
     80  4c1f		       8d 18 de 	      sta	ETH64_DATA
     81  4c22							;Packet size is $2a + overhead (6 bytes) = $30
     82  4c22		       a9 2f		      lda	#$2f	;packet length lo-byte
     83  4c24		       8d 18 de 	      sta	ETH64_DATA
     84  4c27		       a9 00		      lda	#$00	;packet length hi-byte
     85  4c29		       8d 18 de 	      sta	ETH64_DATA
     86  4c2c
     87  4c2c							;Write actual packet to Transmit
     88  4c2c		       a2 00		      ldx	#$00
     89  4c2e				   lan91c96_sendloop
     90  4c2e		       bd 36 78 	      lda	OUTPACKET,x
     91  4c31		       8d 18 de 	      sta	ETH64_DATA
     92  4c34		       e8		      inx
     93  4c35		       e0 2a		      cpx	#$2a
     94  4c37		       d0 f5		      bne	lan91c96_sendloop
     95  4c39		       a9 20		      lda	#%00100000
     96  4c3b		       8d 18 de 	      sta	ETH64_DATA	;Control byte
     97  4c3e		       a9 c0		      lda	#%11000000	;ENQUEUE PACKET - transmit packet
     98  4c40		       8d 10 de 	      sta	ETH64_MMUCR
     99  4c43		       60		      rts
    100  4c44
    101  4c44
    102  4c44				   ETH64_READ
    103  4c44		       ee 34 74 	      inc	RXCOUNT
    104  4c47		       d0 03		      bne	ETH64_Read1
    105  4c49		       ee 35 74 	      inc	RXCOUNT+$01
    106  4c4c				   ETH64_Read1
    107  4c4c		       a9 00		      lda	#0
    108  4c4e		       8d 16 de 	      sta	ETH64_PTR
    109  4c51		       a9 e0		      lda	#%11100000	;RCV,AUTO INCR.,READ
    110  4c53		       8d 17 de 	      sta	ETH64_PTR+1
    111  4c56		       ad 18 de 	      lda	ETH64_DATA	;Status word
    112  4c59		       ad 18 de 	      lda	ETH64_DATA
    113  4c5c		       8d 30 74 	      sta	IN_PACKET_STATUS	;High byte only
    114  4c5f		       ad 18 de 	      lda	ETH64_DATA	;Total number of bytes
    115  4c62
    116  4c62		       8d 2c 74 	      sta	IN_PACKET_LENGTH
    117  4c65		       ad 18 de 	      lda	ETH64_DATA
    118  4c68		       8d 2d 74 	      sta	IN_PACKET_LENGTH+1
    119  4c6b							; Last word contain 'last data byte' and $60
    120  4c6b							; or 'fill byte' and $40
    121  4c6b		       18		      clc
    122  4c6c		       ad 2d 74 	      lda	IN_PACKET_LENGTH+1
    123  4c6f		       e9 06		      sbc	#$06
    124  4c71		       90 03		      bcc	ETH64_Read2
    125  4c73		       ce 2c 74 	      dec	IN_PACKET_LENGTH
    126  4c76				   ETH64_Read2
    127  4c76							;The packet contains 3 extra words
    128  4c76							;packet_length -= 6
    129  4c76		       ad 30 74 	      lda	IN_PACKET_STATUS
    130  4c79		       29 10		      and	#$10
    131  4c7b		       f0 08		      beq	ETH64_Read3
    132  4c7d		       ee 2d 74 	      inc	IN_PACKET_LENGTH+1
    133  4c80		       d0 03		      bne	ETH64_Read3
    134  4c82		       ee 2c 74 	      inc	IN_PACKET_LENGTH
    135  4c85				   ETH64_Read3
    136  4c85							;Set zero-page pointer to our incoming packet area.
    137  4c85		       a9 36		      lda	#<INPACKET
    138  4c87		       85 57		      sta	RECV_PTR
    139  4c89		       a9 74		      lda	#>INPACKET
    140  4c8b		       85 58		      sta	RECV_PTR+$01
    141  4c8d							;Read in packet to our incoming packet buffer
    142  4c8d		       a0 00		      ldy	#$00
    143  4c8f		       ae 2d 74 	      ldx	IN_PACKET_LENGTH+$01
    144  4c92		       f0 0d		      beq	ETH64_Read4	;packet_length < 256
    145  4c94				   R5
    146  4c94		       ad 18 de 	      lda	ETH64_DATA
    147  4c97		       91 57		      sta	(RECV_PTR),y
    148  4c99		       c8		      iny
    149  4c9a		       d0 f8		      bne	R5
    150  4c9c		       e6 58		      inc	RECV_PTR+1
    151  4c9e		       ca		      dex
    152  4c9f		       d0 f3		      bne	R5
    153  4ca1				   ETH64_Read4
    154  4ca1		       ad 18 de 	      lda	ETH64_DATA
    155  4ca4		       91 57		      sta	(RECV_PTR),y
    156  4ca6		       c8		      iny
    157  4ca7		       cc 2c 74 	      cpy	IN_PACKET_LENGTH
    158  4caa		       d0 f5		      bne	ETH64_Read4
    159  4cac							;Remove and release RX packet from FIFO
    160  4cac		       a9 80		      lda	#%10000000
    161  4cae		       8d 10 de 	      sta	ETH64_MMUCR
    162  4cb1		       60		      rts
    163  4cb2
    164  4cb2							;=============================================================================
    165  4cb2							;ETH64 POLL FOR PACKET
    166  4cb2
    167  4cb2				   ETH64_POLL
    168  4cb2							;Select Bank 2
    169  4cb2		       a9 02		      lda	#$02
    170  4cb4		       8d 1e de 	      sta	ETH64_BANK
    171  4cb7		       ad 1c de 	      lda	ETH64_IST
    172  4cba		       8d 00 04 	      sta	$0400
    173  4cbd		       29 01		      and	#%00000001	;RCV INT
    174  4cbf		       d0 04		      bne	ETH64_P0
    175  4cc1							;No packet available
    176  4cc1		       a9 00		      lda	#$00
    177  4cc3		       18		      clc
    178  4cc4		       60		      rts
    179  4cc5				   ETH64_P0		;packet
    180  4cc5		       a9 01		      lda	#$01
    181  4cc7		       18		      clc
    182  4cc8		       60		      rts
    183  4cc9
    184  4cc9
    185  4cc9
    186  4cc9				   ETH64_INIT
    187  4cc9							;Select Bank 0
    188  4cc9		       a9 00		      lda	#$00
    189  4ccb		       8d 1e de 	      sta	ETH64_BANK
    190  4cce							; Reset ETH card
    191  4cce		       a9 80		      lda	#%10000000	;Software reset
    192  4cd0		       8d 15 de 	      sta	ETH64_RCR+1
    193  4cd3		       a9 00		      lda	#0
    194  4cd5		       8d 14 de 	      sta	ETH64_RCR
    195  4cd8		       8d 15 de 	      sta	ETH64_RCR+1
    196  4cdb							; delay
    197  4cdb		       a2 00		      ldx	#0
    198  4cdd				   ETH64_init2
    199  4cdd		       c1 ff		      cmp	($ff,x)	;6 cycles
    200  4cdf		       c1 ff		      cmp	($ff,x)	;6 cycles
    201  4ce1		       ca		      dex		;2 cycles
    202  4ce2		       d0 f9		      bne	ETH64_init2	;3 cycles
    203  4ce4							;17*256=4352 => 4,4 ms
    204  4ce4							; Enable transmit and receive
    205  4ce4		       a9 81		      lda	#%10000001	;Enable transmit TXENA, PAD_EN
    206  4ce6		       8d 10 de 	      sta	ETH64_TCR
    207  4ce9		       a9 02		      lda	#%00000010	;promisc mode
    208  4ceb		       8d 14 de 	      sta	ETH64_RCR
    209  4cee		       a9 03		      lda	#%00000011	;Enable receive, strip CRC ???
    210  4cf0		       8d 15 de 	      sta	ETH64_RCR+1
    211  4cf3		       ad 11 de 	      lda	ETH64_CR+1
    212  4cf6		       09 10		      ora	#%00010000	;No wait (IOCHRDY)
    213  4cf8		       8d 11 de 	      sta	ETH64_CR+1
    214  4cfb		       a9 09		      lda	#%00001001	;Auto release
    215  4cfd		       8d 1d de 	      sta	ETH64_CTR+1
    216  4d00							;Select Bank 1
    217  4d00		       a9 01		      lda	#$01
    218  4d02		       8d 1e de 	      sta	ETH64_BANK
    219  4d05							; Set MAC address
    220  4d05		       ad 25 4f 	      lda	CARD_MAC
    221  4d08		       8d 14 de 	      sta	ETH64_IAR
    222  4d0b		       ad 26 4f 	      lda	CARD_MAC+1
    223  4d0e		       8d 15 de 	      sta	ETH64_IAR+1
    224  4d11		       ad 27 4f 	      lda	CARD_MAC+2
    225  4d14		       8d 16 de 	      sta	ETH64_IAR+2
    226  4d17		       ad 28 4f 	      lda	CARD_MAC+3
    227  4d1a		       8d 17 de 	      sta	ETH64_IAR+3
    228  4d1d		       ad 29 4f 	      lda	CARD_MAC+4
    229  4d20		       8d 18 de 	      sta	ETH64_IAR+4
    230  4d23		       ad 2a 4f 	      lda	CARD_MAC+5
    231  4d26		       8d 19 de 	      sta	ETH64_IAR+5
    232  4d29							;Set ETH64 Interrupt Mask
    233  4d29		       a9 0f		      lda	#%00001111	;RCV INT, ALLOC INT, TX INT, TX EMPTY
    234  4d2b		       8d 1d de 	      sta	ETH64_MSK
    235  4d2e		       18		      clc
    236  4d2f		       60		      rts
------- FILE SIXNET.ASM
------- FILE RRNET.ASM LEVEL 3 PASS 2
      0  4d30					      include	"RRNET.ASM"
      1  4d30
      2  4d30							;RR-Net Card Driver
      3  4d30							;Part of SixNet
      4  4d30							;Inspired by the work of Doc Bacardi
      5  4d30							;
      6  4d30							;LAST MODIFIED: 08/28/2005
      7  4d30
      8  4d30							;=============================================================================
      9  4d30							;RRNET CONSTANTS
     10  4d30		       de 02	   RRNET_PAGE =	$de02
     11  4d30		       de 04	   RRNET_DAT0 =	$de04
     12  4d30		       de 06	   RRNET_DAT1 =	$de06
     13  4d30		       de 08	   RRNET_RXTX0 =	$de08
     14  4d30		       de 0a	   RRNET_RXTX1 =	$de0a
     15  4d30		       de 0c	   RRNET_TXCMD =	$de0c
     16  4d30		       de 0e	   RRNET_TXLEN =	$de0e
     17  4d30
     18  4d30		       63 0e	   RRNET_MAGIC =	$630e	;Magic word to detect RRNET
     19  4d30		       00 55	   RRNET_RESET =	$0055	;Word used to reset RRNET
     20  4d30		       0d 05	   RRNET_PROMISC =	$0d05	;Accept broadcast and directed packets
     21  4d30		       00 d3	   RRNET_RXTXEN =	$00d3	; Enable transmit, receive
     22  4d30
     23  4d30							;Packet Page Register Pointer Constants
     24  4d30		       00 00	   RRNET_PID  =	$00	;$0000
     25  4d30		       00 01	   RRREG_RXCFG =	$01	;$0102
     26  4d30		       00 02	   RRREG_RXCTL =	$02	;$0104
     27  4d30		       00 03	   RRREG_TXCFG =	$03	;$0106
     28  4d30		       00 04	   RRREG_TXCMD =	$04	;$0108
     29  4d30		       00 05	   RRREG_BUFCFG =	$05	;$010a
     30  4d30
     31  4d30		       00 06	   RRREG_LINECTL =	$06	;$0112
     32  4d30		       00 07	   RRREG_SELFCTL =	$07	;$0114
     33  4d30		       00 08	   RRREG_BUSCTL =	$08	;$0116
     34  4d30		       00 09	   RRREG_TESTCTL =	$09	;$0118
     35  4d30
     36  4d30		       00 0a	   RRREG_RXEVENT =	$0a	;$0124
     37  4d30		       00 0b	   RRREG_TXEVENT =	$0b	;$0128
     38  4d30		       00 0c	   RRREG_BUFEVENT =	$0c
     39  4d30
     40  4d30		       00 0d	   RRREG_RXMISS =	$0d
     41  4d30		       00 0e	   RRREG_TXCOL =	$0e
     42  4d30
     43  4d30		       00 0f	   RRREG_LINEST =	$0f
     44  4d30		       00 10	   RRREG_SELFST =	$10
     45  4d30		       00 11	   RRREG_BUSST =	$11
     46  4d30
     47  4d30		       00 12	   RRREG_IA0  =	$12	;MAC Address, bytes 0-1
     48  4d30		       00 13	   RRREG_IA1  =	$13	;MAC Address, bytes 2-3
     49  4d30		       00 14	   RRREG_IA2  =	$14	;MAC Address, bytes 4-5
     50  4d30
     51  4d30		       00 c9	   RROP_BUFREQ =	$00c9
     52  4d30
     53  4d30							;Packet Page Register Address Hi/Lo Tables
     54  4d30				   RRREG_LO
     55  4d30		       00 02 04 06*	      dc.b	$00,$02,$04,$06,$08,$0a,$12,$14
     56  4d38		       16 18 24 28*	      dc.b	$16,$18,$24,$28,$2c,$30,$32,$34
     57  4d40		       36 38 58 5a*	      dc.b	$36,$38,$58,$5a,$5c
     58  4d45
     59  4d45				   RRREG_HI
     60  4d45		       00 01 01 01*	      dc.b	$00,$01,$01,$01,$01,$01,$01,$01
     61  4d4d		       01 01 01 01*	      dc.b	$01,$01,$01,$01,$01,$01,$01,$01
     62  4d55		       01 01 01 01*	      dc.b	$01,$01,$01,$01,$01
     63  4d5a
     64  4d5a							;=============================================================================
     65  4d5a							;RRNET SEND
     66  4d5a				   RRNET_SEND
     67  4d5a							;	PRINT 13,"SENDING PACKET",13
     68  4d5a							;Send Data Start Address
     69  4d5a		       a9 36		      lda	#<OUTPACKET
     70  4d5c		       85 59		      sta	XMIT_PTR
     71  4d5e		       a9 78		      lda	#>OUTPACKET
     72  4d60		       85 5a		      sta	XMIT_PTR+$01
     73  4d62
     74  4d62							;Allocate Buffer
     75  4d62		       a9 c9		      lda	#<RROP_BUFREQ
     76  4d64		       8d 0c de 	      sta	RRNET_TXCMD
     77  4d67		       a9 00		      lda	#>RROP_BUFREQ
     78  4d69		       8d 0d de 	      sta	RRNET_TXCMD+$01
     79  4d6c
     80  4d6c							;Set Transmit Length
     81  4d6c		       ad 2e 74 	      lda	OUT_PACKET_LENGTH
     82  4d6f		       8d 0e de 	      sta	RRNET_TXLEN
     83  4d72		       85 5d		      sta	XMIT_LEN
     84  4d74
     85  4d74		       ad 2f 74 	      lda	OUT_PACKET_LENGTH+1
     86  4d77		       8d 0f de 	      sta	RRNET_TXLEN+1
     87  4d7a		       85 5e		      sta	XMIT_LEN+1
     88  4d7c
     89  4d7c							;Select Bus Status Register
     90  4d7c		       a0 11		      ldy	#RRREG_BUSST
     91  4d7e		       20 fb 4d 	      jsr	RRNET_SETPAGE
     92  4d81
     93  4d81				   RRNET_SWAIT		;wait for BSR READY (bit 8 set)
     94  4d81		       ad 05 de 	      lda	RRNET_DAT0+$01
     95  4d84		       ae 04 de 	      ldx	RRNET_DAT0
     96  4d87		       4a		      lsr
     97  4d88		       90 f7		      bcc	RRNET_SWAIT
     98  4d8a							; Send Packet
     99  4d8a		       20 71 4e 	      jsr	RRNET_XMIT
    100  4d8d		       60		      rts
    101  4d8e
    102  4d8e							;=============================================================================
    103  4d8e							;Process incoming packet
    104  4d8e				   RRNET_READ
    105  4d8e							; skip status
    106  4d8e		       ad 09 de 	      lda	RRNET_RXTX0+$01
    107  4d91		       ad 08 de 	      lda	RRNET_RXTX0
    108  4d94							;set incoming packet buffer
    109  4d94		       a9 36		      lda	#<INPACKET
    110  4d96		       a2 74		      ldx	#>INPACKET
    111  4d98		       85 57		      sta	RECV_PTR
    112  4d9a		       86 58		      stx	RECV_PTR+$01
    113  4d9c							;Read packet to buffer
    114  4d9c		       20 30 4e 	      jsr	RRNET_RECV
    115  4d9f							;set inpacket length
    116  4d9f		       a5 5b		      lda	RECV_LEN
    117  4da1		       8d 2c 74 	      sta	IN_PACKET_LENGTH
    118  4da4		       a5 5c		      lda	RECV_LEN+$01
    119  4da6		       8d 2d 74 	      sta	IN_PACKET_LENGTH+$01
    120  4da9		       60		      rts
    121  4daa
    122  4daa							;=============================================================================
    123  4daa							;Check RRNET for incoming packet
    124  4daa				   RRNET_POLL
    125  4daa							; select the receive event register
    126  4daa		       a0 0a		      ldy	#RRREG_RXEVENT
    127  4dac		       20 fb 4d 	      jsr	RRNET_SETPAGE
    128  4daf
    129  4daf							; Check for valid packet (bit 8)
    130  4daf		       ad 05 de 	      lda	RRNET_DAT0+1
    131  4db2		       4a		      lsr
    132  4db3		       90 04		      bcc	RRNET_P2
    133  4db5							;Packet received
    134  4db5		       a9 01		      lda	#$01
    135  4db7		       18		      clc
    136  4db8		       60		      rts
    137  4db9				   RRNET_P2		;No packet
    138  4db9		       a9 00		      lda	#$00
    139  4dbb		       18		      clc
    140  4dbc		       60		      rts
    141  4dbd
    142  4dbd
    143  4dbd							;=============================================================================
    144  4dbd							;Initialize RRNET
    145  4dbd				   RRNET_INIT
    146  4dbd							;reset chip to assure the default values in all regs
    147  4dbd		       a0 07		      ldy	#RRREG_SELFCTL
    148  4dbf		       a9 55		      lda	#<RRNET_RESET
    149  4dc1		       a2 00		      ldx	#>RRNET_RESET
    150  4dc3		       20 1b 4e 	      jsr	RRNET_WRITEPAGE
    151  4dc6
    152  4dc6							;accept individual and broadcast packets
    153  4dc6		       a0 02		      ldy	#RRREG_RXCTL
    154  4dc8		       a9 05		      lda	#<RRNET_PROMISC
    155  4dca		       a2 0d		      ldx	#>RRNET_PROMISC
    156  4dcc		       20 1b 4e 	      jsr	RRNET_WRITEPAGE
    157  4dcf
    158  4dcf							;set the mac address
    159  4dcf		       a0 12		      ldy	#RRREG_IA0
    160  4dd1		       ad 25 4f 	      lda	CARD_MAC
    161  4dd4		       ae 26 4f 	      ldx	CARD_MAC+$01
    162  4dd7		       20 1b 4e 	      jsr	RRNET_WRITEPAGE
    163  4dda
    164  4dda		       a0 13		      ldy	#RRREG_IA1
    165  4ddc		       ad 27 4f 	      lda	CARD_MAC+$02
    166  4ddf		       ae 28 4f 	      ldx	CARD_MAC+$03
    167  4de2		       20 1b 4e 	      jsr	RRNET_WRITEPAGE
    168  4de5
    169  4de5		       a0 14		      ldy	#RRREG_IA2
    170  4de7		       ad 29 4f 	      lda	CARD_MAC+$04
    171  4dea		       ae 2a 4f 	      ldx	CARD_MAC+$05
    172  4ded		       20 1b 4e 	      jsr	RRNET_WRITEPAGE
    173  4df0
    174  4df0		       a0 06		      ldy	#RRREG_LINECTL
    175  4df2		       a9 d3		      lda	#<RRNET_RXTXEN
    176  4df4		       a2 00		      ldx	#>RRNET_RXTXEN
    177  4df6		       20 1b 4e 	      jsr	RRNET_WRITEPAGE
    178  4df9		       18		      clc
    179  4dfa		       60		      rts
    180  4dfb
    181  4dfb							;=============================================================================
    182  4dfb							; Set Packet Page to RRNET Register (y) into (x:a)
    183  4dfb				   RRNET_SETPAGE
    184  4dfb		       b9 30 4d 	      lda	RRREG_LO,y
    185  4dfe		       8d 02 de 	      sta	RRNET_PAGE
    186  4e01		       b9 45 4d 	      lda	RRREG_HI,y
    187  4e04		       8d 03 de 	      sta	RRNET_PAGE+$01
    188  4e07		       60		      rts
    189  4e08
    190  4e08							;=============================================================================
    191  4e08							; read RRNET Register (y) into (x:a)
    192  4e08				   RRNET_READPAGE
    193  4e08		       b9 30 4d 	      lda	RRREG_LO,y
    194  4e0b		       8d 02 de 	      sta	RRNET_PAGE
    195  4e0e		       b9 45 4d 	      lda	RRREG_HI,y
    196  4e11		       8d 03 de 	      sta	RRNET_PAGE+$01
    197  4e14		       ad 04 de 	      lda	RRNET_DAT0
    198  4e17		       ae 05 de 	      ldx	RRNET_DAT0+$01
    199  4e1a		       60		      rts
    200  4e1b
    201  4e1b							;=============================================================================
    202  4e1b							;write (x:a) to RRNET Register (y)
    203  4e1b				   RRNET_WRITEPAGE
    204  4e1b		       48		      pha
    205  4e1c		       b9 30 4d 	      lda	RRREG_LO,y
    206  4e1f		       8d 02 de 	      sta	RRNET_PAGE
    207  4e22		       b9 45 4d 	      lda	RRREG_HI,y
    208  4e25		       8d 03 de 	      sta	RRNET_PAGE+$01
    209  4e28		       68		      pla
    210  4e29		       8d 04 de 	      sta	RRNET_DAT0
    211  4e2c		       8e 05 de 	      stx	RRNET_DAT0+$01
    212  4e2f		       60		      rts
    213  4e30
    214  4e30							;=============================================================================
    215  4e30							;RECEIVE PACKET
    216  4e30							;read packet into buffer in (RECV_PTR), return packet len in (RECV_LEN)
    217  4e30				   RRNET_RECV
    218  4e30							;get incoming packet length
    219  4e30		       ad 09 de 	      lda	RRNET_RXTX0+$01
    220  4e33		       85 5c		      sta	RECV_LEN+$01
    221  4e35		       ad 08 de 	      lda	RRNET_RXTX0
    222  4e38		       85 5b		      sta	RECV_LEN
    223  4e3a
    224  4e3a		       a0 00		      ldy	#$00
    225  4e3c		       a6 5c		      ldx	RECV_LEN+$01
    226  4e3e
    227  4e3e		       f0 17		      beq	RRNET_RL1	;packet_length < 256
    228  4e40				   RRNET_RL0
    229  4e40		       ad 08 de 	      lda	RRNET_RXTX0
    230  4e43		       91 57		      sta	(RECV_PTR),y
    231  4e45		       c8		      iny
    232  4e46		       d0 02		      bne	RRNET_R0
    233  4e48		       e6 58		      inc	RECV_PTR+$01
    234  4e4a				   RRNET_R0
    235  4e4a		       ad 09 de 	      lda	RRNET_RXTX0+$01
    236  4e4d		       91 57		      sta	(RECV_PTR),y
    237  4e4f		       c8		      iny
    238  4e50		       d0 ee		      bne	RRNET_RL0
    239  4e52		       e6 58		      inc	RECV_PTR+$01
    240  4e54		       ca		      dex
    241  4e55		       d0 e9		      bne	RRNET_RL0
    242  4e57
    243  4e57				   RRNET_RL1
    244  4e57		       ad 08 de 	      lda	RRNET_RXTX0
    245  4e5a		       91 57		      sta	(RECV_PTR),y
    246  4e5c		       c8		      iny
    247  4e5d		       c4 5b		      cpy	RECV_LEN
    248  4e5f		       f0 0a		      beq	RRNET_READX
    249  4e61
    250  4e61		       ad 09 de 	      lda	RRNET_RXTX0+$01
    251  4e64		       91 57		      sta	(RECV_PTR),y
    252  4e66		       c8		      iny
    253  4e67		       c4 5b		      cpy	RECV_LEN
    254  4e69		       d0 ec		      bne	RRNET_RL1
    255  4e6b
    256  4e6b				   RRNET_READX
    257  4e6b		       18		      clc
    258  4e6c		       a5 5b		      lda	RECV_LEN
    259  4e6e		       a6 5c		      ldx	RECV_LEN+$01
    260  4e70		       60		      rts
    261  4e71
    262  4e71							;=============================================================================
    263  4e71							;TRANSMIT PACKET
    264  4e71							;transmit packet at (XMIT_PTR), (XMIT_LEN) bytes long
    265  4e71				   RRNET_XMIT
    266  4e71							;If this packet is less than $100 bytes...
    267  4e71		       a5 5e		      lda	XMIT_LEN+$01
    268  4e73		       f0 16		      beq	RRNET_X1
    269  4e75
    270  4e75				   RRNET_X0
    271  4e75		       a0 00		      ldy	#$00
    272  4e77				   RRNET_XL0
    273  4e77		       b1 59		      lda	(XMIT_PTR),y
    274  4e79		       8d 08 de 	      sta	RRNET_RXTX0
    275  4e7c		       c8		      iny
    276  4e7d		       b1 59		      lda	(XMIT_PTR),y
    277  4e7f		       8d 09 de 	      sta	RRNET_RXTX0+$01
    278  4e82		       c8		      iny
    279  4e83		       d0 f2		      bne	RRNET_XL0
    280  4e85
    281  4e85							;increment high byte of ptr
    282  4e85		       e6 5a		      inc	XMIT_PTR+$01
    283  4e87							;decrement high byte of length
    284  4e87		       c6 5e		      dec	XMIT_LEN+$01
    285  4e89		       d0 ea		      bne	RRNET_X0
    286  4e8b
    287  4e8b				   RRNET_X1		;last <$100 bytes
    288  4e8b		       a5 5d		      lda	XMIT_LEN	;are there any bytes left to send?
    289  4e8d		       f0 15		      beq	RRNET_XX
    290  4e8f
    291  4e8f		       aa		      tax		;XMIT_LEN in x
    292  4e90		       a0 00		      ldy	#$00
    293  4e92
    294  4e92				   RRNET_XL1
    295  4e92		       b1 59		      lda	(XMIT_PTR),y
    296  4e94		       8d 08 de 	      sta	RRNET_RXTX0
    297  4e97		       c8		      iny
    298  4e98		       b1 59		      lda	(XMIT_PTR),y
    299  4e9a		       8d 09 de 	      sta	RRNET_RXTX0+$01
    300  4e9d		       c8		      iny
    301  4e9e		       ca		      dex		;only XMIT_LEN bytes
    302  4e9f		       f0 03		      beq	RRNET_XX
    303  4ea1		       ca		      dex
    304  4ea2		       d0 ee		      bne	RRNET_XL1
    305  4ea4				   RRNET_XX
    306  4ea4		       60		      rts
    307  4ea5
------- FILE SIXNET.ASM
------- FILE CARD.ASM LEVEL 3 PASS 2
      0  4ea5					      include	"CARD.ASM"
      1  4ea5
      2  4ea5							;CARD LAYER===================================================================
      3  4ea5							;							 _,.-------.,_
      4  4ea5							;						     ,;~'	      '~;,
      5  4ea5							;						   ,;			  ;,
      6  4ea5							;						  ;			    ;
      7  4ea5							;						 ,'	   Style2006	    ',
      8  4ea5							;						,;			     ;,
      9  4ea5							;						; ;	 .	     .	    ; ;
     10  4ea5							;						| ;   ______	   ______   ; |
     11  4ea5							;						|  `/~"     ~" . "~	"~\'  |
     12  4ea5							;						|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     13  4ea5							; Last Edits 1/26/2006 			 |   |	      }:{	 |   |
     14  4ea5							; Six of Style 				 |   !	     / | \	 !   |
     15  4ea5							;						 .~  (__,.--" .^. "--.,__)  ~.
     16  4ea5							;						 |     ---;' / | \ `;---     |
     17  4ea5							;						  \__.	     \/^\/	 .__/
     18  4ea5							;						   V| \ 		/ |V
     19  4ea5							;						    | |T~\___!___!___/~T| |
     20  4ea5							;						    | |`IIII_I_I_I_IIII'| |
     21  4ea5							;						    |  \,III I I I III,/  |
     22  4ea5							;						     \	 `~~~~~~~~~~'	 /
     23  4ea5							;						       \   .	   .   /
     24  4ea5							;							 \.    ^    ./
     25  4ea5							;							   ^~~~^~~~^
     26  4ea5							;
     27  4ea5		       00 00	   CARD_STATUS_IDLE =	0	;
     28  4ea5		       00 01	   CARD_STATUS_READING =	1	;
     29  4ea5		       00 02	   CARD_STATUS_WRITING =	2	;
     30  4ea5
     31  4ea5
     32  4ea5							;DETECT CARD==================================================================
     33  4ea5							;Detects net card installed, sets card type, sets carry on error, clears on
     34  4ea5							;good
     35  4ea5				   CARD_DETECT
     36  4ea5							;Check for ETH64
     37  4ea5		       18		      clc
     38  4ea6		       ad 1f de 	      lda	ETH64_BANK+1
     39  4ea9		       c9 33		      cmp	#$33
     40  4eab		       f0 23		      beq	ETH_64_FOUND
     41  4ead
     42  4ead							;Check for RRNET
     43  4ead							;switch on accessory connector
     44  4ead		       ad 01 de 	      lda	$de01
     45  4eb0		       29 b8		      and	#%10111000
     46  4eb2		       09 01		      ora	#%00000001
     47  4eb4		       8d 01 de 	      sta	$de01
     48  4eb7							;check for the first 2 magic bytes
     49  4eb7		       a0 00		      ldy	#0
     50  4eb9		       20 08 4e 	      jsr	RRNET_READPAGE
     51  4ebc		       c9 0e		      cmp	#<RRNET_MAGIC
     52  4ebe		       d0 09		      bne	NO_CARD_FOUND
     53  4ec0		       e0 63		      cpx	#>RRNET_MAGIC
     54  4ec2							;RR-Net found
     55  4ec2		       a9 02		      lda	#$02
     56  4ec4		       8d 24 4f 	      sta	CARD_TYPE
     57  4ec7		       18		      clc
     58  4ec8		       60		      rts
     59  4ec9				   NO_CARD_FOUND
     60  4ec9		       a9 00		      lda	#$00
     61  4ecb		       8d 24 4f 	      sta	CARD_TYPE
     62  4ece		       38		      sec
     63  4ecf		       60		      rts
     64  4ed0				   ETH_64_FOUND
     65  4ed0		       a9 01		      lda	#$01
     66  4ed2		       8d 24 4f 	      sta	CARD_TYPE
     67  4ed5		       18		      clc
     68  4ed6		       60		      rts
     69  4ed7
     70  4ed7							;INITIALIZE CARD==============================================================
     71  4ed7							;Initializes detected card, carry set on error
     72  4ed7				   CARD_INIT
     73  4ed7		       ad 24 4f 	      lda	CARD_TYPE
     74  4eda		       c9 01		      cmp	#$01
     75  4edc		       d0 03		      bne	CARD_I0
     76  4ede		       4c c9 4c 	      jmp	ETH64_INIT
     77  4ee1				   CARD_I0
     78  4ee1		       c9 02		      cmp	#$02
     79  4ee3		       d0 03		      bne	CARD_IE
     80  4ee5		       4c bd 4d 	      jmp	RRNET_INIT
     81  4ee8				   CARD_IE
     82  4ee8		       38		      sec
     83  4ee9		       60		      rts
     84  4eea
     85  4eea
     86  4eea							;POLL FOR PACKET==============================================================
     87  4eea							;Polls for packet, returns a=1 if packet available, a=0 if not, carry on error
     88  4eea				   CARD_POLL
     89  4eea		       ad 24 4f 	      lda	CARD_TYPE
     90  4eed		       c9 01		      cmp	#$01
     91  4eef		       d0 03		      bne	CARD_P0
     92  4ef1		       4c b2 4c 	      jmp	ETH64_POLL
     93  4ef4				   CARD_P0
     94  4ef4		       c9 02		      cmp	#$02
     95  4ef6		       d0 03		      bne	CARD_PE
     96  4ef8		       4c aa 4d 	      jmp	RRNET_POLL
     97  4efb				   CARD_PE
     98  4efb		       38		      sec
     99  4efc		       60		      rts
    100  4efd
    101  4efd							;READ PACKET==================================================================
    102  4efd							;Reads packet into INPACKET and puts length in IN_PACKET_LENGTH
    103  4efd				   CARD_READ
    104  4efd		       ad 24 4f 	      lda	CARD_TYPE
    105  4f00		       c9 01		      cmp	#$01
    106  4f02		       d0 03		      bne	CARD_R0
    107  4f04		       4c 44 4c 	      jmp	ETH64_READ
    108  4f07				   CARD_R0
    109  4f07		       c9 02		      cmp	#$02
    110  4f09		       d0 03		      bne	CARD_RE
    111  4f0b		       4c 8e 4d 	      jmp	RRNET_READ
    112  4f0e				   CARD_RE
    113  4f0e		       38		      sec
    114  4f0f		       60		      rts
    115  4f10
    116  4f10
    117  4f10							;SEND PACKET==================================================================
    118  4f10				   CARD_SEND
    119  4f10							;	PRINT 13,"card send called",13
    120  4f10		       ad 24 4f 	      lda	CARD_TYPE
    121  4f13		       c9 01		      cmp	#$01
    122  4f15		       d0 03		      bne	CARD_S0
    123  4f17		       4c ec 4b 	      jmp	ETH64_SEND
    124  4f1a				   CARD_S0
    125  4f1a		       c9 02		      cmp	#$02
    126  4f1c		       d0 03		      bne	CARD_SE
    127  4f1e		       4c 5a 4d 	      jmp	RRNET_SEND
    128  4f21				   CARD_SE
    129  4f21		       38		      sec
    130  4f22		       60		      rts
    131  4f23
    132  4f23
    133  4f23							;DATA=========================================================================
    134  4f23							;CARD_STATUS	dc.b $00
    135  4f23							;
    136  4f23				   CONFIGURATION
    137  4f23							;
    138  4f23							;CFG_LOADED	dc.b $00
    139  4f23							;CARD_TYPE	dc.b $02    ; 0=None, 1=ETH64, 2=RR-Net
    140  4f23							;CARD_AUTO	dc.b $01    ; 0=auto, 1=static
    141  4f23							;CARD_MAC	dc.b $00,$80,$10,$0c,$64,$00
    142  4f23							;CARD_IP		dc.b 192,168,1,66
    143  4f23							;CARD_MASK	dc.b 255,255,255,0
    144  4f23							;CARD_GATE	dc.b 192,168,1,1
    145  4f23							;CARD_NS1	dc.b 0,0,0,0
    146  4f23				   CONFIG_END
    147  4f23							;;end configuration file
    148  4f23							;
    149  4f23							;CARD_BCAST_IP	dc.b 255,255,255,255
    150  4f23							;CARD_BCAST_MAC	dc.b 255,255,255,255,255,255
    151  4f23							;CARD_NOMAC	dc.b 0,0,0,0,0,0
    152  4f23							;CARD_GATE_MAC	dc.b 0,0,0,0,0,0
    153  4f23		       00	   CARD_STATUS dc.b	$00
    154  4f24		       00	   CARD_TYPE  dc.b	$00	; 0=None, 1=ETH64, 2=RR-Net
    155  4f25		       00 80 10 0c*CARD_MAC   dc.b	$00,$80,$10,$0c,$64,$06
    156  4f2b
    157  4f2b		       c0 a8 00 80 CARD_IP    dc.b	192,168,0,128
    158  4f2f
    159  4f2f		       ff ff ff 00 CARD_MASK  dc.b	255,255,255,0
    160  4f33
    161  4f33		       c0 a8 00 01 CARD_GATE  dc.b	192,168,0,1
    162  4f37		       d8 44 04 0a CARD_NS1   dc.b	216,68,4,10
    163  4f3b		       ff ff ff ff CARD_BCAST_IP dc.b	255,255,255,255
    164  4f3f
    165  4f3f		       ff ff ff ff*CARD_BCAST_MAC dc.b	255,255,255,255,255,255
    166  4f45		       00 00 00 00*CARD_NOMAC dc.b	0,0,0,0,0,0
    167  4f4b
    168  4f4b		       00 00 00 00*CARD_GATE_MAC dc.b	$00,$00,$00,$00,$00,$00
------- FILE SIXNET.ASM
------- FILE MAC.ASM LEVEL 3 PASS 2
      0  4f51					      include	"MAC.ASM"
      1  4f51							;Source by Six of Style (Oliver VieBrooks)
      2  4f51							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  4f51							;
      4  4f51							;Last Updated 1/26/2006
      5  4f51							;
      6  4f51							;MAC PROTOCOL=================================================================
      7  4f51							;							 _,.-------.,_
      8  4f51							;MAC PACKET FORMAT:				     ,;~'	      '~;,
      9  4f51							;+----------+					   ,;			  ;,
     10  4f51							;|$00-$0d   |					  ;			    ;
     11  4f51							;+----------+					 ,'	   Style2006	    ',
     12  4f51							;|MAC Header|					,;			     ;,
     13  4f51							;+----------+					; ;	 .	     .	    ; ;
     14  4f51							;						| ;   ______	   ______   ; |
     15  4f51							;MAC Header Fields:				|  `/~"     ~" . "~	"~\'  |
     16  4f51							;$00 - Destination MAC 			|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  4f51							;$06 - Source MAC				 |   |	      }:{	 |   |
     18  4f51							;$0c - Packet Type				 |   !	     / | \	 !   |
     19  4f51							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  4f51							;						 |     ---;' / | \ `;---     |
     21  4f51							;						  \__.	     \/^\/	 .__/
     22  4f51							;						   V| \ 		/ |V
     23  4f51							;						    | |T~\___!___!___/~T| |
     24  4f51							;						    | |`IIII_I_I_I_IIII'| |
     25  4f51							;						    |  \,III I I I III,/  |
     26  4f51							;						     \	 `~~~~~~~~~~'	 /
     27  4f51							;						       \   .	   .   /
     28  4f51							;							 \.    ^    ./
     29  4f51							;							   ^~~~^~~~^
     30  4f51							;
     31  4f51		       00 00	   MAC_STATUS_IDLE =	0	;
     32  4f51		       00 01	   MAC_STATUS_BUSY =	1	;
     33  4f51
     34  4f51				   MAC_HEADER
     35  4f51		       00 00 00 00*MAC_DEST   dc.b	$00,$00,$00,$00,$00,$00
     36  4f57		       00 00 00 00*MAC_SRC    dc.b	$00,$00,$00,$00,$00,$00
     37  4f5d		       00 00	   MAC_TYPE   dc.w	$00
     38  4f5f
     39  4f5f		       00 00	   MAC_DATALEN dc.b	$00,$00
     40  4f61		       00 00	   MAC_DATAADDR dc.b	$00,$00
     41  4f63		       00	   MAC_STATUS dc.b	$00
     42  4f64
     43  4f64							;Procedure for sending -
     44  4f64							;Wait until MAC_STATUS = MAC_IDLE
     45  4f64							;Set MAC_DEST
     46  4f64							;Set MAC_SRC <- can be optimized out
     47  4f64							;Set MAC_TYPE
     48  4f64							;Set MAC_DATALEN
     49  4f64							;Set MAC_DATAADDR
     50  4f64							;jsr MAC_SEND
     51  4f64
     52  4f64
     53  4f64							;=============================================================================
     54  4f64				   MAC_INIT
     55  4f64		       a9 00		      lda	#MAC_STATUS_IDLE
     56  4f66		       8d 63 4f 	      sta	MAC_STATUS
     57  4f69		       60		      rts
     58  4f6a							;=============================================================================
     59  4f6a				   MAC_PROCESS
     60  4f6a							;First, is this an arp packet?
     61  4f6a		       ad 42 74 	      lda	INPACKET+$0c
     62  4f6d		       c9 08		      cmp	#$08
     63  4f6f		       d0 0f		      bne	UPT	;Unknown Packet Type
     64  4f71		       ad 43 74 	      lda	INPACKET+$0d
     65  4f74		       d0 03		      bne	notIP
     66  4f76
     67  4f76		       4c b7 62 	      jmp	IP_PROCESS
     68  4f79				   notIP
     69  4f79		       c9 06		      cmp	#$06	;Is it an ARP packet?
     70  4f7b		       d0 03		      bne	UPT
     71  4f7d
     72  4f7d		       4c 70 50 	      jmp	ARP_PROCESS
     73  4f80				   UPT
     74  4f80		       60		      rts
     75  4f81							;=============================================================================
     76  4f81				   MAC_SEND		;expects nothing.
     77  4f81							;	PRINT 13,"mac send called",13
     78  4f81		       a9 01		      lda	#MAC_STATUS_BUSY
     79  4f83		       8d 63 4f 	      sta	MAC_STATUS
     80  4f86
     81  4f86							;set outpacket length = mac_datalen+$0e
     82  4f86		       ad 60 4f 	      lda	MAC_DATALEN+1
     83  4f89		       8d 2f 74 	      sta	OUT_PACKET_LENGTH+1
     84  4f8c		       ad 5f 4f 	      lda	MAC_DATALEN
     85  4f8f		       18		      clc
     86  4f90		       69 0e		      adc	#$0e
     87  4f92		       8d 2e 74 	      sta	OUT_PACKET_LENGTH
     88  4f95		       90 03		      bcc	MAC_SENDA
     89  4f97		       ee 2f 74 	      inc	OUT_PACKET_LENGTH+1
     90  4f9a
     91  4f9a				   MAC_SENDA
     92  4f9a							;generate outpacket
     93  4f9a		       a2 00		      ldx	#$00
     94  4f9c				   MAC_SEND0
     95  4f9c		       bd 51 4f 	      lda	MAC_HEADER,x
     96  4f9f		       9d 36 78 	      sta	OUTPACKET,x
     97  4fa2		       e8		      inx
     98  4fa3		       e0 0e		      cpx	#$0e
     99  4fa5		       d0 f5		      bne	MAC_SEND0
    100  4fa7
    101  4fa7							;copy data into outpacket
    102  4fa7
    103  4fa7		       ad 61 4f 	      lda	MAC_DATAADDR
    104  4faa		       85 63		      sta	CPY_SRC
    105  4fac		       ad 62 4f 	      lda	MAC_DATAADDR+1
    106  4faf		       85 64		      sta	CPY_SRC+1
    107  4fb1		       a9 44		      lda	#<(OUTPACKET+$0e)
    108  4fb3		       85 65		      sta	CPY_DST
    109  4fb5		       a9 78		      lda	#>(OUTPACKET+$0e)
    110  4fb7		       85 66		      sta	CPY_DST+1
    111  4fb9		       ae 60 4f 	      ldx	MAC_DATALEN+1
    112  4fbc		       ad 5f 4f 	      lda	MAC_DATALEN
    113  4fbf		       20 c9 48 	      jsr	copyblock
    114  4fc2
    115  4fc2		       20 10 4f 	      jsr	CARD_SEND
    116  4fc5
    117  4fc5		       a9 00		      lda	#MAC_STATUS_IDLE
    118  4fc7		       8d 63 4f 	      sta	MAC_STATUS
    119  4fca		       60		      rts
    120  4fcb							;=============================================================================
    121  4fcb				   MAC_SETDATALEN		; expects data length in (x:a)
    122  4fcb		       8d 5f 4f 	      sta	MAC_DATALEN
    123  4fce		       8e 60 4f 	      stx	MAC_DATALEN+1
    124  4fd1		       60		      rts
    125  4fd2							;=============================================================================
    126  4fd2				   MAC_SETDATAADDR		; expects data ADDR (x:a)
    127  4fd2		       8d 61 4f 	      sta	MAC_DATAADDR
    128  4fd5		       8e 62 4f 	      stx	MAC_DATAADDR+1
    129  4fd8		       60		      rts
    130  4fd9							;=============================================================================
    131  4fd9				   MAC_SETDEST		; expects dest MAC in (x:a)
    132  4fd9
    133  4fd9		       8d e2 4f 	      sta	MAC_SD1+$01
    134  4fdc		       8e e3 4f 	      stx	MAC_SD1+$02
    135  4fdf		       a2 00		      ldx	#$00
    136  4fe1				   MAC_SD1
    137  4fe1		       bd ff ff 	      lda	$ffff,x
    138  4fe4		       9d 51 4f 	      sta	MAC_DEST,x
    139  4fe7		       e8		      inx
    140  4fe8		       e0 06		      cpx	#$06
    141  4fea		       d0 f5		      bne	MAC_SD1
    142  4fec		       60		      rts
    143  4fed							;=============================================================================
    144  4fed				   MAC_SETSRC		;sets source to card_MAC
    145  4fed
    146  4fed		       ad 25 4f 	      lda	CARD_MAC
    147  4ff0		       8d 57 4f 	      sta	MAC_SRC
    148  4ff3		       ad 26 4f 	      lda	CARD_MAC+1
    149  4ff6		       8d 58 4f 	      sta	MAC_SRC+1
    150  4ff9		       ad 27 4f 	      lda	CARD_MAC+2
    151  4ffc		       8d 59 4f 	      sta	MAC_SRC+2
    152  4fff		       ad 28 4f 	      lda	CARD_MAC+3
    153  5002		       8d 5a 4f 	      sta	MAC_SRC+3
    154  5005		       ad 29 4f 	      lda	CARD_MAC+4
    155  5008		       8d 5b 4f 	      sta	MAC_SRC+4
    156  500b		       ad 2a 4f 	      lda	CARD_MAC+5
    157  500e		       8d 5c 4f 	      sta	MAC_SRC+5
    158  5011		       60		      rts
    159  5012							;=============================================================================
    160  5012				   MAC_SETTYPE		;Expects packet type in (x:a)
    161  5012		       8e 5d 4f 	      stx	MAC_TYPE
    162  5015		       8d 5e 4f 	      sta	MAC_TYPE+1
    163  5018		       60		      rts
    164  5019
    165  5019							;That's all, folks.  Time for a beer
    166  5019							;
    167  5019							;	  [~]
    168  5019							;	  |=|
    169  5019							;	.-' '-.
    170  5019							;	|-----|  Warsteiner
    171  5019							;	| ~~~ |  "Die Konigen unter den bieren"
    172  5019							;	| ~~~ |
    173  5019							;	| WAR |
    174  5019							;	|-----|
    175  5019							;	'-----'
    176  5019							;
    177  5019							;
    178  5019							;
    179  5019							;Six of DLoC 2004
------- FILE SIXNET.ASM
------- FILE ARP.ASM LEVEL 3 PASS 2
      0  5019					      include	"ARP.ASM"
      1  5019							;Source by Six of Style (Oliver VieBrooks)
      2  5019							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  5019							;
      4  5019							;Last Updated 1/25/2006
      5  5019							;
      6  5019							;ARP PROTOCOL=================================================================
      7  5019							;							 _,.-------.,_
      8  5019							;ARP PACKET FORMAT:				     ,;~'	      '~;,
      9  5019							;+----------+----------+--------+		   ,;			  ;,
     10  5019							;|$00-$0d   |$0e-$15	|$16-$29 |		  ;			    ;
     11  5019							;+----------+----------+--------+		 ,'	   Style 2006	    ',
     12  5019							;|MAC Header|ARP Header|ARP Data|		,;			     ;,
     13  5019							;+----------+----------+--------+		; ;	 .	     .	    ; ;
     14  5019							;						| ;   ______	   ______   ; |
     15  5019							;MAC Header Fields:				|  `/~"     ~" . "~	"~\'  |
     16  5019							;$00 - Destination MAC 			|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  5019							;$06 - Source MAC				 |   |	      }:{	 |   |
     18  5019							;$0c - Packet Type				 |   !	     / | \	 !   |
     19  5019							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  5019							;ARP Header Fields:				 |     ---;' / | \ `;---     |
     21  5019							;$0e - Hardware MAC Address Type		  \__.	     \/^\/	 .__/
     22  5019							;$10 - Protocol Address Type			   V| \ 		/ |V
     23  5019							;$12 - Hardware MAC Address Size		    | |T~\___!___!___/~T| |
     24  5019							;$13 - Protocol Address Size			    | |`IIII_I_I_I_IIII'| |
     25  5019							;$14 - Opcode					    |  \,III I I I III,/  |
     26  5019							;						     \	 `~~~~~~~~~~'	 /
     27  5019							;ARP Data Fields				       \   .	   .   /
     28  5019							;$16 - Sender MAC Address				 \.    ^    ./
     29  5019							;$1c - Sender IP Address				   ^~~~^~~~^
     30  5019							;$20 - Target MAC Address
     31  5019							;$26 - Target IP Address
     32  5019							;
     33  5019		       00 00	   ARP_STATE_IDLE =	$00
     34  5019		       00 01	   ARP_STATE_REQ =	$01
     35  5019		       00 02	   ARP_STATE_REPLY =	$02
     36  5019
     37  5019		       00 01	   ARP_T_REQUEST =	$01
     38  5019		       00 02	   ARP_T_REPLY =	$02
     39  5019
     40  5019							;size of an arp packet sans mac header
     41  5019		       00 1c	   ARP_SIZE   =	$1c
     42  5019
     43  5019		       00 00	   ARP_ADDR_SRC_MAC =	$00
     44  5019		       00 01	   ARP_ADDR_DST_MAC =	$01
     45  5019		       00 02	   ARP_ADDR_SRC_IP =	$02
     46  5019		       00 03	   ARP_ADDR_DST_IP =	$03
     47  5019		       00 04	   ARP_ADDR_RES_MAC =	$04
     48  5019
     49  5019		       00 01	   ARP_OPCODE_REQUEST =	$01
     50  5019		       00 02	   ARP_OPCODE_REPLY =	$02
     51  5019
     52  5019							;ARP Engine State Holder
     53  5019		       00	   ARP_STATE  dc.b	$00
     54  501a
     55  501a							;Resolved MAC when resolving
     56  501a		       00 00 00 00*ARP_MAC    dc.b	$00,$00,$00,$00,$00,$00
     57  5020
     58  5020				   ARP_HEADER
     59  5020		       00 01	   ARP_HW_TYPE dc.b	$00,$01	;Hardware Type <-STATIC
     60  5022		       08 00	   ARP_PROT_TYPE dc.b	$08,$00	;Protocol Type <-STATIC
     61  5024		       06	   ARP_HW_SIZE dc.b	$06	;HW Size	<-STATIC
     62  5025		       04	   ARP_PROT_SIZE dc.b	$04	;Protocol Size <-STATIC
     63  5026		       00 00	   ARP_OPCODE dc.b	$00,$00
     64  5028
     65  5028				   ARP_DATA
     66  5028		       00 00 00 00*ARP_SRC_MAC dc.b	$00,$00,$00,$00,$00,$00
     67  502e		       00 00 00 00 ARP_SRC_IP dc.b	$00,$00,$00,$00
     68  5032		       00 00 00 00*ARP_DST_MAC dc.b	$00,$00,$00,$00,$00,$00
     69  5038		       00 00 00 00 ARP_DST_IP dc.b	$00,$00,$00,$00
     70  503c
     71  503c		       00 00 00 00 ARP_CACHE_I dc.b	$00,$00,$00,$00
     72  5040		       00 00 00 00	      dc.b	$00,$00,$00,$00
     73  5044		       00 00 00 00	      dc.b	$00,$00,$00,$00
     74  5048		       00 00 00 00	      dc.b	$00,$00,$00,$00
     75  504c
     76  504c		       00 00 00 00*ARP_CACHE_M dc.b	$00,$00,$00,$00,$00,$00
     77  5052		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00
     78  5058		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00
     79  505e		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00
     80  5064							;broadcast
     81  5064		       ff ff ff ff*MAC_BCAST  dc.b	255,255,255,255,255,255
     82  506a
     83  506a		       00 05	   ARP_CACHE_DEPTH =	5	;adjustable
     84  506a
     85  506a							;To Request a MAC-
     86  506a							;Init ARP Header <-Lots of this can be optimized out
     87  506a							;Set SRC MAC+IP <-Can be optimized out
     88  506a							;Set Dest MAC+IP
     89  506a							;call ARP_SEND
     90  506a
     91  506a							;=============================================================================
     92  506a							;Initialize ARP by setting it's state to idle
     93  506a				   ARP_INIT
     94  506a		       a9 00		      lda	#ARP_STATE_IDLE
     95  506c		       8d 19 50 	      sta	ARP_STATE
     96  506f		       60		      rts
     97  5070
     98  5070							;=============================================================================
     99  5070							;Process a packet which has been pre-determined to be an ARP packet
    100  5070				   ARP_PROCESS
    101  5070							;Is this an ARP Request?
    102  5070		       ad 4b 74 	      lda	INPACKET+$15
    103  5073		       c9 01		      cmp	#ARP_T_REQUEST
    104  5075		       d0 03		      bne	notARPREQ
    105  5077							;It is?  Well, let's reply to the damn thing, then.
    106  5077		       20 d8 50 	      jsr	ARP_RESPOND
    107  507a				   notARPREQ
    108  507a							;It's not a request.  Is it an ARP reply?
    109  507a		       ad 4b 74 	      lda	INPACKET+$15
    110  507d		       c9 02		      cmp	#ARP_T_REPLY
    111  507f		       d0 03		      bne	ARP_Exit
    112  5081		       20 a1 50 	      jsr	ARP_PROCREPLY
    113  5084				   ARP_Exit
    114  5084		       60		      rts
    115  5085							;=============================================================================
    116  5085							;Send current ARP packet (expects MAC dst already set)
    117  5085				   ARP_SEND
    118  5085							;	PRINT 13,"arp send called",13
    119  5085
    120  5085		       20 ed 4f 	      jsr	MAC_SETSRC	;<-This can be optimized out
    121  5088							;set packet type to ARP ($0806)
    122  5088		       a2 08		      ldx	#$08
    123  508a		       a9 06		      lda	#$06
    124  508c		       20 12 50 	      jsr	MAC_SETTYPE
    125  508f		       a9 20		      lda	#<ARP_HEADER
    126  5091		       a2 50		      ldx	#>ARP_HEADER
    127  5093		       20 d2 4f 	      jsr	MAC_SETDATAADDR
    128  5096		       a9 1c		      lda	#ARP_SIZE
    129  5098		       a2 00		      ldx	#$00
    130  509a		       20 cb 4f 	      jsr	MAC_SETDATALEN
    131  509d		       20 81 4f 	      jsr	MAC_SEND
    132  50a0		       60		      rts
    133  50a1
    134  50a1							;=============================================================================
    135  50a1							;Process an incoming ARP REPLY
    136  50a1				   ARP_PROCREPLY
    137  50a1							;Were we actually WAITING for a reply?
    138  50a1		       ad 19 50 	      lda	ARP_STATE
    139  50a4		       c9 01		      cmp	#ARP_STATE_REQ
    140  50a6		       d0 dc		      bne	ARP_Exit
    141  50a8
    142  50a8							;Compare IP to ARP_IP
    143  50a8		       ad 52 74 	      lda	INPACKET+$1c
    144  50ab		       cd 38 50 	      cmp	ARP_DST_IP
    145  50ae		       d0 d4		      bne	ARP_Exit
    146  50b0		       ad 53 74 	      lda	INPACKET+$1d
    147  50b3		       cd 39 50 	      cmp	ARP_DST_IP+$01
    148  50b6		       d0 cc		      bne	ARP_Exit
    149  50b8		       ad 54 74 	      lda	INPACKET+$1e
    150  50bb		       cd 3a 50 	      cmp	ARP_DST_IP+$02
    151  50be		       d0 c4		      bne	ARP_Exit
    152  50c0		       ad 55 74 	      lda	INPACKET+$1f
    153  50c3		       cd 3b 50 	      cmp	ARP_DST_IP+$03
    154  50c6		       d0 bc		      bne	ARP_Exit
    155  50c8							;I'll be damned.  It IS the one we were waiting for.
    156  50c8							;Copy it's MAC and we're done
    157  50c8		       a9 4c		      lda	#<(INPACKET+$16)
    158  50ca		       a2 74		      ldx	#>(INPACKET+$16)
    159  50cc		       a0 04		      ldy	#ARP_ADDR_RES_MAC
    160  50ce		       20 71 51 	      jsr	ARP_SET_ADDR
    161  50d1
    162  50d1							;ARP status is now idle again.
    163  50d1		       a9 00		      lda	#ARP_STATE_IDLE
    164  50d3		       8d 19 50 	      sta	ARP_STATE
    165  50d6		       60		      rts
    166  50d7
    167  50d7
    168  50d7							;=============================================================================
    169  50d7							;Build a packet in response to an ARP request for our MAC
    170  50d7							;
    171  50d7				   ARP_RESP_x
    172  50d7		       60		      rts
    173  50d8				   ARP_RESPOND
    174  50d8							;It is?  Well then, is it for our own IP?
    175  50d8		       ad 5c 74 	      lda	INPACKET+$26
    176  50db		       cd 2b 4f 	      cmp	CARD_IP
    177  50de		       d0 f7		      bne	ARP_RESP_x
    178  50e0		       ad 5d 74 	      lda	INPACKET+$27
    179  50e3		       cd 2c 4f 	      cmp	CARD_IP+$01
    180  50e6		       d0 ef		      bne	ARP_RESP_x
    181  50e8		       ad 5e 74 	      lda	INPACKET+$28
    182  50eb		       cd 2d 4f 	      cmp	CARD_IP+$02
    183  50ee		       d0 e7		      bne	ARP_RESP_x
    184  50f0		       ad 5f 74 	      lda	INPACKET+$29
    185  50f3		       cd 2e 4f 	      cmp	CARD_IP+$03
    186  50f6		       d0 df		      bne	ARP_RESP_x
    187  50f8							;First we must build the MAC header
    188  50f8							;Copy Destination MAC to OUTPACKET:00
    189  50f8							;We can get this from the packet we're responding to:
    190  50f8		       a9 4c		      lda	#<(INPACKET+$16)
    191  50fa		       a2 74		      ldx	#>(INPACKET+$16)
    192  50fc		       20 d9 4f 	      jsr	MAC_SETDEST
    193  50ff
    194  50ff							;Set Opcode to ARP_REPLY
    195  50ff		       a9 02		      lda	#ARP_OPCODE_REPLY
    196  5101		       20 68 51 	      jsr	ARP_SET_OPCODE
    197  5104
    198  5104							;My MAC is the source MAC Address <-Can be optimized out
    199  5104		       a9 25		      lda	#<CARD_MAC
    200  5106		       a2 4f		      ldx	#>CARD_MAC
    201  5108		       a0 00		      ldy	#ARP_ADDR_SRC_MAC
    202  510a		       20 71 51 	      jsr	ARP_SET_ADDR
    203  510d
    204  510d							;My IP is the Source IP Address <- Can be optimized out
    205  510d		       a9 2b		      lda	#<CARD_IP
    206  510f		       a2 4f		      ldx	#>CARD_IP
    207  5111		       a0 02		      ldy	#ARP_ADDR_SRC_IP
    208  5113		       20 71 51 	      jsr	ARP_SET_ADDR
    209  5116
    210  5116							;Set Dest MAC
    211  5116							;The INPACKET has the request we're responding to, so let's pull from it.
    212  5116		       a9 4c		      lda	#<(INPACKET+$16)
    213  5118		       a2 74		      ldx	#>(INPACKET+$16)
    214  511a		       a0 01		      ldy	#ARP_ADDR_DST_MAC
    215  511c		       20 71 51 	      jsr	ARP_SET_ADDR
    216  511f
    217  511f							;Set MAC_DEST
    218  511f							;The INPACKET has the request we're responding to, so let's pull from it.
    219  511f		       a9 4c		      lda	#<(INPACKET+$16)
    220  5121		       a2 74		      ldx	#>(INPACKET+$16)
    221  5123		       20 d9 4f 	      jsr	MAC_SETDEST
    222  5126
    223  5126							;Set Dest IP
    224  5126		       a9 52		      lda	#<(INPACKET+$1c)
    225  5128		       a2 74		      ldx	#>(INPACKET+$1c)
    226  512a		       a0 03		      ldy	#ARP_ADDR_DST_IP
    227  512c		       20 71 51 	      jsr	ARP_SET_ADDR
    228  512f
    229  512f							;send
    230  512f		       20 85 50 	      jsr	ARP_SEND
    231  5132		       60		      rts
    232  5133							;=============================================================================
    233  5133							;Send a request for a MAC Expects IP at (x:a)
    234  5133							;
    235  5133				   ARP_REQUEST
    236  5133							;Set Dest IP
    237  5133		       a0 03		      ldy	#ARP_ADDR_DST_IP
    238  5135		       20 71 51 	      jsr	ARP_SET_ADDR
    239  5138
    240  5138							;Set MAC_DEST to Broadcast
    241  5138		       a9 3f		      lda	#<CARD_BCAST_MAC
    242  513a		       a2 4f		      ldx	#>CARD_BCAST_MAC
    243  513c		       20 d9 4f 	      jsr	MAC_SETDEST
    244  513f
    245  513f							;Set Opcode to ARP_REQUEST
    246  513f		       a9 01		      lda	#ARP_OPCODE_REQUEST
    247  5141		       20 68 51 	      jsr	ARP_SET_OPCODE
    248  5144
    249  5144							;My MAC is the source MAC Address
    250  5144		       a9 25		      lda	#<CARD_MAC
    251  5146		       a2 4f		      ldx	#>CARD_MAC
    252  5148		       a0 00		      ldy	#ARP_ADDR_SRC_MAC
    253  514a		       20 71 51 	      jsr	ARP_SET_ADDR
    254  514d
    255  514d							;My IP is the Source IP Address
    256  514d		       a9 2b		      lda	#<CARD_IP
    257  514f		       a2 4f		      ldx	#>CARD_IP
    258  5151		       a0 02		      ldy	#ARP_ADDR_SRC_IP
    259  5153		       20 71 51 	      jsr	ARP_SET_ADDR
    260  5156
    261  5156							;Set Dest MAC
    262  5156		       a9 45		      lda	#<CARD_NOMAC
    263  5158		       a2 4f		      ldx	#>CARD_NOMAC
    264  515a		       a0 01		      ldy	#ARP_ADDR_DST_MAC
    265  515c		       20 71 51 	      jsr	ARP_SET_ADDR
    266  515f
    267  515f							;send packet
    268  515f		       20 85 50 	      jsr	ARP_SEND
    269  5162
    270  5162							;set status
    271  5162		       a9 01		      lda	#ARP_STATE_REQ
    272  5164		       8d 19 50 	      sta	ARP_STATE
    273  5167		       60		      rts
    274  5168
    275  5168							;=============================================================================
    276  5168				   ARP_SET_OPCODE
    277  5168		       8d 27 50 	      sta	ARP_OPCODE+1
    278  516b		       a9 00		      lda	#$00
    279  516d		       8d 26 50 	      sta	ARP_OPCODE
    280  5170		       60		      rts
    281  5171							;=============================================================================
    282  5171				   ARP_SET_ADDR 		;expects pointer in x:a,
    283  5171							;y = 0 for SRC_MAC
    284  5171							;y = 1 for DST_MAC
    285  5171							;y = 2 for SRC_IP
    286  5171							;y = 3 for DST_IP
    287  5171
    288  5171		       8d 8c 51 	      sta	ASSM_S+1
    289  5174		       8e 8d 51 	      stx	ASSM_S+2
    290  5177
    291  5177		       b9 9c 51 	      lda	ASSM_L,y
    292  517a		       8d 8f 51 	      sta	ASSM_D+1
    293  517d		       b9 97 51 	      lda	ASSM_H,y
    294  5180		       8d 90 51 	      sta	ASSM_D+2
    295  5183		       b9 a1 51 	      lda	ASSM_C,y
    296  5186		       8d 93 51 	      sta	ASSM_N+1
    297  5189
    298  5189		       a2 00		      ldx	#$00
    299  518b		       bd ff ff    ASSM_S     lda	$ffff,x
    300  518e		       9d ff ff    ASSM_D     sta	$ffff,x
    301  5191		       e8		      inx
    302  5192		       e0 06	   ASSM_N     cpx	#$06
    303  5194		       d0 f5		      bne	ASSM_S
    304  5196		       60		      rts
    305  5197				   ASSM_H
    306  5197		       50 50 50 50	      dc.b	#>ARP_SRC_MAC,#>ARP_DST_MAC,#>ARP_SRC_IP,#>ARP_DST_IP
    307  519b		       50		      dc.b	#>ARP_MAC
    308  519c				   ASSM_L
    309  519c		       28 32 2e 38	      dc.b	#<ARP_SRC_MAC,#<ARP_DST_MAC,#<ARP_SRC_IP,#<ARP_DST_IP
    310  51a0		       1a		      dc.b	#<ARP_MAC
    311  51a1				   ASSM_C
    312  51a1		       06 06 04 04*	      dc.b	6,6,4,4,6
    313  51a6							;=============================================================================
    314  51a6				   GET_ARP		;expects IP in x:a, returns carry clear if success,
    315  51a6							;carry set if timeout or keyhit
    316  51a6							;returns pointer to resolved MAC in x:a
    317  51a6
      0  51a6					      IPRINT	CS_L,CS_R	;This does absolutely nothing, but I can't ping the 64 without it (LB)
      1  51a6		       20 45 48 	      jsr	iprns
      2  51a9		       9d 1d 00 	      dc.b	CS_L,CS_R,0
    319  51ac
    320  51ac							;Is this already cached?
    321  51ac		       8e b9 51 	      stx	GA_x+1
    322  51af		       8d bb 51 	      sta	GA_a+1
    323  51b2		       20 f4 51 	      jsr	ARP_CACHED
    324  51b5		       b0 01		      bcs	GA_x
    325  51b7		       60		      rts		;cache match found, pointer to mac in x:a
    326  51b8
    327  51b8		       a2 00	   GA_x       ldx	#$00
    328  51ba		       a9 00	   GA_a       lda	#$00
    329  51bc		       20 33 51 	      jsr	ARP_REQUEST
    330  51bf							;wait until ARP_REPLY recieved, timeout at 60 seconds or user aborts
    331  51bf		       a9 00		      lda	#$00
    332  51c1		       8d 6f 47 	      sta	TIMEOUT
    333  51c4		       ad 08 dc 	      lda	$dc08
    334  51c7		       8d 70 47 	      sta	TICKER
    335  51ca				   GA_d
    336  51ca		       20 e4 ff 	      jsr	GETIN	;key hit?
    337  51cd		       d0 1a		      bne	GA_TO
    338  51cf		       ad 19 50 	      lda	ARP_STATE	;IF ARP_STATE has returned to 0
    339  51d2		       f0 17		      beq	GA_X
    340  51d4		       ad 08 dc 	      lda	$dc08
    341  51d7		       cd 70 47 	      cmp	TICKER	;Ticked?
    342  51da		       f0 ee		      beq	GA_d	;if not, loop
    343  51dc		       8d 70 47 	      sta	TICKER
    344  51df		       ee 6f 47 	      inc	TIMEOUT
    345  51e2		       ad 6f 47 	      lda	TIMEOUT
    346  51e5		       c9 64		      cmp	#100	;Timed out?  (LB) was 100
    347  51e7		       d0 e1		      bne	GA_d
    348  51e9				   GA_TO
    349  51e9		       38		      sec
    350  51ea		       60		      rts
    351  51eb				   GA_X
    352  51eb		       a9 4c		      lda	#<(INPACKET+$16)
    353  51ed		       a2 74		      ldx	#>(INPACKET+$16)
    354  51ef		       20 4f 52 	      jsr	ARP_CACHEIT
    355  51f2		       18		      clc
    356  51f3		       60		      rts
    357  51f4
    358  51f4
    359  51f4							;=============================================================================
    360  51f4				   ARP_CACHED		;expects pointer to IP in x:a, returns carry set if no match,
    361  51f4							;carry set, pointer in x:a to match if match found
    362  51f4		       8d 16 52 	      sta	ARP_CACHED_2+1
    363  51f7		       8e 17 52 	      stx	ARP_CACHED_2+2
    364  51fa
    365  51fa		       a9 3c		      lda	#<ARP_CACHE_I
    366  51fc		       8d 13 52 	      sta	ARP_CACHED_1+1
    367  51ff		       a9 50		      lda	#>ARP_CACHE_I
    368  5201		       8d 14 52 	      sta	ARP_CACHED_1+2
    369  5204
    370  5204		       a9 4c		      lda	#<ARP_CACHE_M
    371  5206		       8d 37 52 	      sta	ARP_CACHED_a+1
    372  5209		       a9 50		      lda	#>ARP_CACHE_M
    373  520b		       8d 35 52 	      sta	ARP_CACHED_x+1
    374  520e
    375  520e
    376  520e		       a0 00		      ldy	#$00
    377  5210				   ARP_CACHED_0
    378  5210		       a2 00		      ldx	#$00
    379  5212				   ARP_CACHED_1
    380  5212		       bd 3c 50 	      lda	ARP_CACHE_I,x
    381  5215				   ARP_CACHED_2
    382  5215		       dd ff ff 	      cmp	$ffff,x
    383  5218		       d0 20		      bne	ARP_CACHED_3
    384  521a		       e8		      inx
    385  521b		       e0 04		      cpx	#$04
    386  521d		       d0 f3		      bne	ARP_CACHED_1
    387  521f							;match was found!
    388  521f		       c0 00		      cpy	#$00
    389  5221		       f0 11		      beq	ARP_CACHED_x
    390  5223				   ARP_CACHED_5
    391  5223		       a9 06		      lda	#$06
    392  5225		       18		      clc
    393  5226		       6d 37 52 	      adc	ARP_CACHED_a+1
    394  5229		       8d 37 52 	      sta	ARP_CACHED_a+1
    395  522c		       90 03		      bcc	ARP_CACHED_6
    396  522e		       ee 35 52 	      inc	ARP_CACHED_x+1
    397  5231				   ARP_CACHED_6
    398  5231		       88		      dey
    399  5232		       d0 ef		      bne	ARP_CACHED_5
    400  5234				   ARP_CACHED_x
    401  5234		       a2 00		      ldx	#$00
    402  5236				   ARP_CACHED_a
    403  5236		       a9 00		      lda	#$00
    404  5238		       18		      clc
    405  5239		       60		      rts
    406  523a
    407  523a				   ARP_CACHED_3
    408  523a		       a9 04		      lda	#$04
    409  523c		       18		      clc
    410  523d		       6d 13 52 	      adc	ARP_CACHED_1+1
    411  5240		       8d 13 52 	      sta	ARP_CACHED_1+1
    412  5243		       90 03		      bcc	ARP_CACHED_4
    413  5245		       ee 14 52 	      inc	ARP_CACHED_1+2
    414  5248				   ARP_CACHED_4
    415  5248		       c8		      iny
    416  5249		       c4 05		      cpy	ARP_CACHE_DEPTH
    417  524b		       d0 c3		      bne	ARP_CACHED_0
    418  524d
    419  524d				   ARP_CACHED_NM		;no match found.
    420  524d		       38		      sec
    421  524e		       60		      rts
    422  524f
    423  524f							;=============================================================================
    424  524f				   ARP_CACHEIT
    425  524f		       8e 8a 52 	      stx	ARP_CACHEIT_x+1
    426  5252		       8d 8c 52 	      sta	ARP_CACHEIT_a+1
    427  5255
    428  5255							;rotate bottom 3 entries down by one
    429  5255		       a2 08		      ldx	#8
    430  5257				   ARP_CACHEIT_0
    431  5257		       bd 3c 50 	      lda	ARP_CACHE_I,x
    432  525a		       9d 40 50 	      sta	ARP_CACHE_I+4,x
    433  525d		       ca		      dex
    434  525e		       e0 ff		      cpx	#$ff
    435  5260		       d0 f5		      bne	ARP_CACHEIT_0
    436  5262
    437  5262		       a2 0c		      ldx	#12
    438  5264				   ARP_CACHEIT_1
    439  5264		       bd 4c 50 	      lda	ARP_CACHE_M,x
    440  5267		       9d 52 50 	      sta	ARP_CACHE_M+6,x
    441  526a		       ca		      dex
    442  526b		       e0 ff		      cpx	#$ff
    443  526d		       d0 f5		      bne	ARP_CACHEIT_1
    444  526f
    445  526f		       a2 00		      ldx	#$00
    446  5271				   ARP_CACHEIT_2
    447  5271		       bd 38 50 	      lda	ARP_DST_IP,x
    448  5274		       9d 3c 50 	      sta	ARP_CACHE_I,x
    449  5277		       e8		      inx
    450  5278		       e0 04		      cpx	#$04
    451  527a		       d0 f5		      bne	ARP_CACHEIT_2
    452  527c
    453  527c		       a2 00		      ldx	#$00
    454  527e				   ARP_CACHEIT_3
    455  527e		       bd 4c 74 	      lda	INPACKET+$16,x
    456  5281		       9d 4c 50 	      sta	ARP_CACHE_M,x
    457  5284		       e8		      inx
    458  5285		       e0 06		      cpx	#$06
    459  5287		       d0 f5		      bne	ARP_CACHEIT_3
    460  5289				   ARP_CACHEIT_x
    461  5289		       a2 00		      ldx	#$00
    462  528b				   ARP_CACHEIT_a
    463  528b		       a9 00		      lda	#$00
    464  528d		       60		      rts
    465  528e
    466  528e
    467  528e							;That's all, folks.  Time for a beer
    468  528e							;
    469  528e							;	  [~]
    470  528e							;	  |=|
    471  528e							;	.-' '-.
    472  528e							;	|-----|  Warsteiner
    473  528e							;	| ~~~ |  "Die Konigen unter den bieren"
    474  528e							;	| ~~~ |
    475  528e							;	| WAR |
    476  528e							;	|-----|
    477  528e							;	'-----'
    478  528e							;
    479  528e							;
    480  528e							;
    481  528e							;Six of Style 2006
------- FILE SIXNET.ASM
------- FILE IP.ASM LEVEL 3 PASS 2
      0  528e					      include	"IP.ASM"
      1  528e							;Source by Six of Style (Oliver VieBrooks)
      2  528e							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  528e							;
      4  528e							;Last Updated 1/25/2006
      5  528e							;
      6  528e							;IP PROTOCOL==================================================================
      7  528e							;							 _,.-------.,_
      8  528e							;IP PACKET FORMAT:				     ,;~'	      '~;,
      9  528e							;+----------+----------+---------+		   ,;			  ;,
     10  528e							;|$00-$0d   |$0e-$21	|$22->	  |		  ;			    ;
     11  528e							;+----------+----------+---------+		 ,'			    ',
     12  528e							;|MAC Header|IP Header |IP Data  |		,;			     ;,
     13  528e							;+----------+----------+---------+		; ;	 .	     .	    ; ;
     14  528e							;						| ;   ______	   ______   ; |
     15  528e							;MAC Header Fields:				|  `/~"     ~" . "~	"~\'  |
     16  528e							;$00 - Destination MAC 			|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  528e							;$06 - Source MAC				 |   |	      }:{	 |   |
     18  528e							;$0c - Packet Type				 |   !	     / | \	 !   |
     19  528e							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  528e							;IP Header Fields:				 |     ---;' / | \ `;---     |
     21  528e							;$0e - IP Version				  \__.	     \/^\/	 .__/
     22  528e							;$0f - Type of Service 			   V| \ 		/ |V
     23  528e							;$10 - Total Length of packet			    | |T~\___!___!___/~T| |
     24  528e							;$12 - Identifier				    | |`IIII_I_I_I_IIII'| |
     25  528e							;$14 - Flags					    |  \,III I I I III,/  |
     26  528e							;$15 - Fragment				     \	 `~~~~~~~~~~'	 /
     27  528e							;$16 - Time To Live				       \   .	   .   /
     28  528e							;$17 - Protocol					 \.    ^    ./
     29  528e							;$18 - Checksum					   ^~~~^~~~^
     30  528e							;$1a - Source IP Address
     31  528e							;$1e - Destination IP Address
     32  528e
     33  528e		       00 01	   IP_PROTOCOL_ICMP =	1
     34  528e		       00 06	   IP_PROTOCOL_TCP =	6
     35  528e		       00 11	   IP_PROTOCOL_UDP =	17
     36  528e
     37  528e		       00	   IP_BCAST   dc.b	0
     38  528f		       ff ff ff ff IP_BCASTIP dc.b	255,255,255,255
     39  5293		       ff ff ff ff*IP_BCASTIPMAC dc.b	255,255,255,255,255,255
     40  5299				   IP_HEADER
     41  5299
     42  5299		       45	   IP_VERSION dc.b	$45	;Version and IHL (STATIC)
     43  529a		       00	   IP_TOS     dc.b	$00	;Type of Service (STATIC)
     44  529b		       00 00	   IP_TOTAL_LEN dc.w	$0000	;Total Length of packet (H:L)(-MAC Header Length)
     45  529d		       00 00	   IP_IDENTIFIER dc.w	$0000	;Packet Identifier (STATIC) <-Not Good
     46  529f		       40	   IP_FLAGS   dc.b	$40	;Flags (STATIC)
     47  52a0		       00	   IP_FRAGMENT dc.b	$00	;Fragment (STATIC)
     48  52a1		       ff	   IP_TTL     dc.b	$FF	;TTL
     49  52a2		       00	   IP_PROTOCOL dc.b	$00
     50  52a3		       00 00	   IP_CHECKSUM dc.w	$0000
     51  52a5		       00 00 00 00 IP_SOURCE  dc.w	$0000,$0000
     52  52a9		       00 00 00 00 IP_DEST    dc.w	$0000,$0000
     53  52ad				   IP_DATA
     54  52ad		       00 00 00 00*IP_BUFFER  ds.b	$1000	;4k buffer
     55  62ad		       00 00	   IP_DATALEN dc.b	$00,$00
     56  62af
     57  62af							;broadcast
     58  62af
     59  62af							;=============================================================================
     60  62af							;Initialize IP
     61  62af				   IP_INIT
     62  62af		       a9 2b		      lda	#<CARD_IP
     63  62b1		       a2 4f		      ldx	#>CARD_IP
     64  62b3		       20 28 63 	      jsr	IP_SET_SRC
     65  62b6		       60		      rts
     66  62b7							;=============================================================================
     67  62b7							;Process incoming IP Packet
     68  62b7				   IP_PROCESS		;act on incoming IP Packet
     69  62b7		       ad 4d 74 	      lda	INPACKET+$17
     70  62ba		       c9 01		      cmp	#IP_PROTOCOL_ICMP	;Is this an ICMP packet?
     71  62bc		       d0 03		      bne	NOT_ICMP
     72  62be							;(LB) This doesn't do anything, but the fact that it is here makes incoming pings work.  Bizarre!
     73  62be							;IPRINT "ICMP PACKET RECEIVED",13
     74  62be		       4c 99 64 	      jmp	ICMP_PROCESS
     75  62c1
     76  62c1				   NOT_ICMP
     77  62c1		       c9 11		      cmp	#IP_PROTOCOL_UDP
     78  62c3		       d0 03		      bne	NOT_UDP
     79  62c5		       4c 6c 68 	      jmp	UDP_PROCESS
     80  62c8
     81  62c8				   NOT_UDP
     82  62c8		       c9 06		      cmp	#IP_PROTOCOL_TCP
     83  62ca		       d0 03		      bne	NOT_TCP
     84  62cc		       4c a7 6d 	      jmp	TCP_PROCESS
     85  62cf				   NOT_TCP
     86  62cf		       60		      rts
     87  62d0
     88  62d0							;=============================================================================
     89  62d0				   IP_SEND		;expects header to already be built.
     90  62d0							;	PRINT 13,"ip send called",13
     91  62d0
     92  62d0		       20 69 63 	      jsr	IP_SETCHECKSUM
     93  62d3		       ad 8e 52 	      lda	IP_BCAST
     94  62d6		       f0 0e		      beq	IP_SEND3	;is this a broadcast packet?
     95  62d8		       a9 8f		      lda	#<IP_BCASTIP
     96  62da		       a2 52		      ldx	#>IP_BCASTIP
     97  62dc		       20 3c 63 	      jsr	IP_SETDEST
     98  62df		       a9 93		      lda	#<IP_BCASTIPMAC
     99  62e1		       a2 52		      ldx	#>IP_BCASTIPMAC
    100  62e3		       4c 02 63 	      jmp	IP_SEND2
    101  62e6				   IP_SEND3
    102  62e6		       a9 a9		      lda	#<IP_DEST
    103  62e8		       a2 52		      ldx	#>IP_DEST
    104  62ea		       20 95 4b 	      jsr	IPMASK
    105  62ed		       90 07		      bcc	IP_SEND1
    106  62ef							;external IP, use GW_MAC
    107  62ef		       a9 4b		      lda	#<CARD_GATE_MAC
    108  62f1		       a2 4f		      ldx	#>CARD_GATE_MAC
    109  62f3		       4c 02 63 	      jmp	IP_SEND2
    110  62f6				   IP_SEND1		;internal IP, resolve its MAC and set it
    111  62f6		       a9 a9		      lda	#<IP_DEST
    112  62f8		       a2 52		      ldx	#>IP_DEST
    113  62fa		       20 a6 51 	      jsr	GET_ARP
    114  62fd		       90 03		      bcc	IP_SEND2
    115  62ff		       4c 22 63 	      jmp	IP_SEND_ERR
    116  6302				   IP_SEND2
    117  6302		       20 d9 4f 	      jsr	MAC_SETDEST
    118  6305							;set source MAC
    119  6305		       20 ed 4f 	      jsr	MAC_SETSRC	;<-This can be optimized out!
    120  6308							;set MAC Type
    121  6308		       a2 08		      ldx	#$08
    122  630a		       a9 00		      lda	#$00
    123  630c		       20 12 50 	      jsr	MAC_SETTYPE
    124  630f							;Set MAC Data Addr
    125  630f		       a9 99		      lda	#<IP_HEADER
    126  6311		       a2 52		      ldx	#>IP_HEADER
    127  6313		       20 d2 4f 	      jsr	MAC_SETDATAADDR
    128  6316							;SET MAC Data Length (H:L to L:H)
    129  6316		       ad 9c 52 	      lda	IP_TOTAL_LEN+1
    130  6319		       ae 9b 52 	      ldx	IP_TOTAL_LEN
    131  631c		       20 cb 4f 	      jsr	MAC_SETDATALEN
    132  631f							;	PRINT 13,"ip calling mac send",13
    133  631f		       4c 81 4f 	      jmp	MAC_SEND
    134  6322				   IP_SEND_ERR
    135  6322		       38		      sec
    136  6323		       60		      rts
    137  6324							;Before IP_SEND
    138  6324							;Set Protocol
    139  6324							;Set Source
    140  6324							;Set Dest
    141  6324							;Set TTL
    142  6324							;Copy Data in and set data len
    143  6324							;=============================================================================
    144  6324				   IP_SETPROTOCOL		; Expects protocol in a
    145  6324		       8d a2 52 	      sta	IP_PROTOCOL
    146  6327		       60		      rts
    147  6328							;=============================================================================
    148  6328				   IP_SET_SRC		;expects pointer to ip in x:a
    149  6328		       8e 32 63 	      stx	IP_SSS+2
    150  632b		       8d 31 63 	      sta	IP_SSS+1
    151  632e		       a2 00		      ldx	#$00
    152  6330		       bd ff ff    IP_SSS     lda	$ffff,x
    153  6333		       9d a5 52 	      sta	IP_SOURCE,x
    154  6336		       e8		      inx
    155  6337		       e0 04		      cpx	#$04
    156  6339		       d0 f5		      bne	IP_SSS
    157  633b		       60		      rts
    158  633c							;=============================================================================
    159  633c				   IP_SETDEST		;Expects dest ip addr in (x:a)
    160  633c		       8d 45 63 	      sta	IP_SD1+$01
    161  633f		       8e 46 63 	      stx	IP_SD1+$02
    162  6342		       a2 00		      ldx	#$00
    163  6344		       bd ff ff    IP_SD1     lda	$FFFF,x
    164  6347		       9d a9 52 	      sta	IP_DEST,x
    165  634a		       e8		      inx
    166  634b		       e0 04		      cpx	#$04
    167  634d		       d0 f5		      bne	IP_SD1
    168  634f		       60		      rts
    169  6350							;=============================================================================
    170  6350				   IP_SETTTL
    171  6350		       8d a1 52 	      sta	IP_TTL
    172  6353		       60		      rts
    173  6354							;=============================================================================
    174  6354				   IP_SET_DATALEN		;expects length of data in IP_BUFFER in x:a
    175  6354		       8e 9b 52 	      stx	IP_TOTAL_LEN
    176  6357		       8d 9c 52 	      sta	IP_TOTAL_LEN+$01
    177  635a							;add length of IP header ($14)
    178  635a		       a9 14		      lda	#$14
    179  635c		       18		      clc
    180  635d		       6d 9c 52 	      adc	IP_TOTAL_LEN+1
    181  6360		       8d 9c 52 	      sta	IP_TOTAL_LEN+1
    182  6363		       90 03		      bcc	IPDL_0
    183  6365		       ee 9b 52 	      inc	IP_TOTAL_LEN
    184  6368				   IPDL_0
    185  6368		       60		      rts
    186  6369							;=============================================================================
    187  6369				   IP_SETCHECKSUM		;Routine by Doc Bacardi from RRNet Source
    188  6369							; clear checksum field
    189  6369		       a9 00		      lda	#0
    190  636b		       8d a3 52 	      sta	IP_CHECKSUM
    191  636e		       8d a4 52 	      sta	IP_CHECKSUM+$01
    192  6371
    193  6371							; start to make checksum at start of ip header
    194  6371		       a9 99		      lda	#<IP_HEADER
    195  6373		       85 6a		      sta	MakeChecksumZp_Ptr
    196  6375		       a9 52		      lda	#>IP_HEADER
    197  6377		       85 6b		      sta	MakeChecksumZp_Ptr+1
    198  6379
    199  6379							; length of area to make checksum of is the ip header
    200  6379		       a9 14		      lda	#$14
    201  637b		       8d 71 47 	      sta	MakeChecksumZp_Len
    202  637e		       a9 00		      lda	#$00
    203  6380		       8d 72 47 	      sta	MakeChecksumZp_Len+1
    204  6383
    205  6383							; calculate checksum for the ip header
    206  6383		       20 75 47 	      jsr	MakeChecksum
    207  6386
    208  6386							; store checksum in header
    209  6386		       8d a3 52 	      sta	IP_CHECKSUM
    210  6389		       8e a4 52 	      stx	IP_CHECKSUM+1
    211  638c		       60		      rts
    212  638d							;=============================================================================
    213  638d				   IP_SET_FRAG
    214  638d		       60		      rts
    215  638e
    216  638e				   IP_SET_BCAST
    217  638e		       8d 8e 52 	      sta	IP_BCAST
    218  6391		       60		      rts
------- FILE SIXNET.ASM
------- FILE ICMP.ASM LEVEL 3 PASS 2
      0  6392					      include	"ICMP.ASM"
      1  6392							;Source by Six of Style (Oliver VieBrooks)
      2  6392							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  6392							;
      4  6392							;Last Updated 1/26/2006
      5  6392							;
      6  6392							;ICMP PROTOCOL================================================================
      7  6392							;							 _,.-------.,_
      8  6392							;ICMP PACKET FORMAT:				     ,;~'	      '~;,
      9  6392							;+----------+---------+-----------+---------+	   ,;			  ;,
     10  6392							;|$00-$0d   |$0e-$21  |$22-$24    |$26->    |	  ;			    ;
     11  6392							;+----------+---------+-----------+---------+	 ,'	   Style 2006	    ',
     12  6392							;|MAC Header|IP Header|ICMP Header|ICMP Data|	,;			     ;,
     13  6392							;+----------+---------+-----------+---------+	; ;	 .	     .	    ; ;
     14  6392							;						| ;   ______	   ______   ; |
     15  6392							;MAC Header Fields:				|  `/~"     ~" . "~	"~\'  |
     16  6392							;$00 - Destination MAC 			|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  6392							;$06 - Source MAC				 |   |	      }:{	 |   |
     18  6392							;$0c - Packet Type				 |   !	     / | \	 !   |
     19  6392							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  6392							;IP Header Fields:				 |     ---;' / | \ `;---     |
     21  6392							;$0e - IP Version				  \__.	     \/^\/	 .__/
     22  6392							;$0f - Type of Service 			   V| \ 		/ |V
     23  6392							;$10 - Total Length of packet			    | |T~\___!___!___/~T| |
     24  6392							;$12 - Identifier				    | |`IIII_I_I_I_IIII'| |
     25  6392							;$14 - Flags					    |  \,III I I I III,/  |
     26  6392							;$15 - Fragment				     \	 `~~~~~~~~~~'	 /
     27  6392							;$16 - Time To Live				       \   .	   .   /
     28  6392							;$17 - Protocol					 \.    ^    ./
     29  6392							;$18 - Checksum					   ^~~~^~~~^
     30  6392							;$1a - Source IP Address
     31  6392							;$1e - Destination IP Address
     32  6392							;
     33  6392							;ICMP Fields:
     34  6392							;$22 - Type
     35  6392							;$23 - Code
     36  6392							;$24 - Checksum
     37  6392							;$26 - Data
     38  6392							;=============================================================================
     39  6392							;EQUATES
     40  6392
     41  6392		       00 00	   ICMP_T_PONG =	$00
     42  6392		       00 03	   ICMP_T_UNREACHABLE =	$03
     43  6392		       00 04	   ICMP_T_SRC =	$04
     44  6392		       00 05	   ICMP_T_REDIRECT =	$05
     45  6392		       00 08	   ICMP_T_PING =	$08
     46  6392
     47  6392		       00 00	   ICMP_STATE_IDLE =	$00
     48  6392		       00 01	   ICMP_STATE_REQ =	$01
     49  6392		       00 02	   ICMP_STATE_REPLY =	$02
     50  6392
     51  6392							;=============================================================================
     52  6392				   ICMP_HEADER
     53  6392
     54  6392		       00	   ICMP_TYPE  dc.b	$00
     55  6393		       00	   ICMP_CODE  dc.b	$00
     56  6394		       00 00	   ICMP_CHECKSUM dc.w	$0000
     57  6396
     58  6396		       00 00 00 00*ICMP_DATA  ds.b	$FC	; $fc bytes is the max data size we'll bother with.
     59  6492
     60  6492		       00 00	   ICMP_DATA_LEN dc.w	$00
     61  6494
     62  6494		       00	   ICMP_STATE dc.b	$00	;0=idle, 1=awaiting ping returns
     63  6495
     64  6495		       00 00 00 00 ICMP_DEST_IP dc.b	$00,$00,$00,$00
     65  6499
     66  6499							;=============================================================================
     67  6499				   ICMP_PROCESS 		;Process incoming ICMP packet
     68  6499		       ad 58 74 	      lda	INPACKET+$22
     69  649c		       c9 00		      cmp	#ICMP_T_PONG
     70  649e		       d0 04		      bne	ICMP_NOTREPLY
     71  64a0		       20 1c 73 	      jsr	PING_PONGED	;process pong
     72  64a3		       60		      rts
     73  64a4				   ICMP_NOTREPLY
     74  64a4		       c9 03		      cmp	#ICMP_T_UNREACHABLE
     75  64a6		       d0 04		      bne	ICMP_NOTDNU
     76  64a8							;destination unreachable!
     77  64a8		       20 16 73 	      jsr	PING_DNU
     78  64ab		       60		      rts
     79  64ac				   ICMP_NOTDNU
     80  64ac		       c9 08		      cmp	#ICMP_T_PING
     81  64ae		       d0 04		      bne	ICMP_NOTREQ
     82  64b0		       20 22 73 	      jsr	PING_PINGED	;we've been pinged!
     83  64b3		       60		      rts
     84  64b4				   ICMP_NOTREQ
     85  64b4		       60		      rts
     86  64b5
     87  64b5
     88  64b5							;Before ICMP_SEND
     89  64b5							;Set Type
     90  64b5							;Set Code
     91  64b5							;Put Data in ICMP_Data and Set Data Length
     92  64b5							;Set Dest IP
     93  64b5							;=============================================================================
     94  64b5				   ICMP_SEND
     95  64b5							;	PRINT 13,"icmp send called",13
     96  64b5							;Generate ICMP Checksum
     97  64b5		       20 24 65 	      jsr	ICMP_GEN_CHECKSUM
     98  64b8							;Set IP Protocol to ICMP
     99  64b8		       a9 01		      lda	#IP_PROTOCOL_ICMP
    100  64ba		       20 24 63 	      jsr	IP_SETPROTOCOL
    101  64bd							;Our SRC IP is the stored CARD IP <-Can be optimized out
    102  64bd		       a9 2b		      lda	#<CARD_IP
    103  64bf		       a2 4f		      ldx	#>CARD_IP
    104  64c1		       20 28 63 	      jsr	IP_SET_SRC
    105  64c4
    106  64c4		       a9 95		      lda	#<ICMP_DEST_IP
    107  64c6		       a2 64		      ldx	#>ICMP_DEST_IP
    108  64c8		       20 3c 63 	      jsr	IP_SETDEST
    109  64cb
    110  64cb		       a9 80		      lda	#$80
    111  64cd		       20 50 63 	      jsr	IP_SETTTL
    112  64d0
    113  64d0							;Copy ICMP Header+Data to IP_DATA
    114  64d0		       ad 92 64 	      lda	ICMP_DATA_LEN
    115  64d3		       18		      clc
    116  64d4		       69 04		      adc	#$04
    117  64d6		       48		      pha
    118  64d7
    119  64d7		       aa		      tax
    120  64d8				   ICMP_SEND0
    121  64d8		       bd 91 63 	      lda	ICMP_HEADER-1,x
    122  64db		       9d ac 52 	      sta	IP_BUFFER-1,x
    123  64de		       ca		      dex
    124  64df		       d0 f7		      bne	ICMP_SEND0
    125  64e1		       68		      pla
    126  64e2		       20 54 63 	      jsr	IP_SET_DATALEN
    127  64e5
    128  64e5							;Send
    129  64e5		       a9 00		      lda	#$00
    130  64e7		       8d 8e 52 	      sta	IP_BCAST
    131  64ea		       4c d0 62 	      jmp	IP_SEND
    132  64ed		       60		      rts
    133  64ee
    134  64ee
    135  64ee							;=============================================================================
    136  64ee				   ICMP_SET_TYPE
    137  64ee		       8d 92 63 	      sta	ICMP_TYPE
    138  64f1		       60		      rts
    139  64f2
    140  64f2							;=============================================================================
    141  64f2				   ICMP_SET_CODE
    142  64f2		       8d 93 63 	      sta	ICMP_CODE
    143  64f5		       60		      rts
    144  64f6
    145  64f6							;=============================================================================
    146  64f6				   ICMP_COPY_DATA		;Expects data address in x:a, number of bytes in y
    147  64f6		       8c 92 64 	      sty	ICMP_DATA_LEN
    148  64f9		       8c 0c 65 	      sty	ICMPSD_C+1
    149  64fc		       8e 06 65 	      stx	ICMPSD_0+2
    150  64ff		       8d 05 65 	      sta	ICMPSD_0+1
    151  6502		       a2 00		      ldx	#$00
    152  6504				   ICMPSD_0
    153  6504		       bd ff ff 	      lda	$ffff,x
    154  6507		       9d 96 63 	      sta	ICMP_DATA,x
    155  650a		       e8		      inx
    156  650b				   ICMPSD_C
    157  650b		       e0 ff		      cpx	#$ff
    158  650d		       d0 f5		      bne	ICMPSD_0
    159  650f		       60		      rts
    160  6510
    161  6510							;=============================================================================
    162  6510				   ICMP_SET_DEST_IP
    163  6510		       8d 19 65 	      sta	Isd0+$01
    164  6513		       8e 1a 65 	      stx	Isd0+$02
    165  6516		       a2 00		      ldx	#$00
    166  6518		       bd ff ff    Isd0       lda	$FFFF,x
    167  651b		       9d 95 64 	      sta	ICMP_DEST_IP,x
    168  651e		       e8		      inx
    169  651f		       e0 04		      cpx	#$04
    170  6521		       d0 f5		      bne	Isd0
    171  6523		       60		      rts
    172  6524							;=============================================================================
    173  6524				   ICMP_GEN_CHECKSUM
    174  6524		       a9 00		      lda	#$00
    175  6526		       8d 94 63 	      sta	ICMP_CHECKSUM
    176  6529		       8d 95 63 	      sta	ICMP_CHECKSUM+1
    177  652c							; start to make checksum at start of ICMP header in OUTPACKET
    178  652c		       a9 92		      lda	#<ICMP_HEADER
    179  652e		       85 6a		      sta	MakeChecksumZp_Ptr
    180  6530		       a9 63		      lda	#>ICMP_HEADER
    181  6532		       85 6b		      sta	MakeChecksumZp_Ptr+1
    182  6534
    183  6534							; length of area to make checksum of is the ICMP Header+Data
    184  6534		       a9 00		      lda	#$00
    185  6536		       8d 72 47 	      sta	MakeChecksumZp_Len+$01
    186  6539		       ad 92 64 	      lda	ICMP_DATA_LEN
    187  653c		       18		      clc
    188  653d		       69 04		      adc	#$04
    189  653f		       8d 71 47 	      sta	MakeChecksumZp_Len
    190  6542		       90 03		      bcc	icg0
    191  6544		       ee 72 47 	      inc	MakeChecksumZp_Len+1
    192  6547				   icg0
    193  6547							; calculate checksum for the ip header
    194  6547		       20 75 47 	      jsr	MakeChecksum
    195  654a
    196  654a							; store checksum in packet
    197  654a		       8d 94 63 	      sta	ICMP_CHECKSUM
    198  654d		       8e 95 63 	      stx	ICMP_CHECKSUM+$01
    199  6550		       60		      rts
    200  6551
------- FILE SIXNET.ASM
------- FILE UDP.ASM LEVEL 3 PASS 2
      0  6551					      include	"UDP.ASM"
      1  6551							;Source by Six of Style (Oliver VieBrooks)
      2  6551							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  6551							;
      4  6551							;Last Updated 1/26/2006
      5  6551							;
      6  6551							;UDP PROTOCOL=================================================================
      7  6551							;							 _,.-------.,_
      8  6551							;IP PACKET FORMAT:				     ,;~'	      '~;,
      9  6551							;+----------+----------+----------+----+	   ,;			  ;,
     10  6551							;|$00-$0d   |$0e-$21	|$22-$29   |$2a-|	  ;			    ;
     11  6551							;+----------+----------+----------+----+	 ,'			    ',
     12  6551							;|MAC Header|IP Header |UDP Header|Data|	,;			     ;,
     13  6551							;+----------+----------+----------+----+	; ;	 .	     .	    ; ;
     14  6551							;						| ;   ______	   ______   ; |
     15  6551							;MAC Header Fields:				|  `/~"     ~" . "~	"~\'  |
     16  6551							;$00 - Destination MAC (6)			|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  6551							;$06 - Source MAC (6)				 |   |	      }:{	 |   |
     18  6551							;$0c - Packet Type (2) 			 |   !	     / | \	 !   |
     19  6551							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  6551							;IP Header Fields:				 |     ---;' / | \ `;---     |
     21  6551							;$0e - IP Version (1)				  \__.	     \/^\/	 .__/
     22  6551							;$0f - Type of Service (1)			   V| \ 		/ |V
     23  6551							;$10 - Total Length of packet (2)		    | |T~\___!___!___/~T| |
     24  6551							;$12 - Identifier (2)				    | |`IIII_I_I_I_IIII'| |
     25  6551							;$14 - Flags (1)				    |  \,III I I I III,/  |
     26  6551							;$15 - Fragment (1)				     \	 `~~~~~~~~~~'	 /
     27  6551							;$16 - Time To Live (1)			       \   .	   .   /
     28  6551							;$17 - Protocol (1)					 \.    ^    ./
     29  6551							;$18 - Checksum (2)					   ^~~~^~~~^
     30  6551							;$1a - Source IP Address (4)
     31  6551							;$1e - Destination IP Address (4)
     32  6551							;
     33  6551							;UDP Header Fields:
     34  6551							;$22 - Source Port (2)
     35  6551							;$24 - Dest Port (2)
     36  6551							;$26 - Length (2)
     37  6551							;$28 - Checksum (2)
     38  6551		       00	   UDP_BCAST  dc.b	$00
     39  6552				   UDP_PSEUDO_HEADER
     40  6552		       00 00 00 00 UDP_PSEUDO_SRC dc.b	$00,$00,$00,$00
     41  6556		       00 00 00 00 UDP_PSEUDO_DEST dc.b	$00,$00,$00,$00
     42  655a		       00 11	   UDP_PSEUDO_PROTOCOL dc.b	00,17
     43  655c		       00 00	   UDP_PSEUDO_LENGTH dc.b	$00,$00
     44  655e
     45  655e				   UDP_HEADER
     46  655e		       00 00	   UDP_SRC    dc.b	$00,$00
     47  6560		       00 00	   UDP_DEST   dc.b	$00,$00
     48  6562		       00 00	   UDP_PLEN   dc.b	$00,$00
     49  6564		       23 cf	   UDP_CSUM   dc.b	$23,$cf	;$00,$00
     50  6566
     51  6566		       00 00 00 00*UDP_DATA   ds.b	$300
     52  6866
     53  6866		       00 00 00 00 UDP_DEST_IP dc.b	$00,$00,$00,$00
     54  686a		       00 00	   UDP_LEN    dc.b	$00,$00
     55  686c				   UDP_INIT
     56  686c
     57  686c				   UDP_PROCESS		;process according to ports
     58  686c							;IPRINT "processing UDP Packet"
     59  686c							;Check for incoming DNS packets
     60  686c		       ad 5a 74 	      lda	INPACKET+$24
     61  686f		       c9 0c		      cmp	#>DNS_SOURCE_PORT
     62  6871		       d0 0a		      bne	UDP_PROC_USER	;(LB)
     63  6873		       ad 5b 74 	      lda	INPACKET+$25
     64  6876		       c9 57		      cmp	#<DNS_SOURCE_PORT
     65  6878		       d0 03		      bne	UDP_PROC_USER	;(LB)
     66  687a		       20 4e 71 	      jsr	DNS_PROCESS
     67  687d
     68  687d							; Check for my UDP packets (LB)
     69  687d				   UDP_PROC_USER
     70  687d							;Check for incoming USER packets
     71  687d		       ad 5a 74 	      lda	INPACKET+$24
     72  6880		       c9 0b		      cmp	#>USER_DEST_PORT
     73  6882		       d0 0b		      bne	UDP_PROC_2
     74  6884		       ad 5b 74 	      lda	INPACKET+$25
     75  6887		       c9 b8		      cmp	#<USER_DEST_PORT
     76  6889		       d0 04		      bne	UDP_PROC_2
     77  688b		       20 19 32 	      jsr	MYUDP_PROCESS
     78  688e		       60		      rts
     79  688f
     80  688f							;(LB) - removed, not using TFTP
     81  688f							;UDP_PROC1
     82  688f							;	;Check for incoming TFTP packets
     83  688f							;	lda INPACKET+$24
     84  688f							;	cmp #>TFTP_SRC_PORT
     85  688f							;	bne UDP_PROC_2
     86  688f							;	lda INPACKET+$25
     87  688f							;	cmp #<TFTP_SRC_PORT
     88  688f							;	bne UDP_PROC_2
     89  688f							;	jmp TFTP_PROCESS
     90  688f				   UDP_PROC_2
     91  688f							;Check for incoming DHCP Replies
     92  688f		       ad 5a 74 	      lda	INPACKET+$24
     93  6892		       c9 00		      cmp	#>DHCP_SRC_PORT
     94  6894		       d0 0a		      bne	UDP_PROC_x
     95  6896		       ad 5b 74 	      lda	INPACKET+$25
     96  6899		       c9 44		      cmp	#<DHCP_SRC_PORT
     97  689b		       d0 03		      bne	UDP_PROC_x
     98  689d		       4c f7 6e 	      jmp	DHCP_PROCESS
     99  68a0				   UDP_PROC_x
    100  68a0		       60		      rts
    101  68a1
    102  68a1							;Before UDP_SEND
    103  68a1							;Set Source Port
    104  68a1							;Set Dest Port
    105  68a1							;Set Data Len
    106  68a1							;Copy Data
    107  68a1							;Set Dest IP
    108  68a1				   UDP_SEND
    109  68a1		       20 32 69 	      jsr	UDP_GEN_PSEUDO
    110  68a4		       20 52 69 	      jsr	UDP_SET_CSUM
    111  68a7		       a9 11		      lda	#IP_PROTOCOL_UDP
    112  68a9		       20 24 63 	      jsr	IP_SETPROTOCOL
    113  68ac		       a9 2b		      lda	#<CARD_IP
    114  68ae		       a2 4f		      ldx	#>CARD_IP
    115  68b0		       20 28 63 	      jsr	IP_SET_SRC
    116  68b3
    117  68b3		       ad 51 65 	      lda	UDP_BCAST
    118  68b6		       f0 08		      beq	UDP_SEND0
    119  68b8		       a9 01		      lda	#$01
    120  68ba		       20 8e 63 	      jsr	IP_SET_BCAST
    121  68bd		       4c c7 68 	      jmp	UDP_SEND1
    122  68c0				   UDP_SEND0
    123  68c0		       a9 66		      lda	#<UDP_DEST_IP
    124  68c2		       a2 68		      ldx	#>UDP_DEST_IP
    125  68c4		       20 3c 63 	      jsr	IP_SETDEST
    126  68c7				   UDP_SEND1
    127  68c7		       a9 80		      lda	#$80
    128  68c9		       20 50 63 	      jsr	IP_SETTTL
    129  68cc
    130  68cc							;Copy UDP Header+Data to IP_DATA
    131  68cc		       a9 5e		      lda	#<UDP_HEADER
    132  68ce		       85 63		      sta	CPY_SRC
    133  68d0		       a9 65		      lda	#>UDP_HEADER
    134  68d2		       85 64		      sta	CPY_SRC+1
    135  68d4		       a9 ad		      lda	#<IP_DATA
    136  68d6		       85 65		      sta	CPY_DST
    137  68d8		       a9 52		      lda	#>IP_DATA
    138  68da		       85 66		      sta	CPY_DST+1
    139  68dc		       ae 6b 68 	      ldx	UDP_LEN+1
    140  68df		       ad 6a 68 	      lda	UDP_LEN
    141  68e2		       20 c9 48 	      jsr	copyblock
    142  68e5
    143  68e5
    144  68e5		       ad 6a 68 	      lda	UDP_LEN
    145  68e8		       ae 6b 68 	      ldx	UDP_LEN+1
    146  68eb		       20 54 63 	      jsr	IP_SET_DATALEN
    147  68ee
    148  68ee		       20 d0 62 	      jsr	IP_SEND
    149  68f1		       60		      rts
    150  68f2
    151  68f2				   UDP_SET_SRC_PORT		;expects source port in x:a
    152  68f2		       8e 5e 65 	      stx	UDP_SRC
    153  68f5		       8d 5f 65 	      sta	UDP_SRC+1
    154  68f8		       60		      rts
    155  68f9
    156  68f9				   UDP_SET_DEST_PORT		;expects dest port in x:a
    157  68f9		       8e 60 65 	      stx	UDP_DEST
    158  68fc		       8d 61 65 	      sta	UDP_DEST+1
    159  68ff		       60		      rts
    160  6900
    161  6900				   UDP_SET_DEST_IP		;expects pointer in x:a
    162  6900		       8d 09 69 	      sta	USDI_0+1
    163  6903		       8e 0a 69 	      stx	USDI_0+2
    164  6906		       a2 00		      ldx	#$00
    165  6908		       bd ff ff    USDI_0     lda	$ffff,x
    166  690b		       9d 66 68 	      sta	UDP_DEST_IP,x
    167  690e		       e8		      inx
    168  690f		       e0 04		      cpx	#$04
    169  6911		       d0 f5		      bne	USDI_0
    170  6913		       60		      rts
    171  6914
    172  6914				   UDP_SET_DATALEN		;Expects len in x:a
    173  6914		       8e 6b 68 	      stx	UDP_LEN+1
    174  6917		       8d 6a 68 	      sta	UDP_LEN
    175  691a		       18		      clc
    176  691b		       69 08		      adc	#$08	;Size of UDP Header
    177  691d		       8d 6a 68 	      sta	UDP_LEN
    178  6920		       90 03		      bcc	UDP_SDL1
    179  6922		       ee 6b 68 	      inc	UDP_LEN+1
    180  6925				   UDP_SDL1
    181  6925		       ad 6b 68 	      lda	UDP_LEN+1
    182  6928		       8d 62 65 	      sta	UDP_PLEN
    183  692b		       ad 6a 68 	      lda	UDP_LEN
    184  692e		       8d 63 65 	      sta	UDP_PLEN+1
    185  6931
    186  6931		       60		      rts
    187  6932
    188  6932				   UDP_GEN_PSEUDO
    189  6932		       a2 00		      ldx	#$00
    190  6934				   UDPGP_0
    191  6934		       bd 2b 4f 	      lda	CARD_IP,x
    192  6937		       9d 52 65 	      sta	UDP_PSEUDO_SRC,x
    193  693a		       bd 66 68 	      lda	UDP_DEST_IP,x
    194  693d		       9d 56 65 	      sta	UDP_PSEUDO_DEST,x
    195  6940		       e8		      inx
    196  6941		       e0 04		      cpx	#$04
    197  6943		       d0 ef		      bne	UDPGP_0
    198  6945		       ad 62 65 	      lda	UDP_PLEN
    199  6948		       8d 5c 65 	      sta	UDP_PSEUDO_LENGTH
    200  694b		       ad 63 65 	      lda	UDP_PLEN+1
    201  694e		       8d 5d 65 	      sta	UDP_PSEUDO_LENGTH+1
    202  6951		       60		      rts
    203  6952
    204  6952
    205  6952				   UDP_SET_CSUM 		;Routine by Doc Bacardi from RRNet Source
    206  6952							; clear checksum field
    207  6952		       a9 00		      lda	#0
    208  6954		       8d 64 65 	      sta	UDP_CSUM
    209  6957		       8d 65 65 	      sta	UDP_CSUM+$01
    210  695a							; start to make checksum at start of UDP pseudo header
    211  695a		       a9 52		      lda	#<(UDP_PSEUDO_HEADER)
    212  695c		       85 6a		      sta	MakeChecksumZp_Ptr
    213  695e		       a9 65		      lda	#>(UDP_PSEUDO_HEADER)
    214  6960		       85 6b		      sta	MakeChecksumZp_Ptr+1
    215  6962
    216  6962							; length of area to make checksum of is the $0c+LEN(UDP header+data)
    217  6962		       ad 6a 68 	      lda	UDP_LEN
    218  6965		       8d 71 47 	      sta	MakeChecksumZp_Len
    219  6968		       ad 6b 68 	      lda	UDP_LEN+1
    220  696b		       8d 72 47 	      sta	MakeChecksumZp_Len+1
    221  696e
    222  696e		       a9 0c		      lda	#$0c
    223  6970		       18		      clc
    224  6971		       6d 71 47 	      adc	MakeChecksumZp_Len
    225  6974		       8d 71 47 	      sta	MakeChecksumZp_Len
    226  6977		       90 03		      bcc	UDP_SC0
    227  6979		       ee 72 47 	      inc	MakeChecksumZp_Len+1
    228  697c				   UDP_SC0
    229  697c		       20 75 47 	      jsr	MakeChecksum
    230  697f
    231  697f		       8d 64 65 	      sta	UDP_CSUM
    232  6982		       8e 65 65 	      stx	UDP_CSUM+1
    233  6985		       60		      rts
    234  6986
    235  6986
    236  6986
    237  6986
------- FILE SIXNET.ASM
------- FILE TCP.ASM LEVEL 3 PASS 2
      0  6986					      include	"TCP.ASM"
      1  6986							;Source by Six of Style (Oliver VieBrooks)
      2  6986							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  6986							;
      4  6986							;Last Updated Feb/3/2006
      5  6986							;
      6  6986							;ICMP PROTOCOL================================================================
      7  6986							;							 _,.-------.,_
      8  6986							;ICMP PACKET FORMAT:				     ,;~'	      '~;,
      9  6986							;+----------+---------+-----------+		   ,;			  ;,
     10  6986							;|$00-$0d   |$0e-$20  |$21-$	   |		  ;			    ;
     11  6986							;+----------+---------+-----------+		 ,'	  Style 2006	    ',
     12  6986							;|MAC Header|IP Header|TCP Header |		,;			     ;,
     13  6986							;+----------+---------+-----------+		; ;	 .	     .	    ; ;
     14  6986							;						| ;   ______	   ______   ; |
     15  6986							;MAC Header Fields:				|  `/~"     ~" . "~	"~\'  |
     16  6986							;$00 - Destination MAC 			|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  6986							;$06 - Source MAC				 |   |	      }:{	 |   |
     18  6986							;$0c - Packet Type				 |   !	     / | \	 !   |
     19  6986							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  6986							;IP Header Fields:				 |     ---;' / | \ `;---     |
     21  6986							;$0e - IP Version				  \__.	     \/^\/	 .__/
     22  6986							;$0f - Type of Service 			   V| \ 		/ |V
     23  6986							;$12 - Total Length of packet			    | |T~\___!___!___/~T| |
     24  6986							;$13 - Protocol Address Size			    | |`IIII_I_I_I_IIII'| |
     25  6986							;$14 - Opcode					    |  \,III I I I III,/  |
     26  6986							;						     \	 `~~~~~~~~~~'	 /
     27  6986							;						       \   .	   .   /
     28  6986							;							 \.    ^    ./
     29  6986							;							   ^~~~^~~~^
     30  6986		       00 00	   TCP_STATUS_IDLE =	0
     31  6986
     32  6986							;client status
     33  6986		       00 01	   TCP_STATUS_CONNECTING =	1	;Sent SYN PACKET, waiting for SYN-ACK
     34  6986		       00 02	   TCP_STATUS_AWAITING_ACK =	2	;Sent Segments, awaiting ACK
     35  6986		       00 03	   TCP_STATUS_AWAITING_DATA =	3	;Waiting for data (idle)
     36  6986		       00 04	   TCP_STATUS_ACKING =	4	;Received Data, sending ACK
     37  6986		       00 05	   TCP_STATUS_FIN_WAIT1 =	5	;Sent FIN, awaiting ACK
     38  6986		       00 06	   TCP_STATUS_FIN_WAIT2 =	6	;Sent Last ACK, awaiting Server Last ACK
     39  6986		       00 07	   TCP_STATUS_TIME_WAIT =	7	;Waiting for FIN-RETRY,
     40  6986
     41  6986
     42  6986		       00 01	   SOCKET_STATUS_CLOSED =	1
     43  6986		       00 02	   SOCKET_STATUS_LISTEN =	2
     44  6986		       00 03	   SOCKET_STATUS_SYN_SENT =	3
     45  6986		       00 04	   SOCKET_STATUS_SYN_RECEIVED =	4
     46  6986		       00 05	   SOCKET_STATUS_ESTABLISHED =	5
     47  6986
     48  6986
     49  6986
     50  6986		       64 00	   TCP_CLIENT_LOCAL_PORT dc.w	$0064
     51  6988		       00 00	   TCP_CLIENT_REMOTE_PORT dc.w	$0000
     52  698a		       00 00 00 00 TCP_CLIENT_REMOTE_IP dc.b	$00,$00,$00,$00
     53  698e		       00	   TCP_CLIENT_STATUS dc.b	$00
     54  698f
     55  698f				   TCP_HEADER
     56  698f
     57  698f		       00 00	   TCP_SOURCE_PORT dc.w	$0000
     58  6991		       00 00	   TCP_DEST_PORT dc.w	$0000
     59  6993		       00 00 00 00 TCP_SEQ_NUM dc.w	$0000,$0000
     60  6997		       00 00 00 00 TCP_ACK_NUM dc.w	$0000,$0000
     61  699b		       00 00	   TCP_CONTROL_WORD dc.w	$0000
     62  699d		       00 00	   TCP_WINDOW dc.w	$0000
     63  699f		       00 00	   TCP_CHECKSUM dc.w	$0000
     64  69a1		       00 00	   TCP_URGENT dc.w	$0000
     65  69a3		       00 00 00 00 TCP_OPTIONS dc.w	$0000,$0000
     66  69a7		       00 00 00 00*TCP_DATA   ds.b	$400
     67  6da7
     68  6da7				   TCP_PROCESS		;process incoming packet
     69  6da7		       60		      rts
     70  6da8							;Before TCP_CONNECT
     71  6da8							;
     72  6da8				   TCP_CONNECT
     73  6da8
     74  6da8
     75  6da8				   TCP_SEND
     76  6da8							;Before TCP_SEND
     77  6da8							;Set Source Port
     78  6da8							;Set Dest Port
     79  6da8							;Set Data Len
     80  6da8							;Copy Data
     81  6da8							;Set Dest IP
     82  6da8							;Generate Checksum
     83  6da8							;jsr TCP_GEN_PSEUDO
     84  6da8							;jsr TCP_SET_CSUM
     85  6da8
     86  6da8							;lda #IP_PROTOCOL_TCP
     87  6da8							;jsr IP_SETPROTOCOL
     88  6da8
     89  6da8							;lda #<CARD_IP
     90  6da8							;ldx #>CARD_IP
     91  6da8							;jsr IP_SET_SRC
     92  6da8
     93  6da8							;lda #<TCP_DEST_IP
     94  6da8							;ldx #>TCP_DEST_IP
     95  6da8							;jsr IP_SETDEST
     96  6da8
     97  6da8							;lda #$80
     98  6da8							;jsr IP_SETTTL
     99  6da8
    100  6da8							;Copy UDP Header+Data to IP_DATA
    101  6da8							;lda #<TCP_HEADER
    102  6da8							;sta CPY_SRC
    103  6da8							;lda #>TCP_HEADER
    104  6da8							;sta CPY_SRC+1
    105  6da8							;lda #<IP_DATA
    106  6da8							;sta CPY_DST
    107  6da8							;lda #>IP_DATA
    108  6da8							;sta CPY_DST+1
    109  6da8							;ldx TCP_LEN+1
    110  6da8							;lda TCP_LEN
    111  6da8							;jsr copyblock
    112  6da8
    113  6da8
    114  6da8							;lda TCP_LEN
    115  6da8							;ldx TCP_LEN+1
    116  6da8							;jsr IP_SET_DATALEN
    117  6da8
    118  6da8							;jsr IP_SEND
    119  6da8		       60		      rts
    120  6da9
------- FILE SIXNET.ASM
    187  6da9
------- FILE DHCP.ASM LEVEL 3 PASS 2
      0  6da9					      include	"DHCP.ASM"
      1  6da9							;Source by Six of Style (Oliver VieBrooks)
      2  6da9							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  6da9							;
      4  6da9							;Last Updated 4/24/2006
      5  6da9							;
      6  6da9							;DHCP PROTOCOL=================================================================
      7  6da9							;							  _,.-------.,_
      8  6da9							;DHCP PACKET FORMAT:				      ,;~'	       '~;,
      9  6da9							;+----------+---------+----------+-----------+     ,;			   ;,
     10  6da9							;|$00-$0d   |$0e-$21  |$22-$29   |$2a-       |    ;			     ;
     11  6da9							;+----------+---------+----------+-----------+   ,'			     ',
     12  6da9							;|MAC Header|IP Header|UDP Header|DHCP Packet|  ,;			      ;,
     13  6da9							;+----------+---------+----------+-----------+  ; ;	  .	      .      ; ;
     14  6da9							;						 | ;   ______	    ______   ; |
     15  6da9							;MAC Header Fields:				 |  `/~"     ~" . "~	 "~\'  |
     16  6da9							;$00 - Destination MAC (6)			 |  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  6da9							;$06 - Source MAC (6)				  |   |        }:{	  |   |
     18  6da9							;$0c - Packet Type (2) 			  |   !       / | \	  !   |
     19  6da9							;						  .~  (__,.--" .^. "--.,__)  ~.
     20  6da9							;IP Header Fields:				  |	---;' / | \ `;---     |
     21  6da9							;$0e - IP Version (1)				   \__.       \/^\/	  .__/
     22  6da9							;$0f - Type of Service (1)			    V| \		 / |V
     23  6da9							;$10 - Total Length of packet (2)		     | |T~\___!___!___/~T| |
     24  6da9							;$12 - Identifier (2)				     | |`IIII_I_I_I_IIII'| |
     25  6da9							;$14 - Flags (1)				     |	\,III I I I III,/  |
     26  6da9							;$15 - Fragment (1)				      \   `~~~~~~~~~~'	  /
     27  6da9							;$16 - Time To Live (1)				\   .	    .	/
     28  6da9							;$17 - Protocol (1)					  \.	^    ./
     29  6da9							;$18 - Checksum (2)					    ^~~~^~~~^
     30  6da9							;$1a - Source IP Address (4)
     31  6da9							;$1e - Destination IP Address (4)
     32  6da9							;
     33  6da9							;UDP Header Fields:
     34  6da9							;$22 - Source Port (2)
     35  6da9							;$24 - Dest Port (2)
     36  6da9							;$26 - Length (2)
     37  6da9							;$28 - Checksum (2)
     38  6da9							;
     39  6da9							;DHCP Packet Fields
     40  6da9							;$2a - Opcode (1)
     41  6da9							;$2b - Hardware Type (1)
     42  6da9							;$2c - Hardware Address Length (1)
     43  6da9							;$2d - Hop Count (1)
     44  6da9							;$2e - Transaction ID (4)
     45  6da9							;$32 - Number of seconds (2)
     46  6da9							;$34 - Flags (2) (only using 1 bit!)
     47  6da9							;$36 - Client IP (4)
     48  6da9							;$3a - Your IP (4)
     49  6da9							;$3e - Server IP (4)
     50  6da9							;$42 - Gateway IP (4)
     51  6da9							;$46 - Client Hardware Address (16)
     52  6da9							;$56 - Server Host Name (64)
     53  6da9							;$96 - Boot filename (128)
     54  6da9							;=============================================================================
     55  6da9							;EQUATES
     56  6da9		       00 00	   DHCP_STATE_IDLE =	$00
     57  6da9		       00 01	   DHCP_STATE_DISCOVER =	$01
     58  6da9		       00 02	   DHCP_STATE_REQ =	$02
     59  6da9
     60  6da9
     61  6da9		       00 01	   DHCP_MTYPE_REQ =	$01
     62  6da9		       00 02	   DHCP_MTYPE_REPLY =	$02
     63  6da9
     64  6da9		       00 01	   DHCP_HWTYPE_ETHERNET =	1	;
     65  6da9
     66  6da9		       00	   DHCP_STATE dc.b	$00
     67  6da9		       00 44	   DHCP_SRC_PORT =	68
     68  6da9		       00 43	   DHCP_DEST_PORT =	67
     69  6daa
     70  6daa		       00 01	   DHCP_OPTION_MASK =	1
     71  6daa		       00 03	   DHCP_OPTION_ROUTER =	3
     72  6daa		       00 06	   DHCP_OPTION_NAMESERV =	6
     73  6daa		       00 32	   DHCP_OPTION_IPADDR =	50
     74  6daa		       00 33	   DHCP_OPTION_LEASE =	51
     75  6daa		       00 35	   DHCP_OPTION_TYPE =	53
     76  6daa		       00 36	   DHCP_OPTION_SERVER =	54
     77  6daa		       00 ff	   DHCP_OPTION_END =	255
     78  6daa
     79  6daa							;=============================================================================
     80  6daa		       00 00 00 00 DHCP_SERVER dc.b	0,0,0,0
     81  6dae				   DHCP_HEADER
     82  6dae		       00	   DHCP_MTYPE dc.b	$00
     83  6daf		       01	   DHCP_HWTYPE dc.b	$01
     84  6db0		       06	   DHCP_HWLEN dc.b	$06
     85  6db1		       00	   DHCP_HOP   dc.b	$00
     86  6db2		       37 33 7c 64 DHCP_TID   dc.b	$37,$33,$7c,$64
     87  6db6		       00 00	   DHCP_NOS   dc.b	$00,$00
     88  6db8		       00 00	   DHCP_FLAGS dc.b	$00,$00
     89  6dba		       00 00 00 00 DHCP_CADDRESS dc.b	$00,$00,$00,$00
     90  6dbe		       00 00 00 00 DHCP_YADDRESS dc.b	$00,$00,$00,$00
     91  6dc2		       00 00 00 00 DHCP_SADDRESS dc.b	$00,$00,$00,$00
     92  6dc6		       00 00 00 00 DHCP_GADDRESS dc.b	$00,$00,$00,$00
     93  6dca
     94  6dca		       00 00 00 00*DHCP_HWADDRESS ds.b	16,0
     95  6dda		       00 00 00 00*DHCP_SHOSTNAME ds.b	64,0
     96  6e1a		       00 00 00 00*DHCP_BFILENAME ds.b	128,0
     97  6e9a
     98  6e9a		       63 82 53 63 DHCP_MAGIC dc.b	99,130,83,99
     99  6e9e		       00 00 00 00*DHCP_DATA  ds.b	64,0
    100  6ede
    101  6ede		       35 01 01    DHCP_DISC_DATA dc.b	$35,$01,$01	;DHCP Message Type = DHCP Discover
    102  6ee1		       37 03 01 03*	      dc.b	$37,$03,$01,$03,$06	;Parameter Request List = Mask,Router,DNS
    103  6ee6		       ff		      dc.b	$ff
    104  6ee7
    105  6ee7				   DHCP_REQ_DATA
    106  6ee7		       35 01 03 	      dc.b	$35,$01,$03
    107  6eea		       36 04		      dc.b	$36,$04
    108  6eec		       00 00 00 00 DHCP_REQ_SRV dc.b	$00,$00,$00,$00
    109  6ef0		       32 04		      dc.b	$32,$04
    110  6ef2		       00 00 00 00 DHCP_REQ_IP dc.b	$00,$00,$00,$00
    111  6ef6		       ff		      dc.b	$ff
    112  6ef7
    113  6ef7
    114  6ef7							;============================================================================
    115  6ef7				   DHCP_PROCESS 		;Process incoming DHCP packet
    116  6ef7		       ad a9 6d 	      lda	DHCP_STATE
    117  6efa		       c5 01		      cmp	DHCP_STATE_DISCOVER
    118  6efc		       d0 03		      bne	DHCP_PROC0
    119  6efe							;Ok, we're in discover mode.  Is this an offer packet?
    120  6efe							;	lda (INPACKET+$11a)
    121  6efe							;	cmp #$35
    122  6efe							;	bne DHCP_PROCx
    123  6efe							;	lda (INPACKET+$11b)
    124  6efe							;	cmp #$01
    125  6efe							;	bne DHCP_PROCx
    126  6efe							;	lda (INPACKET+$11c)
    127  6efe							;	cmp #$02
    128  6efe							;	bne DHCP_PROCx
    129  6efe		       4c 09 6f 	      jmp	DHCP_OFFER_PROC	;send a request based on this data
    130  6f01				   DHCP_PROC0
    131  6f01		       c5 02		      cmp	DHCP_STATE_REQ
    132  6f03		       d0 03		      bne	DHCP_PROCx
    133  6f05		       4c 75 6f 	      jmp	DHCP_SEND_ACK	;send an ack
    134  6f08				   DHCP_PROCx
    135  6f08		       60		      rts
    136  6f09
    137  6f09
    138  6f09							;============================================================================
    139  6f09				   DHCP_OFFER_PROC		;process DHCP OFFER Packet
    140  6f09
    141  6f09		       ad 70 74 	      lda	INPACKET+$3a
    142  6f0c		       8d f2 6e 	      sta	DHCP_REQ_IP
    143  6f0f		       8d 2b 4f 	      sta	CARD_IP
    144  6f12		       ad 71 74 	      lda	INPACKET+$3b
    145  6f15		       8d f3 6e 	      sta	DHCP_REQ_IP+1
    146  6f18		       8d 2c 4f 	      sta	CARD_IP+1
    147  6f1b		       ad 72 74 	      lda	INPACKET+$3c
    148  6f1e		       8d f4 6e 	      sta	DHCP_REQ_IP+2
    149  6f21		       8d 2d 4f 	      sta	CARD_IP+2
    150  6f24		       ad 73 74 	      lda	INPACKET+$3d
    151  6f27		       8d 2e 4f 	      sta	CARD_IP+3
    152  6f2a		       8d f5 6e 	      sta	DHCP_REQ_IP+3
    153  6f2d
    154  6f2d		       ad 74 74 	      lda	INPACKET+$3e
    155  6f30		       8d ec 6e 	      sta	DHCP_REQ_SRV
    156  6f33		       ad 75 74 	      lda	INPACKET+$3f
    157  6f36		       8d ed 6e 	      sta	DHCP_REQ_SRV+1
    158  6f39		       ad 76 74 	      lda	INPACKET+$40
    159  6f3c		       8d ee 6e 	      sta	DHCP_REQ_SRV+2
    160  6f3f		       ad 77 74 	      lda	INPACKET+$41
    161  6f42		       8d ef 6e 	      sta	DHCP_REQ_SRV+3
    162  6f45							;HWTYPE, HWLEN, HOP, TID,NOS,flags,cad,yad,sad,gad,shost
    163  6f45							;bfilename,magic are static
    164  6f45							;hwaddress already set by discover
    165  6f45		       a9 50		      lda	#<(INPACKET+$11a)
    166  6f47		       a2 75		      ldx	#>(INPACKET+$11a)
    167  6f49				   DHCP_0x
    168  6f49		       20 f0 6f 	      jsr	DHCP_PARSEOPTION
    169  6f4c		       90 fb		      bcc	DHCP_0x
    170  6f4e
    171  6f4e							;Set DHCP_DATA
    172  6f4e		       a2 00		      ldx	#$00
    173  6f50				   DHCP_O1
    174  6f50		       bd e7 6e 	      lda	DHCP_REQ_DATA,x
    175  6f53		       9d 9e 6e 	      sta	DHCP_DATA,x
    176  6f56		       e8		      inx
    177  6f57		       e0 16		      cpx	#$16
    178  6f59		       d0 f5		      bne	DHCP_O1
    179  6f5b							;rest is pad
    180  6f5b		       a9 00		      lda	#$00
    181  6f5d				   DHCP_O2
    182  6f5d		       9d 9e 6e 	      sta	DHCP_DATA,x
    183  6f60		       e8		      inx
    184  6f61		       e0 40		      cpx	#$40
    185  6f63		       d0 f8		      bne	DHCP_O2
    186  6f65							;set state
    187  6f65		       a5 02		      lda	DHCP_STATE_REQ
    188  6f67		       8d a9 6d 	      sta	DHCP_STATE
    189  6f6a
    190  6f6a		       a9 8f		      lda	#<IP_BCASTIP
    191  6f6c		       a2 52		      ldx	#>IP_BCASTIP
    192  6f6e		       20 00 69 	      jsr	UDP_SET_DEST_IP
    193  6f71
    194  6f71		       4c bc 6f 	      jmp	DHCP_SEND
    195  6f74		       60		      rts
    196  6f75
    197  6f75							;============================================================================
    198  6f75				   DHCP_SEND_ACK
    199  6f75		       60		      rts
    200  6f76							;============================================================================
    201  6f76				   DHCP_DISCOVER		;Send DHCP Discover
    202  6f76							;zero out card_ip
    203  6f76		       a9 00		      lda	#$00
    204  6f78		       8d 2b 4f 	      sta	CARD_IP
    205  6f7b		       8d 2c 4f 	      sta	CARD_IP+1
    206  6f7e		       8d 2d 4f 	      sta	CARD_IP+2
    207  6f81		       8d 2e 4f 	      sta	CARD_IP+3
    208  6f84
    209  6f84							;Setup DHCP
    210  6f84		       a9 01		      lda	#DHCP_MTYPE_REQ
    211  6f86		       8d ae 6d 	      sta	DHCP_MTYPE
    212  6f89							;HWTYPE, HWLEN, HOP, TID,NOS,flags,cad,yad,sad,gad,shost
    213  6f89							;bfilename,magic are static
    214  6f89							;set client hardware address {Will only do this in DHCP_Discover)
    215  6f89		       a2 00		      ldx	#$00
    216  6f8b				   DHCP_D0
    217  6f8b		       bd 25 4f 	      lda	CARD_MAC,x
    218  6f8e		       9d ca 6d 	      sta	DHCP_HWADDRESS,x
    219  6f91		       e8		      inx
    220  6f92		       e0 06		      cpx	#$06
    221  6f94		       d0 f5		      bne	DHCP_D0
    222  6f96
    223  6f96							;Set DHCP_DATA
    224  6f96		       a2 00		      ldx	#$00
    225  6f98				   DHCP_D1
    226  6f98		       bd de 6e 	      lda	DHCP_DISC_DATA,x
    227  6f9b		       9d 9e 6e 	      sta	DHCP_DATA,x
    228  6f9e		       e8		      inx
    229  6f9f		       e0 09		      cpx	#$09
    230  6fa1		       d0 f5		      bne	DHCP_D1
    231  6fa3							;rest is pad
    232  6fa3		       a9 00		      lda	#$00
    233  6fa5				   DHCP_D2
    234  6fa5		       9d 9e 6e 	      sta	DHCP_DATA,x
    235  6fa8		       e8		      inx
    236  6fa9		       e0 40		      cpx	#$40
    237  6fab		       d0 f8		      bne	DHCP_D2
    238  6fad		       a5 01		      lda	DHCP_STATE_DISCOVER
    239  6faf		       8d a9 6d 	      sta	DHCP_STATE
    240  6fb2		       a9 8f		      lda	#<IP_BCASTIP
    241  6fb4		       a2 52		      ldx	#>IP_BCASTIP
    242  6fb6		       20 00 69 	      jsr	UDP_SET_DEST_IP
    243  6fb9
    244  6fb9		       4c bc 6f 	      jmp	DHCP_SEND
    245  6fbc
    246  6fbc							;============================================================================
    247  6fbc				   DHCP_SEND
    248  6fbc							;lda #<IP_BCAST
    249  6fbc							;ldx #>IP_BCAST
    250  6fbc							;jsr UDP_SET_DEST_IP
    251  6fbc		       a9 01		      lda	#$01
    252  6fbe		       8d 51 65 	      sta	UDP_BCAST
    253  6fc1							;Prep UDP
      0  6fc1					      ldax	#DHCP_SRC_PORT	;bootpc
      1  6fc1		       a2 00		      ldx	#>#DHCP_SRC_PORT
      2  6fc3		       a9 44		      lda	#<#DHCP_SRC_PORT
    255  6fc5		       20 f2 68 	      jsr	UDP_SET_SRC_PORT
      0  6fc8					      ldax	#DHCP_DEST_PORT	;bootps
      1  6fc8		       a2 00		      ldx	#>#DHCP_DEST_PORT
      2  6fca		       a9 43		      lda	#<#DHCP_DEST_PORT
    257  6fcc		       20 f9 68 	      jsr	UDP_SET_DEST_PORT
    258  6fcf							;Set Data Len
      0  6fcf					      ldax	#304
      1  6fcf		       a2 01		      ldx	#>#304
      2  6fd1		       a9 30		      lda	#<#304
    260  6fd3		       20 14 69 	      jsr	UDP_SET_DATALEN
    261  6fd6
    262  6fd6							;copy to udp data
    263  6fd6		       a2 00		      ldx	#$00
    264  6fd8		       bd ae 6d    DHCP_S0    lda	DHCP_HEADER,x
    265  6fdb		       9d 66 65 	      sta	UDP_DATA,x
    266  6fde		       e8		      inx
    267  6fdf		       d0 f7		      bne	DHCP_S0
    268  6fe1		       bd 12 6e 	      lda	DHCP_HEADER+100,x
    269  6fe4		       9d ca 65    DHCP_S1    sta	UDP_DATA+100,x
    270  6fe7		       e8		      inx
    271  6fe8		       e0 31		      cpx	#49
    272  6fea		       d0 f8		      bne	DHCP_S1
    273  6fec
    274  6fec		       20 a1 68 	      jsr	UDP_SEND
    275  6fef		       60		      rts
    276  6ff0
    277  6ff0
    278  6ff0				   DHCP_PARSEOPTION
    279  6ff0							;expects option start in x:a, returns cc if good, cs if end of options
    280  6ff0							;returns address of next option in x:a
    281  6ff0		       85 55		      sta	DHCP_PTR
    282  6ff2		       86 56		      stx	DHCP_PTR+1
    283  6ff4				   DH_P0
    284  6ff4		       a0 00		      ldy	#$00
    285  6ff6		       b1 55		      lda	(DHCP_PTR),y
    286  6ff8		       c9 ff		      cmp	#DHCP_OPTION_END
    287  6ffa
    288  6ffa		       d0 02		      bne	DH_P1
    289  6ffc							;end of options
    290  6ffc		       38		      sec
    291  6ffd		       60		      rts
    292  6ffe
    293  6ffe				   DH_P1		;subnet mask
    294  6ffe		       c9 01		      cmp	#DHCP_OPTION_MASK
    295  7000		       d0 1e		      bne	DH_P2
    296  7002		       20 dc 70 	      jsr	DH_PAdd2	;skip option byte+length byte
    297  7005		       a5 55		      lda	DHCP_PTR
      0  7007					      ldax	CARD_MASK
      1  7007		       a2 4f		      ldx	#>CARD_MASK
      2  7009		       a9 2f		      lda	#<CARD_MASK
      0  700b					      stax	as0
      1  700b		       8e 7c 48 	      stx	as0+1
      2  700e		       8d 7b 48 	      sta	as0
      0  7011					      ldxa	DHCP_PTR
      1  7011		       a6 56		      ldx	DHCP_PTR+1
      2  7013		       a5 55		      lda	DHCP_PTR
    301  7015		       a0 04		      ldy	#$04
    302  7017		       20 a3 48 	      jsr	copybytes
    303  701a		       20 d6 70 	      jsr	DH_PAdd4
    304  701d		       4c d0 70 	      jmp	DH_Px
    305  7020				   DH_P2		;gateway
    306  7020		       c9 03		      cmp	#DHCP_OPTION_ROUTER
    307  7022		       d0 1e		      bne	DH_P3
    308  7024		       20 dc 70 	      jsr	DH_PAdd2	;skip option byte+length byte
    309  7027		       a5 55		      lda	DHCP_PTR
      0  7029					      ldax	CARD_GATE
      1  7029		       a2 4f		      ldx	#>CARD_GATE
      2  702b		       a9 33		      lda	#<CARD_GATE
      0  702d					      stax	as0
      1  702d		       8e 7c 48 	      stx	as0+1
      2  7030		       8d 7b 48 	      sta	as0
      0  7033					      ldxa	DHCP_PTR
      1  7033		       a6 56		      ldx	DHCP_PTR+1
      2  7035		       a5 55		      lda	DHCP_PTR
    313  7037		       a0 04		      ldy	#$04
    314  7039		       20 a3 48 	      jsr	copybytes
    315  703c		       20 d6 70 	      jsr	DH_PAdd4
    316  703f		       4c d0 70 	      jmp	DH_Px
    317  7042				   DH_P3		;name server
    318  7042		       c9 06		      cmp	#DHCP_OPTION_NAMESERV
    319  7044		       d0 1e		      bne	DH_P4
    320  7046		       20 dc 70 	      jsr	DH_PAdd2	;skip option byte+length byte (it's 4)
    321  7049		       a5 55		      lda	DHCP_PTR
      0  704b					      ldax	CARD_NS1
      1  704b		       a2 4f		      ldx	#>CARD_NS1
      2  704d		       a9 37		      lda	#<CARD_NS1
      0  704f					      stax	as0
      1  704f		       8e 7c 48 	      stx	as0+1
      2  7052		       8d 7b 48 	      sta	as0
      0  7055					      ldxa	DHCP_PTR
      1  7055		       a6 56		      ldx	DHCP_PTR+1
      2  7057		       a5 55		      lda	DHCP_PTR
    325  7059		       a0 04		      ldy	#$04
    326  705b		       20 a3 48 	      jsr	copybytes
    327  705e		       20 d6 70 	      jsr	DH_PAdd4
    328  7061		       4c d0 70 	      jmp	DH_Px
    329  7064				   DH_P4		;our ip address
    330  7064		       c9 32		      cmp	#DHCP_OPTION_IPADDR
    331  7066		       d0 1e		      bne	DH_P5
    332  7068		       20 dc 70 	      jsr	DH_PAdd2	;skip option byte+length byte
    333  706b		       a5 55		      lda	DHCP_PTR
      0  706d					      ldax	CARD_IP
      1  706d		       a2 4f		      ldx	#>CARD_IP
      2  706f		       a9 2b		      lda	#<CARD_IP
      0  7071					      stax	as0
      1  7071		       8e 7c 48 	      stx	as0+1
      2  7074		       8d 7b 48 	      sta	as0
      0  7077					      ldxa	DHCP_PTR
      1  7077		       a6 56		      ldx	DHCP_PTR+1
      2  7079		       a5 55		      lda	DHCP_PTR
    337  707b		       a0 04		      ldy	#$04
    338  707d		       20 a3 48 	      jsr	copybytes
    339  7080		       20 d6 70 	      jsr	DH_PAdd4
    340  7083		       4c d0 70 	      jmp	DH_Px
    341  7086				   DH_P5		;DHCP Lease Duration
    342  7086		       c9 33		      cmp	#DHCP_OPTION_LEASE
    343  7088		       d0 09		      bne	DH_P6
    344  708a		       20 dc 70 	      jsr	DH_PAdd2	;skip option byte+length byte
    345  708d		       20 d6 70 	      jsr	DH_PAdd4	;skip this data.  Fuck leasing/renewing for now.
    346  7090		       4c d0 70 	      jmp	DH_Px
    347  7093				   DH_P6		;DHCP Message Type
    348  7093		       c9 35		      cmp	#DHCP_OPTION_TYPE
    349  7095		       d0 09		      bne	DH_P7
    350  7097		       20 dc 70 	      jsr	DH_PAdd2	;skip option byte + length byte
    351  709a		       20 df 70 	      jsr	DH_PAdd	;skip data
    352  709d		       4c d0 70 	      jmp	DH_Px
    353  70a0				   DH_P7		;DHCP Server Address
    354  70a0		       c9 36		      cmp	#DHCP_OPTION_SERVER
    355  70a2		       d0 1e		      bne	DH_PErr
    356  70a4		       20 dc 70 	      jsr	DH_PAdd2	;skip option byte+length byte
    357  70a7		       a5 55		      lda	DHCP_PTR
      0  70a9					      ldax	DHCP_SERVER
      1  70a9		       a2 6d		      ldx	#>DHCP_SERVER
      2  70ab		       a9 aa		      lda	#<DHCP_SERVER
      0  70ad					      stax	as0
      1  70ad		       8e 7c 48 	      stx	as0+1
      2  70b0		       8d 7b 48 	      sta	as0
      0  70b3					      ldxa	DHCP_PTR
      1  70b3		       a6 56		      ldx	DHCP_PTR+1
      2  70b5		       a5 55		      lda	DHCP_PTR
    361  70b7		       a0 04		      ldy	#$04
    362  70b9		       20 a3 48 	      jsr	copybytes
    363  70bc		       20 d6 70 	      jsr	DH_PAdd4
    364  70bf		       4c d0 70 	      jmp	DH_Px
    365  70c2				   DH_PErr		;unknown option, attempt to skip it and it's data.
    366  70c2		       20 df 70 	      jsr	DH_PAdd	;discard option
    367  70c5		       a0 00		      ldy	#$00
    368  70c7		       b1 55		      lda	(DHCP_PTR),y
    369  70c9		       a8		      tay
    370  70ca		       20 df 70    DHPErrL    jsr	DH_PAdd
    371  70cd		       88		      dey
    372  70ce		       d0 fa		      bne	DHPErrL
    373  70d0				   DH_Px
      0  70d0					      ldxa	DHCP_PTR
      1  70d0		       a6 56		      ldx	DHCP_PTR+1
      2  70d2		       a5 55		      lda	DHCP_PTR
    375  70d4		       18		      clc
    376  70d5		       60		      rts
    377  70d6
    378  70d6				   DH_PAdd4
    379  70d6		       20 df 70 	      jsr	DH_PAdd
    380  70d9		       20 df 70 	      jsr	DH_PAdd
    381  70dc				   DH_PAdd2
    382  70dc		       20 df 70 	      jsr	DH_PAdd
    383  70df				   DH_PAdd
    384  70df		       e6 55		      inc	DHCP_PTR
    385  70e1		       d0 02		      bne	DHPAddx
    386  70e3		       e6 56		      inc	DHCP_PTR+1
    387  70e5				   DHPAddx
    388  70e5		       60		      rts
    389  70e6
    390  70e6
    391  70e6
------- FILE SIXNET.ASM
------- FILE DNS.ASM LEVEL 3 PASS 2
      0  70e6					      include	"DNS.ASM"
      1  70e6							;Source by Six of Style (Oliver VieBrooks)
      2  70e6							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  70e6							;
      4  70e6							;Last Updated 8/27/2005
      5  70e6							;
      6  70e6							;DNS PROTOCOL=================================================================
      7  70e6							;							 _,.-------.,_
      8  70e6							;   PACKET FORMAT:				     ,;~'	      '~;,
      9  70e6							;+----------+----------+----------+		   ,;			  ;,
     10  70e6							;|$00-$0d   |$0e-$21	|$22-$29   |		  ;			    ;
     11  70e6							;+----------+----------+----------+		 ,'			    ',
     12  70e6							;|MAC Header|IP Header |UDP Header|		,;			     ;,
     13  70e6							;+----------+----------+----------+		; ;	 .	     .	    ; ;
     14  70e6							;|						| ;   ______	   ______   ; |
     15  70e6							;						|  `/~"     ~" . "~	"~\'  |
     16  70e6							;						|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  70e6							;						 |   |	      }:{	 |   |
     18  70e6							;						 |   !	     / | \	 !   |
     19  70e6							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  70e6							;MAC Header Fields:				 |     ---;' / | \ `;---     |
     21  70e6							;$00 - Destination MAC (6)			  \__.	     \/^\/	 .__/
     22  70e6							;$06 - Source MAC (6)				   V| \ 		/ |V
     23  70e6							;$0c - Packet Type (2) 			    | |T~\___!___!___/~T| |
     24  70e6							;						    | |`IIII_I_I_I_IIII'| |
     25  70e6							;IP Header Fields:				    |  \,III I I I III,/  |
     26  70e6							;$0e - IP Version (1)				     \	 `~~~~~~~~~~'	 /
     27  70e6							;$0f - Type of Service (1)			       \   .	   .   /
     28  70e6							;$10 - Total Length of packet (2)			 \.    ^    ./
     29  70e6							;$12 - Identifier (2)					   ^~~~^~~~^
     30  70e6							;$14 - Flags (1)
     31  70e6							;$15 - Fragment (1)
     32  70e6							;$16 - Time To Live (1)
     33  70e6							;$17 - Protocol (1)
     34  70e6							;$18 - Checksum (2)
     35  70e6							;$1a - Source IP Address (4)
     36  70e6							;$1e - Destination IP Address (4)
     37  70e6							;
     38  70e6							;UDP Header Fields:
     39  70e6							;$22 - Source Port (2)
     40  70e6							;$24 - Dest Port (2)
     41  70e6							;$26 - Length (2)
     42  70e6							;$28 - Checksum (2)
     43  70e6							;
     44  70e6							;DNS Fields:
     45  70e6							;$2a - Identification (2)
     46  70e6							;$2c - Flags (2)
     47  70e6							;	Control Byte 1 (1)
     48  70e6							;	bit 0 - Query/Response
     49  70e6							;	bits 1-4 - Opcode
     50  70e6							;	bit 5 - Authoritative Answer
     51  70e6							;	bit 6 - Truncated
     52  70e6							;	bit 7 - Recursion Desired
     53  70e6							;	Control Byte 2 (1)
     54  70e6							;	bit 0 - Recursion Available
     55  70e6							;	bit 1 - Z
     56  70e6							;	bit 2 - Authenticated Data
     57  70e6							;	bit 3 - Checking Disabled
     58  70e6							;	bits 4-7 - Return code
     59  70e6							;$2e - Total Questions (2)
     60  70e6							;$30 - Total Answer RRs (2)
     61  70e6							;$32 - Total Authority RRs (2)
     62  70e6							;$34 - Total Additional RRs (2)
     63  70e6							;$36 - Questions (Variable Length)
     64  70e6							;$?? - Answer RRs (Variable Length)
     65  70e6							;$?? - Authority RRs (Variable Length)
     66  70e6							;$?? - Additional RRs (Variable Length)
     67  70e6
     68  70e6		       00 00	   DNS_STATUS_IDLE =	$00
     69  70e6		       00 01	   DNS_STATUS_QUERY =	$01
     70  70e6
     71  70e6		       01 00	   DNS_FLAGS_QUERY =	$0100
     72  70e6
     73  70e6		       0c 57	   DNS_SOURCE_PORT =	3159
     74  70e6
     75  70e6		       00 01	   DNS_TYPE_HOST =	$0001
     76  70e6		       00 01	   DNS_CLASS_INET =	$0001
     77  70e6
     78  70e6		       00	   DNS_STATUS dc.b	#DNS_STATUS_IDLE
     79  70e7
     80  70e7				   DNS_HEADER
     81  70e7		       00 00	   DNS_IDENT  dc.b	$00,$00	;Transaction ID
     82  70e9		       01 00	   DNS_FLAGS  dc.b	$01,$00
     83  70eb
     84  70eb		       00 01	   DNS_QUESTIONS dc.b	$00,$01
     85  70ed		       00 00	   DNS_ANSRR  dc.b	$00,$00
     86  70ef		       00 00	   DNS_AUTHRR dc.b	$00,$00
     87  70f1		       00 00	   DNS_ADDITION dc.b	$00,$00
     88  70f3
     89  70f3		       00 00 00 00*DNS_NAMBUF dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     90  70fb		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     91  7103		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     92  710b		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     93  7113		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     94  711b		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     95  7123		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     96  712b		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     97  7133		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     98  713b		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     99  7143
    100  7143		       00 01	   DNS_QUERY_TYPE dc.b	$00,$01
    101  7145		       00 01	   DNS_CLASS  dc.b	$00,$01
    102  7147
    103  7147		       00	   DNS_NAMLEN dc.b	$00	;should include trailing null
    104  7148
    105  7148		       00 00	   DNS_ANSADDR dc.b	$00,$00	;holder for answer offset, calced at query time
    106  714a							;(INPACKET+$36)+DNS_NAMLEN+$04
    107  714a
    108  714a		       00 00 00 00 DNS_RESIP  dc.b	0,0,0,0	;holder for resolved IP
    109  714e
    110  714e				   DNS_PROCESS		;process incoming DNS packet
    111  714e							;IPRINT "processing dns packet"
    112  714e							;Check Transaction ID
    113  714e		       ad 60 74 	      lda	INPACKET+$2a
    114  7151		       cd e7 70 	      cmp	DNS_IDENT
    115  7154		       d0 3f		      bne	DNP_0
    116  7156		       ad 61 74 	      lda	INPACKET+$2b
    117  7159		       cd e8 70 	      cmp	DNS_IDENT+1
    118  715c		       d0 37		      bne	DNP_0
    119  715e							;This is the one we were waiting for
    120  715e							;calculate Answer base
    121  715e							;INPACKET+$3a+NAMELEN+$0d ($47+NAMELEN)
    122  715e		       a9 7d		      lda	#<(INPACKET+$47)
    123  7160		       8d 48 71 	      sta	DNS_ANSADDR
    124  7163		       a9 74		      lda	#>(INPACKET+$47)
    125  7165		       8d 49 71 	      sta	DNS_ANSADDR+1
    126  7168		       ad 47 71 	      lda	DNS_NAMLEN
    127  716b		       18		      clc
    128  716c		       6d 48 71 	      adc	DNS_ANSADDR
    129  716f		       8d 48 71 	      sta	DNS_ANSADDR
    130  7172		       90 03		      bcc	DNP_1
    131  7174		       ee 49 71 	      inc	DNS_ANSADDR+1
    132  7177				   DNP_1
    133  7177							;IP is at (DNS_ANSADDR)
    134  7177		       ad 48 71 	      lda	DNS_ANSADDR
    135  717a		       8d 86 71 	      sta	DNP_L+1
    136  717d		       ad 49 71 	      lda	DNS_ANSADDR+1
    137  7180		       8d 87 71 	      sta	DNP_L+2
    138  7183
    139  7183		       a2 00		      ldx	#$00
    140  7185		       bd ff ff    DNP_L      lda	$ffff,x
    141  7188		       9d 4a 71 	      sta	DNS_RESIP,x
    142  718b		       e8		      inx
    143  718c		       e0 04		      cpx	#$04
    144  718e		       d0 f5		      bne	DNP_L
    145  7190		       a9 00		      lda	#DNS_STATUS_IDLE
    146  7192		       8d e6 70 	      sta	DNS_STATUS
    147  7195				   DNP_0
    148  7195		       60		      rts
    149  7196
    150  7196							;Before DNS_SEND
    151  7196							;Set Transaction Ident
    152  7196							;Set Flags
    153  7196							;Set Num of Questions
    154  7196
    155  7196				   DNS_REQUEST
    156  7196		       a9 01		      lda	#DNS_STATUS_QUERY
    157  7198		       8d e6 70 	      sta	DNS_STATUS
    158  719b							;generate IDENT
    159  719b		       ad 08 dc 	      lda	$dc08
    160  719e		       8d e7 70 	      sta	DNS_IDENT
    161  71a1		       ad 09 dc 	      lda	$dc09
    162  71a4		       8d e8 70 	      sta	DNS_IDENT+1
    163  71a7
    164  71a7							;Set UDP Source Port
    165  71a7		       a2 0c		      ldx	#>DNS_SOURCE_PORT
    166  71a9		       a9 57		      lda	#<DNS_SOURCE_PORT
    167  71ab		       20 f2 68 	      jsr	UDP_SET_SRC_PORT
    168  71ae
    169  71ae							;Set UDP Dest Port
    170  71ae		       a2 00		      ldx	#$00
    171  71b0		       a9 35		      lda	#53
    172  71b2		       20 f9 68 	      jsr	UDP_SET_DEST_PORT
    173  71b5
    174  71b5							;set UDP Data length to $10 + DNS_NAMLEN
    175  71b5		       a2 00		      ldx	#$00
    176  71b7		       ad 47 71 	      lda	DNS_NAMLEN
    177  71ba		       18		      clc
    178  71bb		       69 11		      adc	#$11	;0
    179  71bd		       90 01		      bcc	DNR_4
    180  71bf		       e8		      inx
    181  71c0				   DNR_4
    182  71c0		       20 14 69 	      jsr	UDP_SET_DATALEN
    183  71c3
    184  71c3							;COpy Data
    185  71c3		       a2 00		      ldx	#$00
    186  71c5				   DNR_5
    187  71c5		       bd e7 70 	      lda	DNS_HEADER,x
    188  71c8		       9d 66 65 	      sta	UDP_DATA,x
    189  71cb		       e8		      inx
    190  71cc		       e0 0c		      cpx	#$0c
    191  71ce		       d0 f5		      bne	DNR_5
    192  71d0
    193  71d0							;Copy Name into UDP_DATA
    194  71d0		       a0 00		      ldy	#$00
    195  71d2				   DNR_0
    196  71d2		       b9 f3 70 	      lda	DNS_NAMBUF,y
    197  71d5		       99 72 65 	      sta	UDP_DATA+$0c,y
    198  71d8		       c8		      iny
    199  71d9		       cc 47 71 	      cpy	DNS_NAMLEN
    200  71dc		       d0 f4		      bne	DNR_0
    201  71de				   DNR_C
    202  71de							;Insert Query Type and Class
    203  71de		       c8		      iny
    204  71df		       a2 00		      ldx	#$00
    205  71e1				   DNR_D
    206  71e1		       bd 43 71 	      lda	DNS_QUERY_TYPE,x
    207  71e4		       99 72 65 	      sta	UDP_DATA+$0c,y
    208  71e7		       e8		      inx
    209  71e8		       c8		      iny
    210  71e9		       e0 04		      cpx	#$04
    211  71eb		       d0 f4		      bne	DNR_D
    212  71ed
    213  71ed							;set dest ip
    214  71ed		       a9 37		      lda	#<CARD_NS1
    215  71ef		       a2 4f		      ldx	#>CARD_NS1
    216  71f1		       20 00 69 	      jsr	UDP_SET_DEST_IP
    217  71f4
    218  71f4							;Before UDP_SEND
    219  71f4							;Set Source Port  check
    220  71f4							;Set Dest Port    check
    221  71f4							;Set Data Len	   check
    222  71f4							;Copy Data  check
    223  71f4							;Set Dest IP check
    224  71f4
    225  71f4		       a9 00		      lda	#$00
    226  71f6		       8d 51 65 	      sta	UDP_BCAST
    227  71f9		       20 a1 68 	      jsr	UDP_SEND
    228  71fc		       60		      rts
    229  71fd
    230  71fd		       00	   DNS_PTR    dc.b	$00
    231  71fe
    232  71fe				   DNS_SETNAME		;Expectx x:a to point to a nts, returns len (including null) in y
    233  71fe							;processes domain name to acceptable format (len)string(len)string, etc...
    234  71fe
    235  71fe		       85 5f		      sta	DNS_TMP
    236  7200		       86 60		      stx	DNS_TMP+1
    237  7202		       a0 00		      ldy	#$00
    238  7204		       a2 00		      ldx	#$00
    239  7206		       8c fd 71 	      sty	DNS_PTR	;initial prevloc is $00
    240  7209				   DNS_SN0
    241  7209		       b1 5f		      lda	(DNS_TMP),y
    242  720b		       f0 1f		      beq	DNS_SN1	;Is it a $00?
    243  720d		       c9 2e		      cmp	#$2e	;is it a dot?
    244  720f		       d0 10		      bne	DNS_SN3
    245  7211							;store char count in previous location
    246  7211		       8a		      txa
    247  7212		       ae fd 71 	      ldx	DNS_PTR
    248  7215		       9d f3 70 	      sta	DNS_NAMBUF,x
    249  7218							;set location to current
    250  7218		       98		      tya
    251  7219		       18		      clc
    252  721a		       69 01		      adc	#$01
    253  721c		       8d fd 71 	      sta	DNS_PTR
    254  721f							;start char count back at -1 (to account for the current char)
    255  721f		       a2 ff		      ldx	#$ff
    256  7221				   DNS_SN3
    257  7221		       99 f4 70 	      sta	DNS_NAMBUF+1,y
    258  7224		       e8		      inx		;inc char count
    259  7225		       c8		      iny
    260  7226		       c0 f0		      cpy	#$f0	;max out at $f0
    261  7228		       d0 df		      bne	DNS_SN0
    262  722a		       a9 00		      lda	#$00
    263  722c				   DNS_SN1
    264  722c							;store final null byte
    265  722c		       99 f4 70 	      sta	DNS_NAMBUF+1,y
    266  722f		       c8		      iny
    267  7230
    268  7230							;store final length
    269  7230		       8c 47 71 	      sty	DNS_NAMLEN
    270  7233				   DNS_SN2
    271  7233							;stash final strlen
    272  7233		       8a		      txa
    273  7234		       ae fd 71 	      ldx	DNS_PTR
    274  7237		       9d f3 70 	      sta	DNS_NAMBUF,x
    275  723a		       60		      rts
    276  723b
    277  723b
    278  723b				   DNS_RESOLVER
      0  723b					      PRINT	CRLF,"resolve:"
      1  723b		       20 f8 47 	      jsr	prns
      2  723e		       0d 72 65 73*	      dc.b	CRLF,"resolve:",0
    280  7248							; (LB)
    281  7248							;	INPUT SEND_DOMAIN,80
    282  7248							;	PRINT CRLF,"resolving..."
    283  7248							;	ldx #>SEND_DOMAIN
    284  7248							;	lda #<SEND_DOMAIN
    285  7248		       20 fe 71 	      jsr	DNS_SETNAME
    286  724b		       20 96 71 	      jsr	DNS_REQUEST
    287  724e		       ad e6 70    DNRE_0     lda	DNS_STATUS
    288  7251		       d0 fb		      bne	DNRE_0
      0  7253					      PRINT	CRLF
      1  7253		       20 f8 47 	      jsr	prns
      2  7256		       0d 00		      dc.b	CRLF,0
    290  7258		       a2 71		      ldx	#>DNS_RESIP
    291  725a		       a9 4a		      lda	#<DNS_RESIP
    292  725c		       20 d1 49 	      jsr	printip
    293  725f		       20 ce 47 	      jsr	getanykey
    294  7262		       60		      rts
------- FILE SIXNET.ASM
------- FILE PING.ASM LEVEL 3 PASS 2
      0  7263					      include	"PING.ASM"
      1  7263							;Source by Six of Style (Oliver VieBrooks)
      2  7263							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  7263							;
      4  7263							;Last Updated 1/26/2006
      5  7263							;
      6  7263							;PING PROTOCOL================================================================
      7  7263							;							 _,.-------.,_
      8  7263							;ICMP PACKET FORMAT:				     ,;~'	      '~;,
      9  7263							;+----------+---------+-----------+		   ,;			  ;,
     10  7263							;|$00-$0d   |$0e-$21  |$22-$24    |		  ;			    ;
     11  7263							;+----------+---------+-----------+		 ,'	   Style 2006	    ',
     12  7263							;|MAC Header|IP Header|ICMP Header|		,;			     ;,
     13  7263							;+----------+---------+-----------+		; ;	 .	     .	    ; ;
     14  7263							;|$26-$2a   |$2b->    |			| ;   ______	   ______   ; |
     15  7263							;+----------+---------+			|  `/~"     ~" . "~	"~\'  |
     16  7263							;|PING Hdr  |PING Data|			|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  7263							;+----------+---------+			 |   |	      }:{	 |   |
     18  7263							;						 |   !	     / | \	 !   |
     19  7263							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  7263							;IP Header Fields:				 |     ---;' / | \ `;---     |
     21  7263							;$0e - IP Version				  \__.	     \/^\/	 .__/
     22  7263							;$0f - Type of Service 			   V| \ 		/ |V
     23  7263							;$10 - Total Length of packet			    | |T~\___!___!___/~T| |
     24  7263							;$12 - Identifier				    | |`IIII_I_I_I_IIII'| |
     25  7263							;$14 - Flags					    |  \,III I I I III,/  |
     26  7263							;$15 - Fragment				     \	 `~~~~~~~~~~'	 /
     27  7263							;$16 - Time To Live				       \   .	   .   /
     28  7263							;$17 - Protocol					 \.    ^    ./
     29  7263							;$18 - Checksum					   ^~~~^~~~^
     30  7263							;$1a - Source IP Address
     31  7263							;$1e - Destination IP Address
     32  7263							;
     33  7263							;ICMP Fields:
     34  7263							;$22 - Type
     35  7263							;$23 - Code
     36  7263							;$24 - Checksum
     37  7263							;$26 - Data
     38  7263							;
     39  7263							;PING Fields:
     40  7263							;$27 - Identifier
     41  7263							;$29 - Sequence Number
     42  7263							;$2b-> - Ping payload
     43  7263
     44  7263		       00 00	   PING_STATE_IDLE =	$00	;doing nothing
     45  7263		       00 01	   PING_STATE_REQ =	$01	;waiting for pong
     46  7263		       00 02	   PING_STATE_REPLY =	$02	;replying to ping
     47  7263		       00 03	   PING_STATE_DNU =	$03	;Destination unreachable (idle)
     48  7263
     49  7263		       00	   PING_STATE dc.b	$00
     50  7264		       00 00 00 00*PING_MAC   dc.b	$00,$00,$00,$00,$00,$00
     51  726a		       00 00 00 00 PING_IP    dc.b	$00,$00,$00,$00
     52  726e
     53  726e				   PING_HEADER
     54  726e		       00 00	   PING_IDENT dc.b	$00,$00
     55  7270		       00 00	   PING_SEQUENCE dc.b	$00,$00
     56  7272		       73 69 78 6e*PING_DATA  dc.b	"sixnet 1.0 ping payload  http://thedarkside.ath.cx/sixnet c64 c64"
     57  72b3				   PING_DATAEND
     58  72b3
     59  72b3
     60  72b3		       01	   PING_REPLYTOPING dc.b	$01
     61  72b4		       00	   PING_PONGTICK dc.b	$00
     62  72b5
     63  72b5							;Before ICMP_SEND
     64  72b5							;Set Type
     65  72b5							;Set Code
     66  72b5							;Put Data in ICMP_Data and Set Data Length
     67  72b5							;Set Dest IP
     68  72b5
     69  72b5				   PING_PING		; PING (PING_IP,PING_MAC)
     70  72b5							;set type
     71  72b5		       a9 08		      lda	#ICMP_T_PING	;ICMP Echo Request
     72  72b7		       20 ee 64 	      jsr	ICMP_SET_TYPE
     73  72ba
     74  72ba							;set code
     75  72ba		       a9 00		      lda	#$00
     76  72bc		       20 f2 64 	      jsr	ICMP_SET_CODE
     77  72bf
     78  72bf							;set data Expects data address in x:a, number of bytes in y
     79  72bf		       a2 72		      ldx	#>PING_HEADER
     80  72c1		       a9 6e		      lda	#<PING_HEADER
     81  72c3		       a0 45		      ldy	#(PING_DATAEND-PING_HEADER)
     82  72c5		       20 f6 64 	      jsr	ICMP_COPY_DATA
     83  72c8
     84  72c8							;set dest IP
     85  72c8		       a9 6a		      lda	#<PING_IP
     86  72ca		       a2 72		      ldx	#>PING_IP
     87  72cc		       20 10 65 	      jsr	ICMP_SET_DEST_IP
     88  72cf
     89  72cf		       a9 01		      lda	#PING_STATE_REQ
     90  72d1		       8d 63 72 	      sta	PING_STATE
     91  72d4		       20 b5 64 	      jsr	ICMP_SEND
     92  72d7
     93  72d7		       ee 6e 72 	      inc	PING_IDENT
     94  72da		       d0 03		      bne	PING_PING_x
     95  72dc		       ee 6f 72 	      inc	PING_IDENT+1
     96  72df				   PING_PING_x
     97  72df		       60		      rts
     98  72e0
     99  72e0				   PING_PONG		; PONG (PING_IP)
    100  72e0							;set type
    101  72e0		       a9 00		      lda	#ICMP_T_PONG	;ICMP Reply
    102  72e2		       20 ee 64 	      jsr	ICMP_SET_TYPE
    103  72e5
    104  72e5							;set code
    105  72e5		       a9 00		      lda	#$00
    106  72e7		       20 f2 64 	      jsr	ICMP_SET_CODE
    107  72ea
    108  72ea							;set dest IP
    109  72ea		       a9 50		      lda	#<(INPACKET+$1a)
    110  72ec		       a2 74		      ldx	#>(INPACKET+$1a)
    111  72ee		       20 10 65 	      jsr	ICMP_SET_DEST_IP
    112  72f1
    113  72f1							;Get length of ICMP Data by subtracting header size from INPACKET_LENGTH
    114  72f1		       ad 2c 74 	      lda	IN_PACKET_LENGTH
    115  72f4		       8d 7b 48 	      sta	as0
    116  72f7		       ad 2d 74 	      lda	IN_PACKET_LENGTH+$01
    117  72fa		       8d 7c 48 	      sta	as0+$01
    118  72fd		       a9 26		      lda	#$26	;length of MAC+IP+ICMP headers
    119  72ff		       8d 7d 48 	      sta	as1
    120  7302		       a9 00		      lda	#$00
    121  7304		       8d 7e 48 	      sta	as1+$01
    122  7307		       20 92 48 	      jsr	sub16
    123  730a		       a8		      tay		;screw stuff over 255 bytes
    124  730b
    125  730b							;Copy ICMP Data from incoming packet to outgoing packet
    126  730b		       a9 5c		      lda	#<(INPACKET+$26)
    127  730d		       a2 74		      ldx	#>(INPACKET+$26)
    128  730f		       20 f6 64 	      jsr	ICMP_COPY_DATA
    129  7312
    130  7312		       20 b5 64 	      jsr	ICMP_SEND
    131  7315		       60		      rts
    132  7316
    133  7316				   PING_DNU
    134  7316		       a9 03		      lda	#PING_STATE_DNU
    135  7318		       8d 63 72 	      sta	PING_STATE
    136  731b		       60		      rts
    137  731c
    138  731c				   PING_PONGED		; process incoming pong
    139  731c							;are we waiting for a pong?
    140  731c							;Is this from the IP we pinged?
    141  731c							;	jsr prns
    142  731c							;	dc.b "PONG",13,0
    143  731c		       a9 00		      lda	#PING_STATE_IDLE
    144  731e		       8d 63 72 	      sta	PING_STATE
    145  7321		       60		      rts
    146  7322
    147  7322				   PING_PINGED		; Process incoming ping
    148  7322							;is this ping for our IP?
    149  7322							;	jsr prns
    150  7322							;	dc.b "PINGED",13,0
    151  7322		       ad b3 72 	      lda	PING_REPLYTOPING
    152  7325		       f0 03		      beq	pipid0
    153  7327		       20 e0 72 	      jsr	PING_PONG
    154  732a				   pipid0
    155  732a		       60		      rts
    156  732b
------- FILE SIXNET.ASM
    191  732b
------- FILE PACKET.ASM LEVEL 3 PASS 2
      0  732b					      include	"PACKET.ASM"	;(LB) - moved
      1  732b							;Source by Six of Style (Oliver VieBrooks)
      2  732b							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  732b							;
      4  732b							;Last Updated 8/24/2005
      5  732b							;
      6  732b
      7  732b				   LOOKUP100		; Lookup table for below to spread values 0-100
      8  732b					      incbin	"lookup100.bin"
      9  742b
     10  742b		       00	   PACKET_LOCAL dc.b	$00	;Used to determine where to send packets (gateway or dest)
     11  742c		       00 00	   IN_PACKET_LENGTH dc.w	$0000
     12  742e		       00 00	   OUT_PACKET_LENGTH dc.w	$0000
     13  7430
     14  7430		       00 00	   IN_PACKET_STATUS dc.w	$0000
     15  7432
     16  7432		       00 00	   TXCOUNT    dc.w	$0000
     17  7434
     18  7434		       00 00	   RXCOUNT    dc.w	$0000
     19  7436
     20  7436		       00 00 00 00*INPACKET   ds.b	$0400	; Maximum Packet Size
     21  7836		       00 00 00 00*OUTPACKET  ds.b	$0400
------- FILE SIXNET.ASM
    193  7c36
    194  7c36							;BUFFER=======================================================================
    195  7c36
    196  7c36				   BUFSTART
    197  cfff					      org	$cfff
    198  cfff				   BUFFEND
------- FILE duel-main.asm
